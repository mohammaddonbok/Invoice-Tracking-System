{"version":3,"file":"ngx-snackbar.umd.js","sources":["../../src/snackbar.module.ts","../../src/pipe/safe-html.pipe.ts","../../src/snackbar/snackbar.component.ts","../../src/snack/snack.component.ts","../../src/service/snackbar.service.ts","../../../../packages/platform-browser/src/version.ts","../../../../packages/platform-browser/src/dom/debug/by.ts","../../../../packages/platform-browser/src/private_export.ts","../../../../packages/platform-browser/src/browser/transfer_state.ts","../../../../packages/platform-browser/src/browser/tools/browser.ts","../../../../packages/platform-browser/src/browser/title.ts","../../../../packages/platform-browser/src/browser/meta.ts","../../../../packages/platform-browser/src/browser.ts","../../../../packages/platform-browser/src/security/dom_sanitization_service.ts","../../../../packages/platform-browser/src/dom/events/key_events.ts","../../../../packages/platform-browser/src/dom/events/hammer_gestures.ts","../../../../packages/platform-browser/src/dom/events/dom_events.ts","../../../../packages/platform-browser/src/dom/dom_renderer.ts","../../../../packages/platform-browser/src/dom/shared_styles_host.ts","../../../../packages/platform-browser/src/dom/events/event_manager.ts","../../../../packages/platform-browser/src/dom/debug/ng_probe.ts","../../../../packages/platform-browser/src/dom/util.ts","../../../../packages/platform-browser/src/browser/testability.ts","../../../../packages/platform-browser/src/browser/server-transition.ts","../../../../packages/platform-browser/src/browser/location/browser_platform_location.ts","../../../../packages/platform-browser/src/browser/location/history.ts","../../../../packages/platform-browser/src/dom/dom_tokens.ts","../../../../packages/platform-browser/src/browser/browser_adapter.ts","../../../../packages/platform-browser/src/browser/generic_browser_adapter.ts","../../../../packages/platform-browser/src/dom/dom_adapter.ts","../../node_modules/rxjs/src/index.ts","../../node_modules/rxjs/src/internal/observable/zip.ts","../../node_modules/rxjs/src/internal/observable/using.ts","../../node_modules/rxjs/src/internal/observable/timer.ts","../../node_modules/rxjs/src/internal/observable/range.ts","../../node_modules/rxjs/src/internal/observable/race.ts","../../node_modules/rxjs/src/internal/observable/pairs.ts","../../node_modules/rxjs/src/internal/observable/onErrorResumeNext.ts","../../node_modules/rxjs/src/internal/observable/never.ts","../../node_modules/rxjs/src/internal/observable/merge.ts","../../node_modules/rxjs/src/internal/observable/interval.ts","../../node_modules/rxjs/src/internal/util/isNumeric.ts","../../node_modules/rxjs/src/internal/observable/iif.ts","../../node_modules/rxjs/src/internal/observable/generate.ts","../../node_modules/rxjs/src/internal/observable/fromEventPattern.ts","../../node_modules/rxjs/src/internal/observable/fromEvent.ts","../../node_modules/rxjs/src/internal/observable/forkJoin.ts","../../node_modules/rxjs/src/internal/observable/defer.ts","../../node_modules/rxjs/src/internal/observable/concat.ts","../../node_modules/rxjs/src/internal/operators/concatAll.ts","../../node_modules/rxjs/src/internal/operators/mergeAll.ts","../../node_modules/rxjs/src/internal/operators/mergeMap.ts","../../node_modules/rxjs/src/internal/observable/from.ts","../../node_modules/rxjs/src/internal/observable/fromObservable.ts","../../node_modules/rxjs/src/internal/observable/fromIterable.ts","../../node_modules/rxjs/src/internal/observable/fromPromise.ts","../../node_modules/rxjs/src/internal/util/isIterable.ts","../../node_modules/rxjs/src/internal/util/isInteropObservable.ts","../../node_modules/rxjs/src/internal/observable/combineLatest.ts","../../node_modules/rxjs/src/internal/util/subscribeToResult.ts","../../node_modules/rxjs/src/internal/util/subscribeTo.ts","../../node_modules/rxjs/src/internal/util/isPromise.ts","../../node_modules/rxjs/src/internal/util/isArrayLike.ts","../../node_modules/rxjs/src/internal/util/subscribeToObservable.ts","../../node_modules/rxjs/src/internal/util/subscribeToIterable.ts","../../node_modules/rxjs/src/internal/symbol/iterator.ts","../../node_modules/rxjs/src/internal/util/subscribeToPromise.ts","../../node_modules/rxjs/src/internal/InnerSubscriber.ts","../../node_modules/rxjs/src/internal/OuterSubscriber.ts","../../node_modules/rxjs/src/internal/observable/bindNodeCallback.ts","../../node_modules/rxjs/src/internal/observable/bindCallback.ts","../../node_modules/rxjs/src/internal/operators/map.ts","../../node_modules/rxjs/src/internal/util/TimeoutError.ts","../../node_modules/rxjs/src/internal/util/EmptyError.ts","../../node_modules/rxjs/src/internal/util/ArgumentOutOfRangeError.ts","../../node_modules/rxjs/src/internal/util/isObservable.ts","../../node_modules/rxjs/src/internal/util/identity.ts","../../node_modules/rxjs/src/internal/scheduler/VirtualTimeScheduler.ts","../../node_modules/rxjs/src/internal/scheduler/animationFrame.ts","../../node_modules/rxjs/src/internal/scheduler/AnimationFrameScheduler.ts","../../node_modules/rxjs/src/internal/scheduler/AnimationFrameAction.ts","../../node_modules/rxjs/src/internal/scheduler/async.ts","../../node_modules/rxjs/src/internal/scheduler/asap.ts","../../node_modules/rxjs/src/internal/scheduler/AsapScheduler.ts","../../node_modules/rxjs/src/internal/scheduler/AsapAction.ts","../../node_modules/rxjs/src/internal/util/Immediate.ts","../../node_modules/rxjs/src/internal/AsyncSubject.ts","../../node_modules/rxjs/src/internal/ReplaySubject.ts","../../node_modules/rxjs/src/internal/operators/observeOn.ts","../../node_modules/rxjs/src/internal/Notification.ts","../../node_modules/rxjs/src/internal/observable/throwError.ts","../../node_modules/rxjs/src/internal/observable/of.ts","../../node_modules/rxjs/src/internal/observable/scalar.ts","../../node_modules/rxjs/src/internal/observable/fromArray.ts","../../node_modules/rxjs/src/internal/util/subscribeToArray.ts","../../node_modules/rxjs/src/internal/util/isScheduler.ts","../../node_modules/rxjs/src/internal/observable/empty.ts","../../node_modules/rxjs/src/internal/scheduler/queue.ts","../../node_modules/rxjs/src/internal/scheduler/QueueScheduler.ts","../../node_modules/rxjs/src/internal/scheduler/AsyncScheduler.ts","../../node_modules/rxjs/src/internal/Scheduler.ts","../../node_modules/rxjs/src/internal/scheduler/QueueAction.ts","../../node_modules/rxjs/src/internal/scheduler/AsyncAction.ts","../../node_modules/rxjs/src/internal/scheduler/Action.ts","../../node_modules/rxjs/src/internal/BehaviorSubject.ts","../../node_modules/rxjs/src/internal/operators/groupBy.ts","../../node_modules/rxjs/src/internal/observable/ConnectableObservable.ts","../../node_modules/rxjs/src/internal/operators/refCount.ts","../../node_modules/rxjs/src/internal/Subject.ts","../../node_modules/rxjs/src/internal/SubjectSubscription.ts","../../node_modules/rxjs/src/internal/util/ObjectUnsubscribedError.ts","../../node_modules/rxjs/src/internal/Observable.ts","../../node_modules/rxjs/src/internal/util/pipe.ts","../../node_modules/rxjs/src/internal/util/noop.ts","../../node_modules/rxjs/src/internal/symbol/observable.ts","../../node_modules/rxjs/src/internal/util/toSubscriber.ts","../../node_modules/rxjs/src/internal/util/canReportError.ts","../../node_modules/rxjs/src/internal/Subscriber.ts","../../node_modules/rxjs/src/internal/symbol/rxSubscriber.ts","../../node_modules/rxjs/src/internal/Subscription.ts","../../node_modules/rxjs/src/internal/util/UnsubscriptionError.ts","../../node_modules/rxjs/src/internal/util/tryCatch.ts","../../node_modules/rxjs/src/internal/util/errorObject.ts","../../node_modules/rxjs/src/internal/util/isObject.ts","../../node_modules/rxjs/src/internal/util/isArray.ts","../../node_modules/rxjs/src/internal/Observer.ts","../../node_modules/rxjs/src/internal/util/hostReportError.ts","../../node_modules/rxjs/src/internal/config.ts","../../node_modules/rxjs/src/internal/util/isFunction.ts","../../node_modules/tslib/tslib.es6.js"],"sourcesContent":["import {NgModule, ModuleWithProviders} from '@angular/core';\nimport {CommonModule} from '@angular/common';\n\nexport * from './service/snackbar.service';\n\nimport {SnackbarService} from './service/snackbar.service';\nimport {SnackComponent} from './snack/snack.component';\nimport {SnackbarComponent} from './snackbar/snackbar.component';\nimport {SafeHtmlPipe} from './pipe/safe-html.pipe';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [SnackbarComponent, SnackComponent, SafeHtmlPipe],\n  exports: [SnackbarComponent, SnackComponent],\n  providers: [SnackbarService]\n})\nexport class SnackbarModule {\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: SnackbarModule,\n      providers: [SnackbarService]\n    };\n  }\n}","import {Pipe, PipeTransform} from '@angular/core';\nimport {DomSanitizer, SafeHtml} from '@angular/platform-browser';\n\n@Pipe({name: 'safeHtml'})\nexport class SafeHtmlPipe implements PipeTransform {\n    constructor(private sanitized: DomSanitizer) {\n    }\n\n    transform(value: string) {\n        return this.sanitized.bypassSecurityTrustHtml(value);\n    }\n}\n","import {Component, EventEmitter, Input, Output} from '@angular/core';\nimport {SnackbarService} from '../service/snackbar.service';\n\n@Component({\n  selector: 'ngx-snackbar',\n  template: `\n      <div class=\"snackbars\" [ngClass]=\"position || 'bottom-right'\">\n          <ngx-snack *ngFor=\"let snackbar of snacks\" [background]=\"snackbar.background || background\"\n                        [customClass]=\"snackbar.customClass || customClass\"\n                        [color]=\"snackbar.color || color || calcTextColor(snackbar.background || background)\">\n              <div class=\"snack-text\" [innerHtml]=\"snackbar.msg | safeHtml\">\n\n              </div>\n              <div *ngIf=\"snackbar.action.text\" class=\"snack-action\" (click)=\"snackbar.action.onClick()\"\n                   [ngStyle]=\"{color: snackbar.action.color || accent}\">\n                  {{snackbar.action.text}}\n              </div>\n          </ngx-snack>\n      </div>\n  `\n})\nexport class SnackbarComponent {\n  @Input() position: 'top-left' | 'top-center' | 'top-right' | 'bottom-left' | 'bottom-center' | 'bottom-right';\n  @Input() max: number;\n  @Input() background: string;\n  @Input() accent: string;\n  @Input() color: string;\n  @Input() customClass: any;\n  @Input() timeout: number;\n\n  @Output() public onAdd: EventEmitter<any> = new EventEmitter<any>();\n  @Output() public onRemove: EventEmitter<any> = new EventEmitter<any>();\n  @Output() public onClear: EventEmitter<boolean> = new EventEmitter<boolean>();\n\n  snacks: Array<{\n    id: string, msg: string, timeout?: number, color?: string, background?: string, customClass?: any, action?: {\n      text: string, onClick?: Function, color?: string\n    }, onAdd?: Function, onRemove?: Function, timeoutObj?: any\n  }> = [];\n\n  constructor(private snackbarService: SnackbarService) {\n    this.snackbarService.get()\n      .subscribe(snack => {\n        if (snack.action === 'add') {\n          this.add(snack.data);\n        } else if (snack.action === 'remove') {\n          this.remove(snack.id);\n        } else if (snack.action === 'clear') {\n          this.clear();\n        }\n      });\n  }\n\n  add(snack) {\n    let timeout;\n    const id = this.uuid();\n\n    if (this.max && this.max > 0 && this.snacks.length === this.max) {\n      this.remove(this.snacks[0].id);\n    }\n\n    if (snack.timeout || this.timeout) {\n      timeout = setTimeout(() => {\n        this.remove(id);\n      }, snack.timeout || this.timeout)\n    }\n\n    const data = Object.assign({id: id, timeoutObj: timeout}, snack);\n\n    if (snack.action) {\n      const that = this;\n      const fcn = snack.action.onClick || new Function();\n      snack.action.onClick = () => {\n        fcn(data);\n        that.remove(id);\n      };\n    }\n\n    if (snack.onAdd) {\n      snack.onAdd(data);\n    }\n\n    if (this.onAdd) {\n      this.onAdd.emit(data);\n    }\n\n    this.snacks.push(data);\n  }\n\n  remove(id) {\n    const snack = this.snacks.find(obj => obj.id === id);\n\n    if (snack) {\n      if (snack.onRemove) {\n        snack.onRemove(snack);\n      }\n\n      if (this.onRemove) {\n        this.onRemove.emit(snack);\n      }\n\n      if (snack.timeoutObj) {\n        clearTimeout(snack.timeoutObj);\n      }\n    }\n\n    this.snacks = this.snacks.filter(obj => obj.id !== id);\n  }\n\n  clear() {\n    // this.snacks.forEach(snack => {\n    //   this.remove(snack.id);\n    // });\n\n    this.snacks = [];\n\n    if (this.onClear) {\n      this.onClear.emit(true);\n    }\n  }\n\n  uuid() {\n    // tslint:disable:no-bitwise\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n      const r = Math.random() * 16 | 0, v = c === 'x' ? r : (r & 0x3 | 0x8);\n      return v.toString(16);\n    });\n    // tslint:enable:no-bitwise\n  }\n\n  calcTextColor(background) {\n    if (!background) {\n      return null;\n    }\n\n    function hexToRgb(hex) {\n      const shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n      hex = hex.replace(shorthandRegex, (m, r, g, b) => {\n        return r + r + g + g + b + b;\n      });\n\n      const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n      return result ? {\n        r: parseInt(result[1], 16),\n        g: parseInt(result[2], 16),\n        b: parseInt(result[3], 16)\n      } : null;\n    }\n\n    const rgb = hexToRgb(background);\n    if (!rgb) {\n      return null;\n    }\n\n    const color = [rgb.r / 255, rgb.g / 255, rgb.b / 255];\n\n    for (let i = 0; i < color.length; ++i) {\n      if (color[i] <= 0.03928) {\n        color[i] = color[i] / 12.92;\n      } else {\n        color[i] = Math.pow((color[i] + 0.055) / 1.055, 2.4);\n      }\n    }\n\n    const l = 0.2126 * color[0] + 0.7152 * color[1] + 0.0722 * color[2];\n\n    if (l > 0.179) {\n      return '#000';\n    } else {\n      return '#fff';\n    }\n  }\n}\n","import {Component, Input} from '@angular/core';\n\n@Component({\n  selector: 'ngx-snack',\n  template: `\n      <div class=\"snack\" [ngStyle]=\"{background: background, color: color}\" [ngClass]=\"customClass\">\n          <ng-content></ng-content>\n      </div>\n  `\n})\nexport class SnackComponent {\n  @Input() background;\n  @Input() color;\n  @Input() customClass;\n}\n","import {Injectable} from '@angular/core';\nimport {Subject} from 'rxjs';\n\n@Injectable()\nexport class SnackbarService {\n  private snackService = new Subject<any>();\n\n  get() {\n    return this.snackService.asObservable();\n  }\n\n  add(data: {\n    msg: string, timeout?: number, background?: string, color?: string, customClass?: any,\n    action?: { text: string, onClick?: Function, color?: string }, onAdd?: Function, onRemove?: Function\n  }) {\n    this.snackService.next({\n      action: 'add',\n      data: data\n    });\n  }\n\n  remove(id: string) {\n    this.snackService.next({action: 'remove', id: id});\n  }\n\n  clear() {\n    this.snackService.next({action: 'clear'});\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @module\n * @description\n * Entry point for all public APIs of the common package.\n */\n\nimport {Version} from '@angular/core';\n\n/**\n * @publicApi\n */\nexport const VERSION = new Version('7.0.2');\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DebugElement, Predicate, Type} from '@angular/core';\nimport {getDOM} from '../../dom/dom_adapter';\n\n\n\n/**\n * Predicates for use with {@link DebugElement}'s query functions.\n *\n * @publicApi\n */\nexport class By {\n  /**\n   * Match all elements.\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * {@example platform-browser/dom/debug/ts/by/by.ts region='by_all'}\n   */\n  static all(): Predicate<DebugElement> { return (debugElement) => true; }\n\n  /**\n   * Match elements by the given CSS selector.\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * {@example platform-browser/dom/debug/ts/by/by.ts region='by_css'}\n   */\n  static css(selector: string): Predicate<DebugElement> {\n    return (debugElement) => {\n      return debugElement.nativeElement != null ?\n          getDOM().elementMatches(debugElement.nativeElement, selector) :\n          false;\n    };\n  }\n\n  /**\n   * Match elements that have the given directive present.\n   *\n   * @usageNotes\n   * ### Example\n   *\n   * {@example platform-browser/dom/debug/ts/by/by.ts region='by_directive'}\n   */\n  static directive(type: Type<any>): Predicate<DebugElement> {\n    return (debugElement) => debugElement.providerTokens !.indexOf(type) !== -1;\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport {BROWSER_SANITIZATION_PROVIDERS as ÉµBROWSER_SANITIZATION_PROVIDERS, INTERNAL_BROWSER_PLATFORM_PROVIDERS as ÉµINTERNAL_BROWSER_PLATFORM_PROVIDERS, initDomAdapter as ÉµinitDomAdapter} from './browser';\nexport {BrowserDomAdapter as ÉµBrowserDomAdapter} from './browser/browser_adapter';\nexport {BrowserPlatformLocation as ÉµBrowserPlatformLocation} from './browser/location/browser_platform_location';\nexport {TRANSITION_ID as ÉµTRANSITION_ID} from './browser/server-transition';\nexport {BrowserGetTestability as ÉµBrowserGetTestability} from './browser/testability';\nexport {escapeHtml as ÉµescapeHtml} from './browser/transfer_state';\nexport {ELEMENT_PROBE_PROVIDERS as ÉµELEMENT_PROBE_PROVIDERS} from './dom/debug/ng_probe';\nexport {DomAdapter as ÉµDomAdapter, getDOM as ÉµgetDOM, setRootDomAdapter as ÉµsetRootDomAdapter} from './dom/dom_adapter';\nexport {DomRendererFactory2 as ÉµDomRendererFactory2, NAMESPACE_URIS as ÉµNAMESPACE_URIS, flattenStyles as ÉµflattenStyles, shimContentAttribute as ÉµshimContentAttribute, shimHostAttribute as ÉµshimHostAttribute} from './dom/dom_renderer';\nexport {DomEventsPlugin as ÉµDomEventsPlugin} from './dom/events/dom_events';\nexport {HammerGesturesPlugin as ÉµHammerGesturesPlugin} from './dom/events/hammer_gestures';\nexport {KeyEventsPlugin as ÉµKeyEventsPlugin} from './dom/events/key_events';\nexport {DomSharedStylesHost as ÉµDomSharedStylesHost, SharedStylesHost as ÉµSharedStylesHost} from './dom/shared_styles_host';\nexport {DomSanitizerImpl as ÉµDomSanitizerImpl} from './security/dom_sanitization_service';\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {APP_ID, Injectable, NgModule} from '@angular/core';\nimport {DOCUMENT} from '../dom/dom_tokens';\n\nexport function escapeHtml(text: string): string {\n  const escapedText: {[k: string]: string} = {\n    '&': '&a;',\n    '\"': '&q;',\n    '\\'': '&s;',\n    '<': '&l;',\n    '>': '&g;',\n  };\n  return text.replace(/[&\"'<>]/g, s => escapedText[s]);\n}\n\nexport function unescapeHtml(text: string): string {\n  const unescapedText: {[k: string]: string} = {\n    '&a;': '&',\n    '&q;': '\"',\n    '&s;': '\\'',\n    '&l;': '<',\n    '&g;': '>',\n  };\n  return text.replace(/&[^;]+;/g, s => unescapedText[s]);\n}\n\n/**\n * A type-safe key to use with `TransferState`.\n *\n * Example:\n *\n * ```\n * const COUNTER_KEY = makeStateKey<number>('counter');\n * let value = 10;\n *\n * transferState.set(COUNTER_KEY, value);\n * ```\n *\n * @publicApi\n */\nexport type StateKey<T> = string & {__not_a_string: never};\n\n/**\n * Create a `StateKey<T>` that can be used to store value of type T with `TransferState`.\n *\n * Example:\n *\n * ```\n * const COUNTER_KEY = makeStateKey<number>('counter');\n * let value = 10;\n *\n * transferState.set(COUNTER_KEY, value);\n * ```\n *\n * @publicApi\n */\nexport function makeStateKey<T = void>(key: string): StateKey<T> {\n  return key as StateKey<T>;\n}\n\n/**\n * A key value store that is transferred from the application on the server side to the application\n * on the client side.\n *\n * `TransferState` will be available as an injectable token. To use it import\n * `ServerTransferStateModule` on the server and `BrowserTransferStateModule` on the client.\n *\n * The values in the store are serialized/deserialized using JSON.stringify/JSON.parse. So only\n * boolean, number, string, null and non-class objects will be serialized and deserialzied in a\n * non-lossy manner.\n *\n * @publicApi\n */\n@Injectable()\nexport class TransferState {\n  private store: {[k: string]: {} | undefined} = {};\n  private onSerializeCallbacks: {[k: string]: () => {} | undefined} = {};\n\n  /** @internal */\n  static init(initState: {}) {\n    const transferState = new TransferState();\n    transferState.store = initState;\n    return transferState;\n  }\n\n  /**\n   * Get the value corresponding to a key. Return `defaultValue` if key is not found.\n   */\n  get<T>(key: StateKey<T>, defaultValue: T): T {\n    return this.store[key] !== undefined ? this.store[key] as T : defaultValue;\n  }\n\n  /**\n   * Set the value corresponding to a key.\n   */\n  set<T>(key: StateKey<T>, value: T): void { this.store[key] = value; }\n\n  /**\n   * Remove a key from the store.\n   */\n  remove<T>(key: StateKey<T>): void { delete this.store[key]; }\n\n  /**\n   * Test whether a key exists in the store.\n   */\n  hasKey<T>(key: StateKey<T>) { return this.store.hasOwnProperty(key); }\n\n  /**\n   * Register a callback to provide the value for a key when `toJson` is called.\n   */\n  onSerialize<T>(key: StateKey<T>, callback: () => T): void {\n    this.onSerializeCallbacks[key] = callback;\n  }\n\n  /**\n   * Serialize the current state of the store to JSON.\n   */\n  toJson(): string {\n    // Call the onSerialize callbacks and put those values into the store.\n    for (const key in this.onSerializeCallbacks) {\n      if (this.onSerializeCallbacks.hasOwnProperty(key)) {\n        try {\n          this.store[key] = this.onSerializeCallbacks[key]();\n        } catch (e) {\n          console.warn('Exception in onSerialize callback: ', e);\n        }\n      }\n    }\n    return JSON.stringify(this.store);\n  }\n}\n\nexport function initTransferState(doc: Document, appId: string) {\n  // Locate the script tag with the JSON data transferred from the server.\n  // The id of the script tag is set to the Angular appId + 'state'.\n  const script = doc.getElementById(appId + '-state');\n  let initialState = {};\n  if (script && script.textContent) {\n    try {\n      initialState = JSON.parse(unescapeHtml(script.textContent));\n    } catch (e) {\n      console.warn('Exception while restoring TransferState for app ' + appId, e);\n    }\n  }\n  return TransferState.init(initialState);\n}\n\n/**\n * NgModule to install on the client side while using the `TransferState` to transfer state from\n * server to client.\n *\n * @publicApi\n */\n@NgModule({\n  providers: [{provide: TransferState, useFactory: initTransferState, deps: [DOCUMENT, APP_ID]}],\n})\nexport class BrowserTransferStateModule {\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nconst win = typeof window !== 'undefined' && window || <any>{};\nexport {win as window};\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, Injectable, inject} from '@angular/core';\n\nimport {getDOM} from '../dom/dom_adapter';\nimport {DOCUMENT} from '../dom/dom_tokens';\n\n/**\n * Factory to create Title service.\n */\nexport function createTitle() {\n  return new Title(inject(DOCUMENT));\n}\n\n/**\n * A service that can be used to get and set the title of a current HTML document.\n *\n * Since an Angular application can't be bootstrapped on the entire HTML document (`<html>` tag)\n * it is not possible to bind to the `text` property of the `HTMLTitleElement` elements\n * (representing the `<title>` tag). Instead, this service can be used to set and get the current\n * title value.\n *\n * @publicApi\n */\n@Injectable({providedIn: 'root', useFactory: createTitle, deps: []})\nexport class Title {\n  constructor(@Inject(DOCUMENT) private _doc: any) {}\n  /**\n   * Get the title of the current HTML document.\n   */\n  getTitle(): string { return getDOM().getTitle(this._doc); }\n\n  /**\n   * Set the title of the current HTML document.\n   * @param newTitle\n   */\n  setTitle(newTitle: string) { getDOM().setTitle(this._doc, newTitle); }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, Injectable, inject} from '@angular/core';\n\nimport {DomAdapter, getDOM} from '../dom/dom_adapter';\nimport {DOCUMENT} from '../dom/dom_tokens';\n\n\n\n/**\n * Represents a meta element.\n *\n * @publicApi\n */\nexport type MetaDefinition = {\n  charset?: string; content?: string; httpEquiv?: string; id?: string; itemprop?: string;\n  name?: string;\n  property?: string;\n  scheme?: string;\n  url?: string;\n} &\n{\n  // TODO(IgorMinar): this type looks wrong\n  [prop: string]: string;\n};\n\n/**\n * Factory to create Meta service.\n */\nexport function createMeta() {\n  return new Meta(inject(DOCUMENT));\n}\n\n/**\n * A service that can be used to get and add meta tags.\n *\n * @publicApi\n */\n@Injectable({providedIn: 'root', useFactory: createMeta, deps: []})\nexport class Meta {\n  private _dom: DomAdapter;\n  constructor(@Inject(DOCUMENT) private _doc: any) { this._dom = getDOM(); }\n\n  addTag(tag: MetaDefinition, forceCreation: boolean = false): HTMLMetaElement|null {\n    if (!tag) return null;\n    return this._getOrCreateElement(tag, forceCreation);\n  }\n\n  addTags(tags: MetaDefinition[], forceCreation: boolean = false): HTMLMetaElement[] {\n    if (!tags) return [];\n    return tags.reduce((result: HTMLMetaElement[], tag: MetaDefinition) => {\n      if (tag) {\n        result.push(this._getOrCreateElement(tag, forceCreation));\n      }\n      return result;\n    }, []);\n  }\n\n  getTag(attrSelector: string): HTMLMetaElement|null {\n    if (!attrSelector) return null;\n    return this._dom.querySelector(this._doc, `meta[${attrSelector}]`) || null;\n  }\n\n  getTags(attrSelector: string): HTMLMetaElement[] {\n    if (!attrSelector) return [];\n    const list /*NodeList*/ = this._dom.querySelectorAll(this._doc, `meta[${attrSelector}]`);\n    return list ? [].slice.call(list) : [];\n  }\n\n  updateTag(tag: MetaDefinition, selector?: string): HTMLMetaElement|null {\n    if (!tag) return null;\n    selector = selector || this._parseSelector(tag);\n    const meta: HTMLMetaElement = this.getTag(selector) !;\n    if (meta) {\n      return this._setMetaElementAttributes(tag, meta);\n    }\n    return this._getOrCreateElement(tag, true);\n  }\n\n  removeTag(attrSelector: string): void { this.removeTagElement(this.getTag(attrSelector) !); }\n\n  removeTagElement(meta: HTMLMetaElement): void {\n    if (meta) {\n      this._dom.remove(meta);\n    }\n  }\n\n  private _getOrCreateElement(meta: MetaDefinition, forceCreation: boolean = false):\n      HTMLMetaElement {\n    if (!forceCreation) {\n      const selector: string = this._parseSelector(meta);\n      const elem: HTMLMetaElement = this.getTag(selector) !;\n      // It's allowed to have multiple elements with the same name so it's not enough to\n      // just check that element with the same name already present on the page. We also need to\n      // check if element has tag attributes\n      if (elem && this._containsAttributes(meta, elem)) return elem;\n    }\n    const element: HTMLMetaElement = this._dom.createElement('meta') as HTMLMetaElement;\n    this._setMetaElementAttributes(meta, element);\n    const head = this._dom.getElementsByTagName(this._doc, 'head')[0];\n    this._dom.appendChild(head, element);\n    return element;\n  }\n\n  private _setMetaElementAttributes(tag: MetaDefinition, el: HTMLMetaElement): HTMLMetaElement {\n    Object.keys(tag).forEach((prop: string) => this._dom.setAttribute(el, prop, tag[prop]));\n    return el;\n  }\n\n  private _parseSelector(tag: MetaDefinition): string {\n    const attr: string = tag.name ? 'name' : 'property';\n    return `${attr}=\"${tag[attr]}\"`;\n  }\n\n  private _containsAttributes(tag: MetaDefinition, elem: HTMLMetaElement): boolean {\n    return Object.keys(tag).every((key: string) => this._dom.getAttribute(elem, key) === tag[key]);\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {CommonModule, PlatformLocation, ÉµPLATFORM_BROWSER_ID as PLATFORM_BROWSER_ID} from '@angular/common';\nimport {APP_ID, ApplicationModule, ErrorHandler, Inject, ModuleWithProviders, NgModule, NgZone, Optional, PLATFORM_ID, PLATFORM_INITIALIZER, PlatformRef, RendererFactory2, Sanitizer, SkipSelf, StaticProvider, Testability, createPlatformFactory, platformCore, ÉµAPP_ROOT as APP_ROOT, ÉµConsole as Console} from '@angular/core';\n\nimport {BrowserDomAdapter} from './browser/browser_adapter';\nimport {BrowserPlatformLocation} from './browser/location/browser_platform_location';\nimport {SERVER_TRANSITION_PROVIDERS, TRANSITION_ID} from './browser/server-transition';\nimport {BrowserGetTestability} from './browser/testability';\nimport {ELEMENT_PROBE_PROVIDERS} from './dom/debug/ng_probe';\nimport {DomRendererFactory2} from './dom/dom_renderer';\nimport {DOCUMENT} from './dom/dom_tokens';\nimport {DomEventsPlugin} from './dom/events/dom_events';\nimport {EVENT_MANAGER_PLUGINS, EventManager} from './dom/events/event_manager';\nimport {HAMMER_GESTURE_CONFIG, HAMMER_LOADER, HammerGestureConfig, HammerGesturesPlugin} from './dom/events/hammer_gestures';\nimport {KeyEventsPlugin} from './dom/events/key_events';\nimport {DomSharedStylesHost, SharedStylesHost} from './dom/shared_styles_host';\nimport {DomSanitizer, DomSanitizerImpl} from './security/dom_sanitization_service';\n\nexport const INTERNAL_BROWSER_PLATFORM_PROVIDERS: StaticProvider[] = [\n  {provide: PLATFORM_ID, useValue: PLATFORM_BROWSER_ID},\n  {provide: PLATFORM_INITIALIZER, useValue: initDomAdapter, multi: true},\n  {provide: PlatformLocation, useClass: BrowserPlatformLocation, deps: [DOCUMENT]},\n  {provide: DOCUMENT, useFactory: _document, deps: []},\n];\n\n/**\n * @security Replacing built-in sanitization providers exposes the application to XSS risks.\n * Attacker-controlled data introduced by an unsanitized provider could expose your\n * application to XSS risks. For more detail, see the [Security Guide](http://g.co/ng/security).\n * @publicApi\n */\nexport const BROWSER_SANITIZATION_PROVIDERS: StaticProvider[] = [\n  {provide: Sanitizer, useExisting: DomSanitizer},\n  {provide: DomSanitizer, useClass: DomSanitizerImpl, deps: [DOCUMENT]},\n];\n\n/**\n * @publicApi\n */\nexport const platformBrowser: (extraProviders?: StaticProvider[]) => PlatformRef =\n    createPlatformFactory(platformCore, 'browser', INTERNAL_BROWSER_PLATFORM_PROVIDERS);\n\nexport function initDomAdapter() {\n  BrowserDomAdapter.makeCurrent();\n  BrowserGetTestability.init();\n}\n\nexport function errorHandler(): ErrorHandler {\n  return new ErrorHandler();\n}\n\nexport function _document(): any {\n  return document;\n}\n\nexport const BROWSER_MODULE_PROVIDERS: StaticProvider[] = [\n  BROWSER_SANITIZATION_PROVIDERS,\n  {provide: APP_ROOT, useValue: true},\n  {provide: ErrorHandler, useFactory: errorHandler, deps: []},\n  {\n    provide: EVENT_MANAGER_PLUGINS,\n    useClass: DomEventsPlugin,\n    multi: true,\n    deps: [DOCUMENT, NgZone, PLATFORM_ID]\n  },\n  {provide: EVENT_MANAGER_PLUGINS, useClass: KeyEventsPlugin, multi: true, deps: [DOCUMENT]},\n  {\n    provide: EVENT_MANAGER_PLUGINS,\n    useClass: HammerGesturesPlugin,\n    multi: true,\n    deps: [DOCUMENT, HAMMER_GESTURE_CONFIG, Console, [new Optional(), HAMMER_LOADER]]\n  },\n  {provide: HAMMER_GESTURE_CONFIG, useClass: HammerGestureConfig, deps: []},\n  {\n    provide: DomRendererFactory2,\n    useClass: DomRendererFactory2,\n    deps: [EventManager, DomSharedStylesHost]\n  },\n  {provide: RendererFactory2, useExisting: DomRendererFactory2},\n  {provide: SharedStylesHost, useExisting: DomSharedStylesHost},\n  {provide: DomSharedStylesHost, useClass: DomSharedStylesHost, deps: [DOCUMENT]},\n  {provide: Testability, useClass: Testability, deps: [NgZone]},\n  {provide: EventManager, useClass: EventManager, deps: [EVENT_MANAGER_PLUGINS, NgZone]},\n  ELEMENT_PROBE_PROVIDERS,\n];\n\n/**\n * Exports required infrastructure for all Angular apps.\n * Included by defaults in all Angular apps created with the CLI\n * `new` command.\n * Re-exports `CommonModule` and `ApplicationModule`, making their\n * exports and providers available to all apps.\n *\n * @publicApi\n */\n@NgModule({providers: BROWSER_MODULE_PROVIDERS, exports: [CommonModule, ApplicationModule]})\nexport class BrowserModule {\n  constructor(@Optional() @SkipSelf() @Inject(BrowserModule) parentModule: BrowserModule|null) {\n    if (parentModule) {\n      throw new Error(\n          `BrowserModule has already been loaded. If you need access to common directives such as NgIf and NgFor from a lazy loaded module, import CommonModule instead.`);\n    }\n  }\n\n  /**\n   * Configures a browser-based app to transition from a server-rendered app, if\n   * one is present on the page.\n   *\n   * @param params An object containing an identifier for the app to transition.\n   * The ID must match between the client and server versions of the app.\n   * @returns The reconfigured `BrowserModule` to import into the app's root `AppModule`.\n   */\n  static withServerTransition(params: {appId: string}): ModuleWithProviders<BrowserModule> {\n    return {\n      ngModule: BrowserModule,\n      providers: [\n        {provide: APP_ID, useValue: params.appId},\n        {provide: TRANSITION_ID, useExisting: APP_ID},\n        SERVER_TRANSITION_PROVIDERS,\n      ],\n    };\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, Injectable, Sanitizer, SecurityContext, Éµ_sanitizeHtml as _sanitizeHtml, Éµ_sanitizeStyle as _sanitizeStyle, Éµ_sanitizeUrl as _sanitizeUrl} from '@angular/core';\n\nimport {DOCUMENT} from '../dom/dom_tokens';\n\nexport {SecurityContext};\n\n\n\n/**\n * Marker interface for a value that's safe to use in a particular context.\n *\n * @publicApi\n */\nexport interface SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as HTML.\n *\n * @publicApi\n */\nexport interface SafeHtml extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as style (CSS).\n *\n * @publicApi\n */\nexport interface SafeStyle extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as JavaScript.\n *\n * @publicApi\n */\nexport interface SafeScript extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as a URL linking to a document.\n *\n * @publicApi\n */\nexport interface SafeUrl extends SafeValue {}\n\n/**\n * Marker interface for a value that's safe to use as a URL to load executable code from.\n *\n * @publicApi\n */\nexport interface SafeResourceUrl extends SafeValue {}\n\n/**\n * DomSanitizer helps preventing Cross Site Scripting Security bugs (XSS) by sanitizing\n * values to be safe to use in the different DOM contexts.\n *\n * For example, when binding a URL in an `<a [href]=\"someValue\">` hyperlink, `someValue` will be\n * sanitized so that an attacker cannot inject e.g. a `javascript:` URL that would execute code on\n * the website.\n *\n * In specific situations, it might be necessary to disable sanitization, for example if the\n * application genuinely needs to produce a `javascript:` style link with a dynamic value in it.\n * Users can bypass security by constructing a value with one of the `bypassSecurityTrust...`\n * methods, and then binding to that value from the template.\n *\n * These situations should be very rare, and extraordinary care must be taken to avoid creating a\n * Cross Site Scripting (XSS) security bug!\n *\n * When using `bypassSecurityTrust...`, make sure to call the method as early as possible and as\n * close as possible to the source of the value, to make it easy to verify no security bug is\n * created by its use.\n *\n * It is not required (and not recommended) to bypass security if the value is safe, e.g. a URL that\n * does not start with a suspicious protocol, or an HTML snippet that does not contain dangerous\n * code. The sanitizer leaves safe values intact.\n *\n * @security Calling any of the `bypassSecurityTrust...` APIs disables Angular's built-in\n * sanitization for the value passed in. Carefully check and audit all values and code paths going\n * into this call. Make sure any user data is appropriately escaped for this security context.\n * For more detail, see the [Security Guide](http://g.co/ng/security).\n *\n * @publicApi\n */\nexport abstract class DomSanitizer implements Sanitizer {\n  /**\n   * Sanitizes a value for use in the given SecurityContext.\n   *\n   * If value is trusted for the context, this method will unwrap the contained safe value and use\n   * it directly. Otherwise, value will be sanitized to be safe in the given context, for example\n   * by replacing URLs that have an unsafe protocol part (such as `javascript:`). The implementation\n   * is responsible to make sure that the value can definitely be safely used in the given context.\n   */\n  abstract sanitize(context: SecurityContext, value: SafeValue|string|null): string|null;\n\n  /**\n   * Bypass security and trust the given value to be safe HTML. Only use this when the bound HTML\n   * is unsafe (e.g. contains `<script>` tags) and the code should be executed. The sanitizer will\n   * leave safe HTML intact, so in most situations this method should not be used.\n   *\n   * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n   * security risks!\n   */\n  abstract bypassSecurityTrustHtml(value: string): SafeHtml;\n\n  /**\n   * Bypass security and trust the given value to be safe style value (CSS).\n   *\n   * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n   * security risks!\n   */\n  abstract bypassSecurityTrustStyle(value: string): SafeStyle;\n\n  /**\n   * Bypass security and trust the given value to be safe JavaScript.\n   *\n   * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n   * security risks!\n   */\n  abstract bypassSecurityTrustScript(value: string): SafeScript;\n\n  /**\n   * Bypass security and trust the given value to be a safe style URL, i.e. a value that can be used\n   * in hyperlinks or `<img src>`.\n   *\n   * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n   * security risks!\n   */\n  abstract bypassSecurityTrustUrl(value: string): SafeUrl;\n\n  /**\n   * Bypass security and trust the given value to be a safe resource URL, i.e. a location that may\n   * be used to load executable code from, like `<script src>`, or `<iframe src>`.\n   *\n   * **WARNING:** calling this method with untrusted user data exposes your application to XSS\n   * security risks!\n   */\n  abstract bypassSecurityTrustResourceUrl(value: string): SafeResourceUrl;\n}\n\n\n@Injectable()\nexport class DomSanitizerImpl extends DomSanitizer {\n  constructor(@Inject(DOCUMENT) private _doc: any) { super(); }\n\n  sanitize(ctx: SecurityContext, value: SafeValue|string|null): string|null {\n    if (value == null) return null;\n    switch (ctx) {\n      case SecurityContext.NONE:\n        return value as string;\n      case SecurityContext.HTML:\n        if (value instanceof SafeHtmlImpl) return value.changingThisBreaksApplicationSecurity;\n        this.checkNotSafeValue(value, 'HTML');\n        return _sanitizeHtml(this._doc, String(value));\n      case SecurityContext.STYLE:\n        if (value instanceof SafeStyleImpl) return value.changingThisBreaksApplicationSecurity;\n        this.checkNotSafeValue(value, 'Style');\n        return _sanitizeStyle(value as string);\n      case SecurityContext.SCRIPT:\n        if (value instanceof SafeScriptImpl) return value.changingThisBreaksApplicationSecurity;\n        this.checkNotSafeValue(value, 'Script');\n        throw new Error('unsafe value used in a script context');\n      case SecurityContext.URL:\n        if (value instanceof SafeResourceUrlImpl || value instanceof SafeUrlImpl) {\n          // Allow resource URLs in URL contexts, they are strictly more trusted.\n          return value.changingThisBreaksApplicationSecurity;\n        }\n        this.checkNotSafeValue(value, 'URL');\n        return _sanitizeUrl(String(value));\n      case SecurityContext.RESOURCE_URL:\n        if (value instanceof SafeResourceUrlImpl) {\n          return value.changingThisBreaksApplicationSecurity;\n        }\n        this.checkNotSafeValue(value, 'ResourceURL');\n        throw new Error(\n            'unsafe value used in a resource URL context (see http://g.co/ng/security#xss)');\n      default:\n        throw new Error(`Unexpected SecurityContext ${ctx} (see http://g.co/ng/security#xss)`);\n    }\n  }\n\n  private checkNotSafeValue(value: any, expectedType: string) {\n    if (value instanceof SafeValueImpl) {\n      throw new Error(\n          `Required a safe ${expectedType}, got a ${value.getTypeName()} ` +\n          `(see http://g.co/ng/security#xss)`);\n    }\n  }\n\n  bypassSecurityTrustHtml(value: string): SafeHtml { return new SafeHtmlImpl(value); }\n  bypassSecurityTrustStyle(value: string): SafeStyle { return new SafeStyleImpl(value); }\n  bypassSecurityTrustScript(value: string): SafeScript { return new SafeScriptImpl(value); }\n  bypassSecurityTrustUrl(value: string): SafeUrl { return new SafeUrlImpl(value); }\n  bypassSecurityTrustResourceUrl(value: string): SafeResourceUrl {\n    return new SafeResourceUrlImpl(value);\n  }\n}\n\nabstract class SafeValueImpl implements SafeValue {\n  constructor(public changingThisBreaksApplicationSecurity: string) {\n    // empty\n  }\n\n  abstract getTypeName(): string;\n\n  toString() {\n    return `SafeValue must use [property]=binding: ${this.changingThisBreaksApplicationSecurity}` +\n        ` (see http://g.co/ng/security#xss)`;\n  }\n}\n\nclass SafeHtmlImpl extends SafeValueImpl implements SafeHtml {\n  getTypeName() { return 'HTML'; }\n}\nclass SafeStyleImpl extends SafeValueImpl implements SafeStyle {\n  getTypeName() { return 'Style'; }\n}\nclass SafeScriptImpl extends SafeValueImpl implements SafeScript {\n  getTypeName() { return 'Script'; }\n}\nclass SafeUrlImpl extends SafeValueImpl implements SafeUrl {\n  getTypeName() { return 'URL'; }\n}\nclass SafeResourceUrlImpl extends SafeValueImpl implements SafeResourceUrl {\n  getTypeName() { return 'ResourceURL'; }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, Injectable, NgZone} from '@angular/core';\n\nimport {getDOM} from '../dom_adapter';\nimport {DOCUMENT} from '../dom_tokens';\n\nimport {EventManagerPlugin} from './event_manager';\n\n/**\n * Defines supported modifiers for key events.\n */\nconst MODIFIER_KEYS = ['alt', 'control', 'meta', 'shift'];\n\n/**\n * Retrieves modifiers from key-event objects.\n */\nconst MODIFIER_KEY_GETTERS: {[key: string]: (event: KeyboardEvent) => boolean} = {\n  'alt': (event: KeyboardEvent) => event.altKey,\n  'control': (event: KeyboardEvent) => event.ctrlKey,\n  'meta': (event: KeyboardEvent) => event.metaKey,\n  'shift': (event: KeyboardEvent) => event.shiftKey\n};\n\n/**\n * @publicApi\n * A browser plug-in that provides support for handling of key events in Angular.\n */\n@Injectable()\nexport class KeyEventsPlugin extends EventManagerPlugin {\n  /**\n   * Initializes an instance of the browser plug-in.\n   * @param doc The document in which key events will be detected.\n   */\n  constructor(@Inject(DOCUMENT) doc: any) { super(doc); }\n\n  /**\n    * Reports whether a named key event is supported.\n    * @param eventName The event name to query.\n    * @return True if the named key event is supported.\n   */\n  supports(eventName: string): boolean { return KeyEventsPlugin.parseEventName(eventName) != null; }\n\n  /**\n   * Registers a handler for a specific element and key event.\n   * @param element The HTML element to receive event notifications.\n   * @param eventName The name of the key event to listen for.\n   * @param handler A function to call when the notification occurs. Receives the\n   * event object as an argument.\n   * @returns The key event that was registered.\n  */\n  addEventListener(element: HTMLElement, eventName: string, handler: Function): Function {\n    const parsedEvent = KeyEventsPlugin.parseEventName(eventName) !;\n\n    const outsideHandler =\n        KeyEventsPlugin.eventCallback(parsedEvent['fullKey'], handler, this.manager.getZone());\n\n    return this.manager.getZone().runOutsideAngular(() => {\n      return getDOM().onAndCancel(element, parsedEvent['domEventName'], outsideHandler);\n    });\n  }\n\n  static parseEventName(eventName: string): {[key: string]: string}|null {\n    const parts: string[] = eventName.toLowerCase().split('.');\n\n    const domEventName = parts.shift();\n    if ((parts.length === 0) || !(domEventName === 'keydown' || domEventName === 'keyup')) {\n      return null;\n    }\n\n    const key = KeyEventsPlugin._normalizeKey(parts.pop() !);\n\n    let fullKey = '';\n    MODIFIER_KEYS.forEach(modifierName => {\n      const index: number = parts.indexOf(modifierName);\n      if (index > -1) {\n        parts.splice(index, 1);\n        fullKey += modifierName + '.';\n      }\n    });\n    fullKey += key;\n\n    if (parts.length != 0 || key.length === 0) {\n      // returning null instead of throwing to let another plugin process the event\n      return null;\n    }\n\n    const result: {[k: string]: string} = {};\n    result['domEventName'] = domEventName;\n    result['fullKey'] = fullKey;\n    return result;\n  }\n\n  static getEventFullKey(event: KeyboardEvent): string {\n    let fullKey = '';\n    let key = getDOM().getEventKey(event);\n    key = key.toLowerCase();\n    if (key === ' ') {\n      key = 'space';  // for readability\n    } else if (key === '.') {\n      key = 'dot';  // because '.' is used as a separator in event names\n    }\n    MODIFIER_KEYS.forEach(modifierName => {\n      if (modifierName != key) {\n        const modifierGetter = MODIFIER_KEY_GETTERS[modifierName];\n        if (modifierGetter(event)) {\n          fullKey += modifierName + '.';\n        }\n      }\n    });\n    fullKey += key;\n    return fullKey;\n  }\n\n  /**\n   * Configures a handler callback for a key event.\n   * @param fullKey The event name that combines all simultaneous keystrokes.\n   * @param handler The function that responds to the key event.\n   * @param zone The zone in which the event occurred.\n   * @returns A callback function.\n   */\n  static eventCallback(fullKey: any, handler: Function, zone: NgZone): Function {\n    return (event: any /** TODO #9100 */) => {\n      if (KeyEventsPlugin.getEventFullKey(event) === fullKey) {\n        zone.runGuarded(() => handler(event));\n      }\n    };\n  }\n\n  /** @internal */\n  static _normalizeKey(keyName: string): string {\n    // TODO: switch to a Map if the mapping grows too much\n    switch (keyName) {\n      case 'esc':\n        return 'escape';\n      default:\n        return keyName;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, Injectable, InjectionToken, Optional, ÉµConsole as Console} from '@angular/core';\n\nimport {DOCUMENT} from '../dom_tokens';\n\nimport {EventManagerPlugin} from './event_manager';\n\n/**\n * Supported HammerJS recognizer event names.\n */\nconst EVENT_NAMES = {\n  // pan\n  'pan': true,\n  'panstart': true,\n  'panmove': true,\n  'panend': true,\n  'pancancel': true,\n  'panleft': true,\n  'panright': true,\n  'panup': true,\n  'pandown': true,\n  // pinch\n  'pinch': true,\n  'pinchstart': true,\n  'pinchmove': true,\n  'pinchend': true,\n  'pinchcancel': true,\n  'pinchin': true,\n  'pinchout': true,\n  // press\n  'press': true,\n  'pressup': true,\n  // rotate\n  'rotate': true,\n  'rotatestart': true,\n  'rotatemove': true,\n  'rotateend': true,\n  'rotatecancel': true,\n  // swipe\n  'swipe': true,\n  'swipeleft': true,\n  'swiperight': true,\n  'swipeup': true,\n  'swipedown': true,\n  // tap\n  'tap': true,\n};\n\n/**\n * DI token for providing [HammerJS](http://hammerjs.github.io/) support to Angular.\n * @see `HammerGestureConfig`\n *\n * @publicApi\n */\nexport const HAMMER_GESTURE_CONFIG = new InjectionToken<HammerGestureConfig>('HammerGestureConfig');\n\n\n/**\n * Function that loads HammerJS, returning a promise that is resolved once HammerJs is loaded.\n *\n * @publicApi\n */\nexport type HammerLoader = () => Promise<void>;\n\n/**\n * Injection token used to provide a {@link HammerLoader} to Angular.\n *\n * @publicApi\n */\nexport const HAMMER_LOADER = new InjectionToken<HammerLoader>('HammerLoader');\n\nexport interface HammerInstance {\n  on(eventName: string, callback?: Function): void;\n  off(eventName: string, callback?: Function): void;\n  destroy?(): void;\n}\n\n/**\n * An injectable [HammerJS Manager](http://hammerjs.github.io/api/#hammer.manager)\n * for gesture recognition. Configures specific event recognition.\n * @publicApi\n */\n@Injectable()\nexport class HammerGestureConfig {\n  /**\n   * A set of supported event names for gestures to be used in Angular.\n   * Angular supports all built-in recognizers, as listed in\n   * [HammerJS documentation](http://hammerjs.github.io/).\n   */\n  events: string[] = [];\n\n  /**\n  * Maps gesture event names to a set of configuration options\n  * that specify overrides to the default values for specific properties.\n  *\n  * The key is a supported event name to be configured,\n  * and the options object contains a set of properties, with override values\n  * to be applied to the named recognizer event.\n  * For example, to disable recognition of the rotate event, specify\n  *  `{\"rotate\": {\"enable\": false}}`.\n  *\n  * Properties that are not present take the HammerJS default values.\n  * For information about which properties are supported for which events,\n  * and their allowed and default values, see\n  * [HammerJS documentation](http://hammerjs.github.io/).\n  *\n  */\n  overrides: {[key: string]: Object} = {};\n\n  /**\n   * Properties whose default values can be overridden for a given event.\n   * Different sets of properties apply to different events.\n   * For information about which properties are supported for which events,\n   * and their allowed and default values, see\n   * [HammerJS documentation](http://hammerjs.github.io/).\n   */\n  options?: {\n    cssProps?: any; domEvents?: boolean; enable?: boolean | ((manager: any) => boolean);\n    preset?: any[];\n    touchAction?: string;\n    recognizers?: any[];\n    inputClass?: any;\n    inputTarget?: EventTarget;\n  };\n\n  /**\n   * Creates a [HammerJS Manager](http://hammerjs.github.io/api/#hammer.manager)\n   * and attaches it to a given HTML element.\n   * @param element The element that will recognize gestures.\n   * @returns A HammerJS event-manager object.\n   */\n  buildHammer(element: HTMLElement): HammerInstance {\n    const mc = new Hammer !(element, this.options);\n\n    mc.get('pinch').set({enable: true});\n    mc.get('rotate').set({enable: true});\n\n    for (const eventName in this.overrides) {\n      mc.get(eventName).set(this.overrides[eventName]);\n    }\n\n    return mc;\n  }\n}\n\n@Injectable()\nexport class HammerGesturesPlugin extends EventManagerPlugin {\n  constructor(\n      @Inject(DOCUMENT) doc: any,\n      @Inject(HAMMER_GESTURE_CONFIG) private _config: HammerGestureConfig, private console: Console,\n      @Optional() @Inject(HAMMER_LOADER) private loader?: HammerLoader|null) {\n    super(doc);\n  }\n\n  supports(eventName: string): boolean {\n    if (!EVENT_NAMES.hasOwnProperty(eventName.toLowerCase()) && !this.isCustomEvent(eventName)) {\n      return false;\n    }\n\n    if (!(window as any).Hammer && !this.loader) {\n      this.console.warn(\n          `The \"${eventName}\" event cannot be bound because Hammer.JS is not ` +\n          `loaded and no custom loader has been specified.`);\n      return false;\n    }\n\n    return true;\n  }\n\n  addEventListener(element: HTMLElement, eventName: string, handler: Function): Function {\n    const zone = this.manager.getZone();\n    eventName = eventName.toLowerCase();\n\n    // If Hammer is not present but a loader is specified, we defer adding the event listener\n    // until Hammer is loaded.\n    if (!(window as any).Hammer && this.loader) {\n      // This `addEventListener` method returns a function to remove the added listener.\n      // Until Hammer is loaded, the returned function needs to *cancel* the registration rather\n      // than remove anything.\n      let cancelRegistration = false;\n      let deregister: Function = () => { cancelRegistration = true; };\n\n      this.loader()\n          .then(() => {\n            // If Hammer isn't actually loaded when the custom loader resolves, give up.\n            if (!(window as any).Hammer) {\n              this.console.warn(\n                  `The custom HAMMER_LOADER completed, but Hammer.JS is not present.`);\n              deregister = () => {};\n              return;\n            }\n\n            if (!cancelRegistration) {\n              // Now that Hammer is loaded and the listener is being loaded for real,\n              // the deregistration function changes from canceling registration to removal.\n              deregister = this.addEventListener(element, eventName, handler);\n            }\n          })\n          .catch(() => {\n            this.console.warn(\n                `The \"${eventName}\" event cannot be bound because the custom ` +\n                `Hammer.JS loader failed.`);\n            deregister = () => {};\n          });\n\n      // Return a function that *executes* `deregister` (and not `deregister` itself) so that we\n      // can change the behavior of `deregister` once the listener is added. Using a closure in\n      // this way allows us to avoid any additional data structures to track listener removal.\n      return () => { deregister(); };\n    }\n\n    return zone.runOutsideAngular(() => {\n      // Creating the manager bind events, must be done outside of angular\n      const mc = this._config.buildHammer(element);\n      const callback = function(eventObj: HammerInput) {\n        zone.runGuarded(function() { handler(eventObj); });\n      };\n      mc.on(eventName, callback);\n      return () => {\n        mc.off(eventName, callback);\n        // destroy mc to prevent memory leak\n        if (typeof mc.destroy === 'function') {\n          mc.destroy();\n        }\n      };\n    });\n  }\n\n  isCustomEvent(eventName: string): boolean { return this._config.events.indexOf(eventName) > -1; }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {isPlatformServer} from '@angular/common';\nimport {Inject, Injectable, NgZone, Optional, PLATFORM_ID} from '@angular/core';\n\n\nimport {DOCUMENT} from '../dom_tokens';\n\nimport {EventManagerPlugin} from './event_manager';\n\n/**\n * Detect if Zone is present. If it is then use simple zone aware 'addEventListener'\n * since Angular can do much more\n * efficient bookkeeping than Zone can, because we have additional information. This speeds up\n * addEventListener by 3x.\n */\nconst __symbol__ =\n    (typeof Zone !== 'undefined') && (Zone as any)['__symbol__'] || function(v: string): string {\n      return '__zone_symbol__' + v;\n    };\nconst ADD_EVENT_LISTENER: 'addEventListener' = __symbol__('addEventListener');\nconst REMOVE_EVENT_LISTENER: 'removeEventListener' = __symbol__('removeEventListener');\n\nconst symbolNames: {[key: string]: string} = {};\n\nconst FALSE = 'FALSE';\nconst ANGULAR = 'ANGULAR';\nconst NATIVE_ADD_LISTENER = 'addEventListener';\nconst NATIVE_REMOVE_LISTENER = 'removeEventListener';\n\n// use the same symbol string which is used in zone.js\nconst stopSymbol = '__zone_symbol__propagationStopped';\nconst stopMethodSymbol = '__zone_symbol__stopImmediatePropagation';\n\nconst blackListedEvents: string[] =\n    (typeof Zone !== 'undefined') && (Zone as any)[__symbol__('BLACK_LISTED_EVENTS')];\nlet blackListedMap: {[eventName: string]: string};\nif (blackListedEvents) {\n  blackListedMap = {};\n  blackListedEvents.forEach(eventName => { blackListedMap[eventName] = eventName; });\n}\n\nconst isBlackListedEvent = function(eventName: string) {\n  if (!blackListedMap) {\n    return false;\n  }\n  return blackListedMap.hasOwnProperty(eventName);\n};\n\ninterface TaskData {\n  zone: any;\n  handler: Function;\n}\n\n// a global listener to handle all dom event,\n// so we do not need to create a closure every time\nconst globalListener = function(event: Event) {\n  const symbolName = symbolNames[event.type];\n  if (!symbolName) {\n    return;\n  }\n  const taskDatas: TaskData[] = this[symbolName];\n  if (!taskDatas) {\n    return;\n  }\n  const args: any = [event];\n  if (taskDatas.length === 1) {\n    // if taskDatas only have one element, just invoke it\n    const taskData = taskDatas[0];\n    if (taskData.zone !== Zone.current) {\n      // only use Zone.run when Zone.current not equals to stored zone\n      return taskData.zone.run(taskData.handler, this, args);\n    } else {\n      return taskData.handler.apply(this, args);\n    }\n  } else {\n    // copy tasks as a snapshot to avoid event handlers remove\n    // itself or others\n    const copiedTasks = taskDatas.slice();\n    for (let i = 0; i < copiedTasks.length; i++) {\n      // if other listener call event.stopImmediatePropagation\n      // just break\n      if ((event as any)[stopSymbol] === true) {\n        break;\n      }\n      const taskData = copiedTasks[i];\n      if (taskData.zone !== Zone.current) {\n        // only use Zone.run when Zone.current not equals to stored zone\n        taskData.zone.run(taskData.handler, this, args);\n      } else {\n        taskData.handler.apply(this, args);\n      }\n    }\n  }\n};\n\n@Injectable()\nexport class DomEventsPlugin extends EventManagerPlugin {\n  constructor(\n      @Inject(DOCUMENT) doc: any, private ngZone: NgZone,\n      @Optional() @Inject(PLATFORM_ID) platformId: {}|null) {\n    super(doc);\n\n    if (!platformId || !isPlatformServer(platformId)) {\n      this.patchEvent();\n    }\n  }\n\n  private patchEvent() {\n    if (typeof Event === 'undefined' || !Event || !Event.prototype) {\n      return;\n    }\n    if ((Event.prototype as any)[stopMethodSymbol]) {\n      // already patched by zone.js\n      return;\n    }\n    const delegate = (Event.prototype as any)[stopMethodSymbol] =\n        Event.prototype.stopImmediatePropagation;\n    Event.prototype.stopImmediatePropagation = function() {\n      if (this) {\n        this[stopSymbol] = true;\n      }\n\n      // should call native delegate in case\n      // in some environment part of the application\n      // will not use the patched Event\n      delegate && delegate.apply(this, arguments);\n    };\n  }\n\n  // This plugin should come last in the list of plugins, because it accepts all\n  // events.\n  supports(eventName: string): boolean { return true; }\n\n  addEventListener(element: HTMLElement, eventName: string, handler: Function): Function {\n    /**\n     * This code is about to add a listener to the DOM. If Zone.js is present, than\n     * `addEventListener` has been patched. The patched code adds overhead in both\n     * memory and speed (3x slower) than native. For this reason if we detect that\n     * Zone.js is present we use a simple version of zone aware addEventListener instead.\n     * The result is faster registration and the zone will be restored.\n     * But ZoneSpec.onScheduleTask, ZoneSpec.onInvokeTask, ZoneSpec.onCancelTask\n     * will not be invoked\n     * We also do manual zone restoration in element.ts renderEventHandlerClosure method.\n     *\n     * NOTE: it is possible that the element is from different iframe, and so we\n     * have to check before we execute the method.\n     */\n    const self = this;\n    const zoneJsLoaded = element[ADD_EVENT_LISTENER];\n    let callback: EventListener = handler as EventListener;\n    // if zonejs is loaded and current zone is not ngZone\n    // we keep Zone.current on target for later restoration.\n    if (zoneJsLoaded && (!NgZone.isInAngularZone() || isBlackListedEvent(eventName))) {\n      let symbolName = symbolNames[eventName];\n      if (!symbolName) {\n        symbolName = symbolNames[eventName] = __symbol__(ANGULAR + eventName + FALSE);\n      }\n      let taskDatas: TaskData[] = (element as any)[symbolName];\n      const globalListenerRegistered = taskDatas && taskDatas.length > 0;\n      if (!taskDatas) {\n        taskDatas = (element as any)[symbolName] = [];\n      }\n\n      const zone = isBlackListedEvent(eventName) ? Zone.root : Zone.current;\n      if (taskDatas.length === 0) {\n        taskDatas.push({zone: zone, handler: callback});\n      } else {\n        let callbackRegistered = false;\n        for (let i = 0; i < taskDatas.length; i++) {\n          if (taskDatas[i].handler === callback) {\n            callbackRegistered = true;\n            break;\n          }\n        }\n        if (!callbackRegistered) {\n          taskDatas.push({zone: zone, handler: callback});\n        }\n      }\n\n      if (!globalListenerRegistered) {\n        element[ADD_EVENT_LISTENER](eventName, globalListener, false);\n      }\n    } else {\n      element[NATIVE_ADD_LISTENER](eventName, callback, false);\n    }\n    return () => this.removeEventListener(element, eventName, callback);\n  }\n\n  removeEventListener(target: any, eventName: string, callback: Function): void {\n    let underlyingRemove = target[REMOVE_EVENT_LISTENER];\n    // zone.js not loaded, use native removeEventListener\n    if (!underlyingRemove) {\n      return target[NATIVE_REMOVE_LISTENER].apply(target, [eventName, callback, false]);\n    }\n    let symbolName = symbolNames[eventName];\n    let taskDatas: TaskData[] = symbolName && target[symbolName];\n    if (!taskDatas) {\n      // addEventListener not using patched version\n      // just call native removeEventListener\n      return target[NATIVE_REMOVE_LISTENER].apply(target, [eventName, callback, false]);\n    }\n    // fix issue 20532, should be able to remove\n    // listener which was added inside of ngZone\n    let found = false;\n    for (let i = 0; i < taskDatas.length; i++) {\n      // remove listener from taskDatas if the callback equals\n      if (taskDatas[i].handler === callback) {\n        found = true;\n        taskDatas.splice(i, 1);\n        break;\n      }\n    }\n    if (found) {\n      if (taskDatas.length === 0) {\n        // all listeners are removed, we can remove the globalListener from target\n        underlyingRemove.apply(target, [eventName, globalListener, false]);\n      }\n    } else {\n      // not found in taskDatas, the callback may be added inside of ngZone\n      // use native remove listener to remove the callback\n      target[NATIVE_REMOVE_LISTENER].apply(target, [eventName, callback, false]);\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Renderer2, RendererFactory2, RendererStyleFlags2, RendererType2, ViewEncapsulation} from '@angular/core';\n\nimport {EventManager} from './events/event_manager';\nimport {DomSharedStylesHost} from './shared_styles_host';\n\nexport const NAMESPACE_URIS: {[ns: string]: string} = {\n  'svg': 'http://www.w3.org/2000/svg',\n  'xhtml': 'http://www.w3.org/1999/xhtml',\n  'xlink': 'http://www.w3.org/1999/xlink',\n  'xml': 'http://www.w3.org/XML/1998/namespace',\n  'xmlns': 'http://www.w3.org/2000/xmlns/',\n};\n\nconst COMPONENT_REGEX = /%COMP%/g;\nexport const COMPONENT_VARIABLE = '%COMP%';\nexport const HOST_ATTR = `_nghost-${COMPONENT_VARIABLE}`;\nexport const CONTENT_ATTR = `_ngcontent-${COMPONENT_VARIABLE}`;\n\nexport function shimContentAttribute(componentShortId: string): string {\n  return CONTENT_ATTR.replace(COMPONENT_REGEX, componentShortId);\n}\n\nexport function shimHostAttribute(componentShortId: string): string {\n  return HOST_ATTR.replace(COMPONENT_REGEX, componentShortId);\n}\n\nexport function flattenStyles(\n    compId: string, styles: Array<any|any[]>, target: string[]): string[] {\n  for (let i = 0; i < styles.length; i++) {\n    let style = styles[i];\n\n    if (Array.isArray(style)) {\n      flattenStyles(compId, style, target);\n    } else {\n      style = style.replace(COMPONENT_REGEX, compId);\n      target.push(style);\n    }\n  }\n  return target;\n}\n\nfunction decoratePreventDefault(eventHandler: Function): Function {\n  return (event: any) => {\n    const allowDefaultBehavior = eventHandler(event);\n    if (allowDefaultBehavior === false) {\n      // TODO(tbosch): move preventDefault into event plugins...\n      event.preventDefault();\n      event.returnValue = false;\n    }\n  };\n}\n\n@Injectable()\nexport class DomRendererFactory2 implements RendererFactory2 {\n  private rendererByCompId = new Map<string, Renderer2>();\n  private defaultRenderer: Renderer2;\n\n  constructor(private eventManager: EventManager, private sharedStylesHost: DomSharedStylesHost) {\n    this.defaultRenderer = new DefaultDomRenderer2(eventManager);\n  }\n\n  createRenderer(element: any, type: RendererType2|null): Renderer2 {\n    if (!element || !type) {\n      return this.defaultRenderer;\n    }\n    switch (type.encapsulation) {\n      case ViewEncapsulation.Emulated: {\n        let renderer = this.rendererByCompId.get(type.id);\n        if (!renderer) {\n          renderer =\n              new EmulatedEncapsulationDomRenderer2(this.eventManager, this.sharedStylesHost, type);\n          this.rendererByCompId.set(type.id, renderer);\n        }\n        (<EmulatedEncapsulationDomRenderer2>renderer).applyToHost(element);\n        return renderer;\n      }\n      case ViewEncapsulation.Native:\n      case ViewEncapsulation.ShadowDom:\n        return new ShadowDomRenderer(this.eventManager, this.sharedStylesHost, element, type);\n      default: {\n        if (!this.rendererByCompId.has(type.id)) {\n          const styles = flattenStyles(type.id, type.styles, []);\n          this.sharedStylesHost.addStyles(styles);\n          this.rendererByCompId.set(type.id, this.defaultRenderer);\n        }\n        return this.defaultRenderer;\n      }\n    }\n  }\n\n  begin() {}\n  end() {}\n}\n\nclass DefaultDomRenderer2 implements Renderer2 {\n  data: {[key: string]: any} = Object.create(null);\n\n  constructor(private eventManager: EventManager) {}\n\n  destroy(): void {}\n\n  destroyNode: null;\n\n  createElement(name: string, namespace?: string): any {\n    if (namespace) {\n      return document.createElementNS(NAMESPACE_URIS[namespace], name);\n    }\n\n    return document.createElement(name);\n  }\n\n  createComment(value: string): any { return document.createComment(value); }\n\n  createText(value: string): any { return document.createTextNode(value); }\n\n  appendChild(parent: any, newChild: any): void { parent.appendChild(newChild); }\n\n  insertBefore(parent: any, newChild: any, refChild: any): void {\n    if (parent) {\n      parent.insertBefore(newChild, refChild);\n    }\n  }\n\n  removeChild(parent: any, oldChild: any): void {\n    if (parent) {\n      parent.removeChild(oldChild);\n    }\n  }\n\n  selectRootElement(selectorOrNode: string|any, preserveContent?: boolean): any {\n    let el: any = typeof selectorOrNode === 'string' ? document.querySelector(selectorOrNode) :\n                                                       selectorOrNode;\n    if (!el) {\n      throw new Error(`The selector \"${selectorOrNode}\" did not match any elements`);\n    }\n    if (!preserveContent) {\n      el.textContent = '';\n    }\n    return el;\n  }\n\n  parentNode(node: any): any { return node.parentNode; }\n\n  nextSibling(node: any): any { return node.nextSibling; }\n\n  setAttribute(el: any, name: string, value: string, namespace?: string): void {\n    if (namespace) {\n      name = `${namespace}:${name}`;\n      const namespaceUri = NAMESPACE_URIS[namespace];\n      if (namespaceUri) {\n        el.setAttributeNS(namespaceUri, name, value);\n      } else {\n        el.setAttribute(name, value);\n      }\n    } else {\n      el.setAttribute(name, value);\n    }\n  }\n\n  removeAttribute(el: any, name: string, namespace?: string): void {\n    if (namespace) {\n      const namespaceUri = NAMESPACE_URIS[namespace];\n      if (namespaceUri) {\n        el.removeAttributeNS(namespaceUri, name);\n      } else {\n        el.removeAttribute(`${namespace}:${name}`);\n      }\n    } else {\n      el.removeAttribute(name);\n    }\n  }\n\n  addClass(el: any, name: string): void { el.classList.add(name); }\n\n  removeClass(el: any, name: string): void { el.classList.remove(name); }\n\n  setStyle(el: any, style: string, value: any, flags: RendererStyleFlags2): void {\n    if (flags & RendererStyleFlags2.DashCase) {\n      el.style.setProperty(\n          style, value, !!(flags & RendererStyleFlags2.Important) ? 'important' : '');\n    } else {\n      el.style[style] = value;\n    }\n  }\n\n  removeStyle(el: any, style: string, flags: RendererStyleFlags2): void {\n    if (flags & RendererStyleFlags2.DashCase) {\n      el.style.removeProperty(style);\n    } else {\n      // IE requires '' instead of null\n      // see https://github.com/angular/angular/issues/7916\n      el.style[style] = '';\n    }\n  }\n\n  setProperty(el: any, name: string, value: any): void {\n    checkNoSyntheticProp(name, 'property');\n    el[name] = value;\n  }\n\n  setValue(node: any, value: string): void { node.nodeValue = value; }\n\n  listen(target: 'window'|'document'|'body'|any, event: string, callback: (event: any) => boolean):\n      () => void {\n    checkNoSyntheticProp(event, 'listener');\n    if (typeof target === 'string') {\n      return <() => void>this.eventManager.addGlobalEventListener(\n          target, event, decoratePreventDefault(callback));\n    }\n    return <() => void>this.eventManager.addEventListener(\n               target, event, decoratePreventDefault(callback)) as() => void;\n  }\n}\n\nconst AT_CHARCODE = '@'.charCodeAt(0);\nfunction checkNoSyntheticProp(name: string, nameKind: string) {\n  if (name.charCodeAt(0) === AT_CHARCODE) {\n    throw new Error(\n        `Found the synthetic ${nameKind} ${name}. Please include either \"BrowserAnimationsModule\" or \"NoopAnimationsModule\" in your application.`);\n  }\n}\n\nclass EmulatedEncapsulationDomRenderer2 extends DefaultDomRenderer2 {\n  private contentAttr: string;\n  private hostAttr: string;\n\n  constructor(\n      eventManager: EventManager, sharedStylesHost: DomSharedStylesHost,\n      private component: RendererType2) {\n    super(eventManager);\n    const styles = flattenStyles(component.id, component.styles, []);\n    sharedStylesHost.addStyles(styles);\n\n    this.contentAttr = shimContentAttribute(component.id);\n    this.hostAttr = shimHostAttribute(component.id);\n  }\n\n  applyToHost(element: any) { super.setAttribute(element, this.hostAttr, ''); }\n\n  createElement(parent: any, name: string): Element {\n    const el = super.createElement(parent, name);\n    super.setAttribute(el, this.contentAttr, '');\n    return el;\n  }\n}\n\nclass ShadowDomRenderer extends DefaultDomRenderer2 {\n  private shadowRoot: any;\n\n  constructor(\n      eventManager: EventManager, private sharedStylesHost: DomSharedStylesHost,\n      private hostEl: any, private component: RendererType2) {\n    super(eventManager);\n    if (component.encapsulation === ViewEncapsulation.ShadowDom) {\n      this.shadowRoot = (hostEl as any).attachShadow({mode: 'open'});\n    } else {\n      this.shadowRoot = (hostEl as any).createShadowRoot();\n    }\n    this.sharedStylesHost.addHost(this.shadowRoot);\n    const styles = flattenStyles(component.id, component.styles, []);\n    for (let i = 0; i < styles.length; i++) {\n      const styleEl = document.createElement('style');\n      styleEl.textContent = styles[i];\n      this.shadowRoot.appendChild(styleEl);\n    }\n  }\n\n  private nodeOrShadowRoot(node: any): any { return node === this.hostEl ? this.shadowRoot : node; }\n\n  destroy() { this.sharedStylesHost.removeHost(this.shadowRoot); }\n\n  appendChild(parent: any, newChild: any): void {\n    return super.appendChild(this.nodeOrShadowRoot(parent), newChild);\n  }\n  insertBefore(parent: any, newChild: any, refChild: any): void {\n    return super.insertBefore(this.nodeOrShadowRoot(parent), newChild, refChild);\n  }\n  removeChild(parent: any, oldChild: any): void {\n    return super.removeChild(this.nodeOrShadowRoot(parent), oldChild);\n  }\n  parentNode(node: any): any {\n    return this.nodeOrShadowRoot(super.parentNode(this.nodeOrShadowRoot(node)));\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, Injectable, OnDestroy} from '@angular/core';\nimport {getDOM} from './dom_adapter';\nimport {DOCUMENT} from './dom_tokens';\n\n@Injectable()\nexport class SharedStylesHost {\n  /** @internal */\n  protected _stylesSet = new Set<string>();\n\n  addStyles(styles: string[]): void {\n    const additions = new Set<string>();\n    styles.forEach(style => {\n      if (!this._stylesSet.has(style)) {\n        this._stylesSet.add(style);\n        additions.add(style);\n      }\n    });\n    this.onStylesAdded(additions);\n  }\n\n  onStylesAdded(additions: Set<string>): void {}\n\n  getAllStyles(): string[] { return Array.from(this._stylesSet); }\n}\n\n@Injectable()\nexport class DomSharedStylesHost extends SharedStylesHost implements OnDestroy {\n  private _hostNodes = new Set<Node>();\n  private _styleNodes = new Set<Node>();\n  constructor(@Inject(DOCUMENT) private _doc: any) {\n    super();\n    this._hostNodes.add(_doc.head);\n  }\n\n  private _addStylesToHost(styles: Set<string>, host: Node): void {\n    styles.forEach((style: string) => {\n      const styleEl = this._doc.createElement('style');\n      styleEl.textContent = style;\n      this._styleNodes.add(host.appendChild(styleEl));\n    });\n  }\n\n  addHost(hostNode: Node): void {\n    this._addStylesToHost(this._stylesSet, hostNode);\n    this._hostNodes.add(hostNode);\n  }\n\n  removeHost(hostNode: Node): void { this._hostNodes.delete(hostNode); }\n\n  onStylesAdded(additions: Set<string>): void {\n    this._hostNodes.forEach(hostNode => this._addStylesToHost(additions, hostNode));\n  }\n\n  ngOnDestroy(): void { this._styleNodes.forEach(styleNode => getDOM().remove(styleNode)); }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Inject, Injectable, InjectionToken, NgZone} from '@angular/core';\n\nimport {getDOM} from '../dom_adapter';\n\n/**\n * The injection token for the event-manager plug-in service.\n *\n * @publicApi\n */\nexport const EVENT_MANAGER_PLUGINS =\n    new InjectionToken<EventManagerPlugin[]>('EventManagerPlugins');\n\n/**\n * An injectable service that provides event management for Angular\n * through a browser plug-in.\n *\n * @publicApi\n */\n@Injectable()\nexport class EventManager {\n  private _plugins: EventManagerPlugin[];\n  private _eventNameToPlugin = new Map<string, EventManagerPlugin>();\n\n  /**\n   * Initializes an instance of the event-manager service.\n   */\n  constructor(@Inject(EVENT_MANAGER_PLUGINS) plugins: EventManagerPlugin[], private _zone: NgZone) {\n    plugins.forEach(p => p.manager = this);\n    this._plugins = plugins.slice().reverse();\n  }\n\n  /**\n   * Registers a handler for a specific element and event.\n   *\n   * @param element The HTML element to receive event notifications.\n   * @param eventName The name of the event to listen for.\n   * @param handler A function to call when the notification occurs. Receives the\n   * event object as an argument.\n   * @returns  A callback function that can be used to remove the handler.\n   */\n  addEventListener(element: HTMLElement, eventName: string, handler: Function): Function {\n    const plugin = this._findPluginFor(eventName);\n    return plugin.addEventListener(element, eventName, handler);\n  }\n\n  /**\n   * Registers a global handler for an event in a target view.\n   *\n   * @param target A target for global event notifications. One of \"window\", \"document\", or \"body\".\n   * @param eventName The name of the event to listen for.\n   * @param handler A function to call when the notification occurs. Receives the\n   * event object as an argument.\n   * @returns A callback function that can be used to remove the handler.\n   */\n  addGlobalEventListener(target: string, eventName: string, handler: Function): Function {\n    const plugin = this._findPluginFor(eventName);\n    return plugin.addGlobalEventListener(target, eventName, handler);\n  }\n\n  /**\n   * Retrieves the compilation zone in which event listeners are registered.\n   */\n  getZone(): NgZone { return this._zone; }\n\n  /** @internal */\n  _findPluginFor(eventName: string): EventManagerPlugin {\n    const plugin = this._eventNameToPlugin.get(eventName);\n    if (plugin) {\n      return plugin;\n    }\n\n    const plugins = this._plugins;\n    for (let i = 0; i < plugins.length; i++) {\n      const plugin = plugins[i];\n      if (plugin.supports(eventName)) {\n        this._eventNameToPlugin.set(eventName, plugin);\n        return plugin;\n      }\n    }\n    throw new Error(`No event manager plugin found for event ${eventName}`);\n  }\n}\n\nexport abstract class EventManagerPlugin {\n  constructor(private _doc: any) {}\n\n  // TODO(issue/24571): remove '!'.\n  manager !: EventManager;\n\n  abstract supports(eventName: string): boolean;\n\n  abstract addEventListener(element: HTMLElement, eventName: string, handler: Function): Function;\n\n  addGlobalEventListener(element: string, eventName: string, handler: Function): Function {\n    const target: HTMLElement = getDOM().getGlobalEventTarget(this._doc, element);\n    if (!target) {\n      throw new Error(`Unsupported event target ${target} for event ${eventName}`);\n    }\n    return this.addEventListener(target, eventName, handler);\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport * as core from '@angular/core';\nimport {exportNgVar} from '../util';\n\nconst CORE_TOKENS = {\n  'ApplicationRef': core.ApplicationRef,\n  'NgZone': core.NgZone,\n};\n\nconst INSPECT_GLOBAL_NAME = 'probe';\nconst CORE_TOKENS_GLOBAL_NAME = 'coreTokens';\n\n/**\n * Returns a {@link DebugElement} for the given native DOM element, or\n * null if the given native element does not have an Angular view associated\n * with it.\n */\nexport function inspectNativeElement(element: any): core.DebugNode|null {\n  return core.getDebugNode(element);\n}\n\nexport function _createNgProbe(coreTokens: core.NgProbeToken[]): any {\n  exportNgVar(INSPECT_GLOBAL_NAME, inspectNativeElement);\n  exportNgVar(CORE_TOKENS_GLOBAL_NAME, {...CORE_TOKENS, ..._ngProbeTokensToMap(coreTokens || [])});\n  return () => inspectNativeElement;\n}\n\nfunction _ngProbeTokensToMap(tokens: core.NgProbeToken[]): {[name: string]: any} {\n  return tokens.reduce((prev: any, t: any) => (prev[t.name] = t.token, prev), {});\n}\n\n/**\n * Providers which support debugging Angular applications (e.g. via `ng.probe`).\n */\nexport const ELEMENT_PROBE_PROVIDERS: core.Provider[] = [\n  {\n    provide: core.APP_INITIALIZER,\n    useFactory: _createNgProbe,\n    deps: [\n      [core.NgProbeToken, new core.Optional()],\n    ],\n    multi: true,\n  },\n];\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Éµglobal as global} from '@angular/core';\n\nconst CAMEL_CASE_REGEXP = /([A-Z])/g;\nconst DASH_CASE_REGEXP = /-([a-z])/g;\n\n\nexport function camelCaseToDashCase(input: string): string {\n  return input.replace(CAMEL_CASE_REGEXP, (...m: string[]) => '-' + m[1].toLowerCase());\n}\n\nexport function dashCaseToCamelCase(input: string): string {\n  return input.replace(DASH_CASE_REGEXP, (...m: string[]) => m[1].toUpperCase());\n}\n\n/**\n * Exports the value under a given `name` in the global property `ng`. For example `ng.probe` if\n * `name` is `'probe'`.\n * @param name Name under which it will be exported. Keep in mind this will be a property of the\n * global `ng` object.\n * @param value The value to export.\n */\nexport function exportNgVar(name: string, value: any): void {\n  if (typeof COMPILED === 'undefined' || !COMPILED) {\n    // Note: we can't export `ng` when using closure enhanced optimization as:\n    // - closure declares globals itself for minified names, which sometimes clobber our `ng` global\n    // - we can't declare a closure extern as the namespace `ng` is already used within Google\n    //   for typings for angularJS (via `goog.provide('ng....')`).\n    const ng = global['ng'] = (global['ng'] as{[key: string]: any} | undefined) || {};\n    ng[name] = value;\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {GetTestability, Testability, TestabilityRegistry, setTestabilityGetter, Éµglobal as global} from '@angular/core';\n\nimport {getDOM} from '../dom/dom_adapter';\n\nexport class BrowserGetTestability implements GetTestability {\n  static init() { setTestabilityGetter(new BrowserGetTestability()); }\n\n  addToWindow(registry: TestabilityRegistry): void {\n    global['getAngularTestability'] = (elem: any, findInAncestors: boolean = true) => {\n      const testability = registry.findTestabilityInTree(elem, findInAncestors);\n      if (testability == null) {\n        throw new Error('Could not find testability for element.');\n      }\n      return testability;\n    };\n\n    global['getAllAngularTestabilities'] = () => registry.getAllTestabilities();\n\n    global['getAllAngularRootElements'] = () => registry.getAllRootElements();\n\n    const whenAllStable = (callback: any /** TODO #9100 */) => {\n      const testabilities = global['getAllAngularTestabilities']();\n      let count = testabilities.length;\n      let didWork = false;\n      const decrement = function(didWork_: any /** TODO #9100 */) {\n        didWork = didWork || didWork_;\n        count--;\n        if (count == 0) {\n          callback(didWork);\n        }\n      };\n      testabilities.forEach(function(testability: any /** TODO #9100 */) {\n        testability.whenStable(decrement);\n      });\n    };\n\n    if (!global['frameworkStabilizers']) {\n      global['frameworkStabilizers'] = [];\n    }\n    global['frameworkStabilizers'].push(whenAllStable);\n  }\n\n  findTestabilityInTree(registry: TestabilityRegistry, elem: any, findInAncestors: boolean):\n      Testability|null {\n    if (elem == null) {\n      return null;\n    }\n    const t = registry.getTestability(elem);\n    if (t != null) {\n      return t;\n    } else if (!findInAncestors) {\n      return null;\n    }\n    if (getDOM().isShadowRoot(elem)) {\n      return this.findTestabilityInTree(registry, getDOM().getHost(elem), true);\n    }\n    return this.findTestabilityInTree(registry, getDOM().parentElement(elem), true);\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {APP_INITIALIZER, ApplicationInitStatus, Inject, InjectionToken, Injector, StaticProvider} from '@angular/core';\n\nimport {getDOM} from '../dom/dom_adapter';\nimport {DOCUMENT} from '../dom/dom_tokens';\n\n/**\n * An id that identifies a particular application being bootstrapped, that should\n * match across the client/server boundary.\n */\nexport const TRANSITION_ID = new InjectionToken('TRANSITION_ID');\n\nexport function appInitializerFactory(transitionId: string, document: any, injector: Injector) {\n  return () => {\n    // Wait for all application initializers to be completed before removing the styles set by\n    // the server.\n    injector.get(ApplicationInitStatus).donePromise.then(() => {\n      const dom = getDOM();\n      const styles: any[] =\n          Array.prototype.slice.apply(dom.querySelectorAll(document, `style[ng-transition]`));\n      styles.filter(el => dom.getAttribute(el, 'ng-transition') === transitionId)\n          .forEach(el => dom.remove(el));\n    });\n  };\n}\n\nexport const SERVER_TRANSITION_PROVIDERS: StaticProvider[] = [\n  {\n    provide: APP_INITIALIZER,\n    useFactory: appInitializerFactory,\n    deps: [TRANSITION_ID, DOCUMENT, Injector],\n    multi: true\n  },\n];\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {LocationChangeListener, PlatformLocation} from '@angular/common';\nimport {Inject, Injectable} from '@angular/core';\n\nimport {getDOM} from '../../dom/dom_adapter';\nimport {DOCUMENT} from '../../dom/dom_tokens';\n\nimport {supportsState} from './history';\n\n\n\n/**\n * `PlatformLocation` encapsulates all of the direct calls to platform APIs.\n * This class should not be used directly by an application developer. Instead, use\n * {@link Location}.\n */\n@Injectable()\nexport class BrowserPlatformLocation extends PlatformLocation {\n  // TODO(issue/24571): remove '!'.\n  public readonly location !: Location;\n  // TODO(issue/24571): remove '!'.\n  private _history !: History;\n\n  constructor(@Inject(DOCUMENT) private _doc: any) {\n    super();\n    this._init();\n  }\n\n  // This is moved to its own method so that `MockPlatformLocationStrategy` can overwrite it\n  /** @internal */\n  _init() {\n    (this as{location: Location}).location = getDOM().getLocation();\n    this._history = getDOM().getHistory();\n  }\n\n  getBaseHrefFromDOM(): string { return getDOM().getBaseHref(this._doc) !; }\n\n  onPopState(fn: LocationChangeListener): void {\n    getDOM().getGlobalEventTarget(this._doc, 'window').addEventListener('popstate', fn, false);\n  }\n\n  onHashChange(fn: LocationChangeListener): void {\n    getDOM().getGlobalEventTarget(this._doc, 'window').addEventListener('hashchange', fn, false);\n  }\n\n  get pathname(): string { return this.location.pathname; }\n  get search(): string { return this.location.search; }\n  get hash(): string { return this.location.hash; }\n  set pathname(newPath: string) { this.location.pathname = newPath; }\n\n  pushState(state: any, title: string, url: string): void {\n    if (supportsState()) {\n      this._history.pushState(state, title, url);\n    } else {\n      this.location.hash = url;\n    }\n  }\n\n  replaceState(state: any, title: string, url: string): void {\n    if (supportsState()) {\n      this._history.replaceState(state, title, url);\n    } else {\n      this.location.hash = url;\n    }\n  }\n\n  forward(): void { this._history.forward(); }\n\n  back(): void { this._history.back(); }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nexport function supportsState(): boolean {\n  return !!window.history.pushState;\n}","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT as commonDOCUMENT} from '@angular/common';\nimport {InjectionToken} from '@angular/core';\n\n\n/**\n * A DI Token representing the main rendering context. In a browser this is the DOM Document.\n *\n * Note: Document might not be available in the Application Context when Application and Rendering\n * Contexts are not the same (e.g. when running the application into a Web Worker).\n *\n * @deprecated import from `@angular/common` instead.\n * @publicApi\n */\nexport const DOCUMENT = commonDOCUMENT;\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {ÉµparseCookieValue as parseCookieValue} from '@angular/common';\nimport {Éµglobal as global} from '@angular/core';\n\nimport {setRootDomAdapter} from '../dom/dom_adapter';\n\nimport {GenericBrowserDomAdapter} from './generic_browser_adapter';\n\nconst _attrToPropMap = {\n  'class': 'className',\n  'innerHtml': 'innerHTML',\n  'readonly': 'readOnly',\n  'tabindex': 'tabIndex',\n};\n\nconst DOM_KEY_LOCATION_NUMPAD = 3;\n\n// Map to convert some key or keyIdentifier values to what will be returned by getEventKey\nconst _keyMap: {[k: string]: string} = {\n  // The following values are here for cross-browser compatibility and to match the W3C standard\n  // cf http://www.w3.org/TR/DOM-Level-3-Events-key/\n  '\\b': 'Backspace',\n  '\\t': 'Tab',\n  '\\x7F': 'Delete',\n  '\\x1B': 'Escape',\n  'Del': 'Delete',\n  'Esc': 'Escape',\n  'Left': 'ArrowLeft',\n  'Right': 'ArrowRight',\n  'Up': 'ArrowUp',\n  'Down': 'ArrowDown',\n  'Menu': 'ContextMenu',\n  'Scroll': 'ScrollLock',\n  'Win': 'OS'\n};\n\n// There is a bug in Chrome for numeric keypad keys:\n// https://code.google.com/p/chromium/issues/detail?id=155654\n// 1, 2, 3 ... are reported as A, B, C ...\nconst _chromeNumKeyPadMap = {\n  'A': '1',\n  'B': '2',\n  'C': '3',\n  'D': '4',\n  'E': '5',\n  'F': '6',\n  'G': '7',\n  'H': '8',\n  'I': '9',\n  'J': '*',\n  'K': '+',\n  'M': '-',\n  'N': '.',\n  'O': '/',\n  '\\x60': '0',\n  '\\x90': 'NumLock'\n};\n\nlet nodeContains: (a: any, b: any) => boolean;\n\nif (global['Node']) {\n  nodeContains = global['Node'].prototype.contains || function(node) {\n    return !!(this.compareDocumentPosition(node) & 16);\n  };\n}\n\n/**\n * A `DomAdapter` powered by full browser DOM APIs.\n *\n * @security Tread carefully! Interacting with the DOM directly is dangerous and\n * can introduce XSS risks.\n */\n/* tslint:disable:requireParameterType no-console */\nexport class BrowserDomAdapter extends GenericBrowserDomAdapter {\n  parse(templateHtml: string) { throw new Error('parse not implemented'); }\n  static makeCurrent() { setRootDomAdapter(new BrowserDomAdapter()); }\n  hasProperty(element: Node, name: string): boolean { return name in element; }\n  setProperty(el: Node, name: string, value: any) { (<any>el)[name] = value; }\n  getProperty(el: Node, name: string): any { return (<any>el)[name]; }\n  invoke(el: Node, methodName: string, args: any[]): any { (<any>el)[methodName](...args); }\n\n  // TODO(tbosch): move this into a separate environment class once we have it\n  logError(error: string): void {\n    if (window.console) {\n      if (console.error) {\n        console.error(error);\n      } else {\n        console.log(error);\n      }\n    }\n  }\n\n  log(error: string): void {\n    if (window.console) {\n      window.console.log && window.console.log(error);\n    }\n  }\n\n  logGroup(error: string): void {\n    if (window.console) {\n      window.console.group && window.console.group(error);\n    }\n  }\n\n  logGroupEnd(): void {\n    if (window.console) {\n      window.console.groupEnd && window.console.groupEnd();\n    }\n  }\n\n  get attrToPropMap(): any { return _attrToPropMap; }\n\n  contains(nodeA: any, nodeB: any): boolean { return nodeContains.call(nodeA, nodeB); }\n  querySelector(el: HTMLElement, selector: string): any { return el.querySelector(selector); }\n  querySelectorAll(el: any, selector: string): any[] { return el.querySelectorAll(selector); }\n  on(el: Node, evt: any, listener: any) { el.addEventListener(evt, listener, false); }\n  onAndCancel(el: Node, evt: any, listener: any): Function {\n    el.addEventListener(evt, listener, false);\n    // Needed to follow Dart's subscription semantic, until fix of\n    // https://code.google.com/p/dart/issues/detail?id=17406\n    return () => { el.removeEventListener(evt, listener, false); };\n  }\n  dispatchEvent(el: Node, evt: any) { el.dispatchEvent(evt); }\n  createMouseEvent(eventType: string): MouseEvent {\n    const evt: MouseEvent = this.getDefaultDocument().createEvent('MouseEvent');\n    evt.initEvent(eventType, true, true);\n    return evt;\n  }\n  createEvent(eventType: any): Event {\n    const evt: Event = this.getDefaultDocument().createEvent('Event');\n    evt.initEvent(eventType, true, true);\n    return evt;\n  }\n  preventDefault(evt: Event) {\n    evt.preventDefault();\n    evt.returnValue = false;\n  }\n  isPrevented(evt: Event): boolean {\n    return evt.defaultPrevented || evt.returnValue != null && !evt.returnValue;\n  }\n  getInnerHTML(el: HTMLElement): string { return el.innerHTML; }\n  getTemplateContent(el: Node): Node|null {\n    return 'content' in el && this.isTemplateElement(el) ? (<any>el).content : null;\n  }\n  getOuterHTML(el: HTMLElement): string { return el.outerHTML; }\n  nodeName(node: Node): string { return node.nodeName; }\n  nodeValue(node: Node): string|null { return node.nodeValue; }\n  type(node: HTMLInputElement): string { return node.type; }\n  content(node: Node): Node {\n    if (this.hasProperty(node, 'content')) {\n      return (<any>node).content;\n    } else {\n      return node;\n    }\n  }\n  firstChild(el: Node): Node|null { return el.firstChild; }\n  nextSibling(el: Node): Node|null { return el.nextSibling; }\n  parentElement(el: Node): Node|null { return el.parentNode; }\n  childNodes(el: any): Node[] { return el.childNodes; }\n  childNodesAsList(el: Node): any[] {\n    const childNodes = el.childNodes;\n    const res = new Array(childNodes.length);\n    for (let i = 0; i < childNodes.length; i++) {\n      res[i] = childNodes[i];\n    }\n    return res;\n  }\n  clearNodes(el: Node) {\n    while (el.firstChild) {\n      el.removeChild(el.firstChild);\n    }\n  }\n  appendChild(el: Node, node: Node) { el.appendChild(node); }\n  removeChild(el: Node, node: Node) { el.removeChild(node); }\n  replaceChild(el: Node, newChild: Node, oldChild: Node) { el.replaceChild(newChild, oldChild); }\n  remove(node: Node): Node {\n    if (node.parentNode) {\n      node.parentNode.removeChild(node);\n    }\n    return node;\n  }\n  insertBefore(parent: Node, ref: Node, node: Node) { parent.insertBefore(node, ref); }\n  insertAllBefore(parent: Node, ref: Node, nodes: Node[]) {\n    nodes.forEach((n: any) => parent.insertBefore(n, ref));\n  }\n  insertAfter(parent: Node, ref: Node, node: any) { parent.insertBefore(node, ref.nextSibling); }\n  setInnerHTML(el: Element, value: string) { el.innerHTML = value; }\n  getText(el: Node): string|null { return el.textContent; }\n  setText(el: Node, value: string) { el.textContent = value; }\n  getValue(el: any): string { return el.value; }\n  setValue(el: any, value: string) { el.value = value; }\n  getChecked(el: any): boolean { return el.checked; }\n  setChecked(el: any, value: boolean) { el.checked = value; }\n  createComment(text: string): Comment { return this.getDefaultDocument().createComment(text); }\n  createTemplate(html: any): HTMLElement {\n    const t = this.getDefaultDocument().createElement('template');\n    t.innerHTML = html;\n    return t;\n  }\n  createElement(tagName: string, doc?: Document): HTMLElement {\n    doc = doc || this.getDefaultDocument();\n    return doc.createElement(tagName);\n  }\n  createElementNS(ns: string, tagName: string, doc?: Document): Element {\n    doc = doc || this.getDefaultDocument();\n    return doc.createElementNS(ns, tagName);\n  }\n  createTextNode(text: string, doc?: Document): Text {\n    doc = doc || this.getDefaultDocument();\n    return doc.createTextNode(text);\n  }\n  createScriptTag(attrName: string, attrValue: string, doc?: Document): HTMLScriptElement {\n    doc = doc || this.getDefaultDocument();\n    const el = <HTMLScriptElement>doc.createElement('SCRIPT');\n    el.setAttribute(attrName, attrValue);\n    return el;\n  }\n  createStyleElement(css: string, doc?: Document): HTMLStyleElement {\n    doc = doc || this.getDefaultDocument();\n    const style = <HTMLStyleElement>doc.createElement('style');\n    this.appendChild(style, this.createTextNode(css, doc));\n    return style;\n  }\n  createShadowRoot(el: HTMLElement): DocumentFragment { return (<any>el).createShadowRoot(); }\n  getShadowRoot(el: HTMLElement): DocumentFragment { return (<any>el).shadowRoot; }\n  getHost(el: HTMLElement): HTMLElement { return (<any>el).host; }\n  clone(node: Node): Node { return node.cloneNode(true); }\n  getElementsByClassName(element: any, name: string): HTMLElement[] {\n    return element.getElementsByClassName(name);\n  }\n  getElementsByTagName(element: any, name: string): HTMLElement[] {\n    return element.getElementsByTagName(name);\n  }\n  classList(element: any): any[] { return Array.prototype.slice.call(element.classList, 0); }\n  addClass(element: any, className: string) { element.classList.add(className); }\n  removeClass(element: any, className: string) { element.classList.remove(className); }\n  hasClass(element: any, className: string): boolean {\n    return element.classList.contains(className);\n  }\n  setStyle(element: any, styleName: string, styleValue: string) {\n    element.style[styleName] = styleValue;\n  }\n  removeStyle(element: any, stylename: string) {\n    // IE requires '' instead of null\n    // see https://github.com/angular/angular/issues/7916\n    element.style[stylename] = '';\n  }\n  getStyle(element: any, stylename: string): string { return element.style[stylename]; }\n  hasStyle(element: any, styleName: string, styleValue?: string|null): boolean {\n    const value = this.getStyle(element, styleName) || '';\n    return styleValue ? value == styleValue : value.length > 0;\n  }\n  tagName(element: any): string { return element.tagName; }\n  attributeMap(element: any): Map<string, string> {\n    const res = new Map<string, string>();\n    const elAttrs = element.attributes;\n    for (let i = 0; i < elAttrs.length; i++) {\n      const attrib = elAttrs.item(i);\n      res.set(attrib.name, attrib.value);\n    }\n    return res;\n  }\n  hasAttribute(element: Element, attribute: string): boolean {\n    return element.hasAttribute(attribute);\n  }\n  hasAttributeNS(element: Element, ns: string, attribute: string): boolean {\n    return element.hasAttributeNS(ns, attribute);\n  }\n  getAttribute(element: Element, attribute: string): string|null {\n    return element.getAttribute(attribute);\n  }\n  getAttributeNS(element: Element, ns: string, name: string): string|null {\n    return element.getAttributeNS(ns, name);\n  }\n  setAttribute(element: Element, name: string, value: string) { element.setAttribute(name, value); }\n  setAttributeNS(element: Element, ns: string, name: string, value: string) {\n    element.setAttributeNS(ns, name, value);\n  }\n  removeAttribute(element: Element, attribute: string) { element.removeAttribute(attribute); }\n  removeAttributeNS(element: Element, ns: string, name: string) {\n    element.removeAttributeNS(ns, name);\n  }\n  templateAwareRoot(el: Node): any { return this.isTemplateElement(el) ? this.content(el) : el; }\n  createHtmlDocument(): HTMLDocument {\n    return document.implementation.createHTMLDocument('fakeTitle');\n  }\n  getDefaultDocument(): Document { return document; }\n  getBoundingClientRect(el: Element): any {\n    try {\n      return el.getBoundingClientRect();\n    } catch (e) {\n      return {top: 0, bottom: 0, left: 0, right: 0, width: 0, height: 0};\n    }\n  }\n  getTitle(doc: Document): string { return doc.title; }\n  setTitle(doc: Document, newTitle: string) { doc.title = newTitle || ''; }\n  elementMatches(n: any, selector: string): boolean {\n    if (this.isElementNode(n)) {\n      return n.matches && n.matches(selector) ||\n          n.msMatchesSelector && n.msMatchesSelector(selector) ||\n          n.webkitMatchesSelector && n.webkitMatchesSelector(selector);\n    }\n\n    return false;\n  }\n  isTemplateElement(el: Node): boolean {\n    return this.isElementNode(el) && el.nodeName === 'TEMPLATE';\n  }\n  isTextNode(node: Node): boolean { return node.nodeType === Node.TEXT_NODE; }\n  isCommentNode(node: Node): boolean { return node.nodeType === Node.COMMENT_NODE; }\n  isElementNode(node: Node): boolean { return node.nodeType === Node.ELEMENT_NODE; }\n  hasShadowRoot(node: any): boolean {\n    return node.shadowRoot != null && node instanceof HTMLElement;\n  }\n  isShadowRoot(node: any): boolean { return node instanceof DocumentFragment; }\n  importIntoDoc(node: Node): any { return document.importNode(this.templateAwareRoot(node), true); }\n  adoptNode(node: Node): any { return document.adoptNode(node); }\n  getHref(el: Element): string { return el.getAttribute('href') !; }\n\n  getEventKey(event: any): string {\n    let key = event.key;\n    if (key == null) {\n      key = event.keyIdentifier;\n      // keyIdentifier is defined in the old draft of DOM Level 3 Events implemented by Chrome and\n      // Safari cf\n      // http://www.w3.org/TR/2007/WD-DOM-Level-3-Events-20071221/events.html#Events-KeyboardEvents-Interfaces\n      if (key == null) {\n        return 'Unidentified';\n      }\n      if (key.startsWith('U+')) {\n        key = String.fromCharCode(parseInt(key.substring(2), 16));\n        if (event.location === DOM_KEY_LOCATION_NUMPAD && _chromeNumKeyPadMap.hasOwnProperty(key)) {\n          // There is a bug in Chrome for numeric keypad keys:\n          // https://code.google.com/p/chromium/issues/detail?id=155654\n          // 1, 2, 3 ... are reported as A, B, C ...\n          key = (_chromeNumKeyPadMap as any)[key];\n        }\n      }\n    }\n\n    return _keyMap[key] || key;\n  }\n  getGlobalEventTarget(doc: Document, target: string): EventTarget|null {\n    if (target === 'window') {\n      return window;\n    }\n    if (target === 'document') {\n      return doc;\n    }\n    if (target === 'body') {\n      return doc.body;\n    }\n    return null;\n  }\n  getHistory(): History { return window.history; }\n  getLocation(): Location { return window.location; }\n  getBaseHref(doc: Document): string|null {\n    const href = getBaseElementHref();\n    return href == null ? null : relativePath(href);\n  }\n  resetBaseElement(): void { baseElement = null; }\n  getUserAgent(): string { return window.navigator.userAgent; }\n  setData(element: Element, name: string, value: string) {\n    this.setAttribute(element, 'data-' + name, value);\n  }\n  getData(element: Element, name: string): string|null {\n    return this.getAttribute(element, 'data-' + name);\n  }\n  getComputedStyle(element: any): any { return getComputedStyle(element); }\n  // TODO(tbosch): move this into a separate environment class once we have it\n  supportsWebAnimation(): boolean {\n    return typeof(<any>Element).prototype['animate'] === 'function';\n  }\n  performanceNow(): number {\n    // performance.now() is not available in all browsers, see\n    // http://caniuse.com/#search=performance.now\n    return window.performance && window.performance.now ? window.performance.now() :\n                                                          new Date().getTime();\n  }\n\n  supportsCookies(): boolean { return true; }\n\n  getCookie(name: string): string|null { return parseCookieValue(document.cookie, name); }\n\n  setCookie(name: string, value: string) {\n    // document.cookie is magical, assigning into it assigns/overrides one cookie value, but does\n    // not clear other cookies.\n    document.cookie = encodeURIComponent(name) + '=' + encodeURIComponent(value);\n  }\n}\n\nlet baseElement: HTMLElement|null = null;\nfunction getBaseElementHref(): string|null {\n  if (!baseElement) {\n    baseElement = document.querySelector('base') !;\n    if (!baseElement) {\n      return null;\n    }\n  }\n  return baseElement.getAttribute('href');\n}\n\n// based on urlUtils.js in AngularJS 1\nlet urlParsingNode: any;\nfunction relativePath(url: any): string {\n  if (!urlParsingNode) {\n    urlParsingNode = document.createElement('a');\n  }\n  urlParsingNode.setAttribute('href', url);\n  return (urlParsingNode.pathname.charAt(0) === '/') ? urlParsingNode.pathname :\n                                                       '/' + urlParsingNode.pathname;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DomAdapter} from '../dom/dom_adapter';\n\n\n\n/**\n * Provides DOM operations in any browser environment.\n *\n * @security Tread carefully! Interacting with the DOM directly is dangerous and\n * can introduce XSS risks.\n */\nexport abstract class GenericBrowserDomAdapter extends DomAdapter {\n  private _animationPrefix: string|null = null;\n  private _transitionEnd: string|null = null;\n  constructor() {\n    super();\n    try {\n      const element = this.createElement('div', document);\n      if (this.getStyle(element, 'animationName') != null) {\n        this._animationPrefix = '';\n      } else {\n        const domPrefixes = ['Webkit', 'Moz', 'O', 'ms'];\n\n        for (let i = 0; i < domPrefixes.length; i++) {\n          if (this.getStyle(element, domPrefixes[i] + 'AnimationName') != null) {\n            this._animationPrefix = '-' + domPrefixes[i].toLowerCase() + '-';\n            break;\n          }\n        }\n      }\n\n      const transEndEventNames: {[key: string]: string} = {\n        WebkitTransition: 'webkitTransitionEnd',\n        MozTransition: 'transitionend',\n        OTransition: 'oTransitionEnd otransitionend',\n        transition: 'transitionend'\n      };\n\n      Object.keys(transEndEventNames).forEach((key: string) => {\n        if (this.getStyle(element, key) != null) {\n          this._transitionEnd = transEndEventNames[key];\n        }\n      });\n    } catch (e) {\n      this._animationPrefix = null;\n      this._transitionEnd = null;\n    }\n  }\n\n  getDistributedNodes(el: HTMLElement): Node[] { return (<any>el).getDistributedNodes(); }\n  resolveAndSetHref(el: HTMLAnchorElement, baseUrl: string, href: string) {\n    el.href = href == null ? baseUrl : baseUrl + '/../' + href;\n  }\n  supportsDOMEvents(): boolean { return true; }\n  supportsNativeShadowDOM(): boolean {\n    return typeof(<any>document.body).createShadowRoot === 'function';\n  }\n  getAnimationPrefix(): string { return this._animationPrefix ? this._animationPrefix : ''; }\n  getTransitionEnd(): string { return this._transitionEnd ? this._transitionEnd : ''; }\n  supportsAnimation(): boolean {\n    return this._animationPrefix != null && this._transitionEnd != null;\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Type} from '@angular/core';\n\nlet _DOM: DomAdapter = null !;\n\nexport function getDOM() {\n  return _DOM;\n}\n\nexport function setDOM(adapter: DomAdapter) {\n  _DOM = adapter;\n}\n\nexport function setRootDomAdapter(adapter: DomAdapter) {\n  if (!_DOM) {\n    _DOM = adapter;\n  }\n}\n\n/* tslint:disable:requireParameterType */\n/**\n * Provides DOM operations in an environment-agnostic way.\n *\n * @security Tread carefully! Interacting with the DOM directly is dangerous and\n * can introduce XSS risks.\n */\nexport abstract class DomAdapter {\n  public resourceLoaderType: Type<any> = null !;\n  abstract hasProperty(element: any, name: string): boolean;\n  abstract setProperty(el: Element, name: string, value: any): any;\n  abstract getProperty(el: Element, name: string): any;\n  abstract invoke(el: Element, methodName: string, args: any[]): any;\n\n  abstract logError(error: any): any;\n  abstract log(error: any): any;\n  abstract logGroup(error: any): any;\n  abstract logGroupEnd(): any;\n\n  /**\n   * Maps attribute names to their corresponding property names for cases\n   * where attribute name doesn't match property name.\n   */\n  get attrToPropMap(): {[key: string]: string} { return this._attrToPropMap; }\n  set attrToPropMap(value: {[key: string]: string}) { this._attrToPropMap = value; }\n  /** @internal */\n  // TODO(issue/24571): remove '!'.\n  _attrToPropMap !: {[key: string]: string};\n\n  abstract contains(nodeA: any, nodeB: any): boolean;\n  abstract parse(templateHtml: string): any;\n  abstract querySelector(el: any, selector: string): any;\n  abstract querySelectorAll(el: any, selector: string): any[];\n  abstract on(el: any, evt: any, listener: any): any;\n  abstract onAndCancel(el: any, evt: any, listener: any): Function;\n  abstract dispatchEvent(el: any, evt: any): any;\n  abstract createMouseEvent(eventType: any): any;\n  abstract createEvent(eventType: string): any;\n  abstract preventDefault(evt: any): any;\n  abstract isPrevented(evt: any): boolean;\n  abstract getInnerHTML(el: any): string;\n  /** Returns content if el is a <template> element, null otherwise. */\n  abstract getTemplateContent(el: any): any;\n  abstract getOuterHTML(el: any): string;\n  abstract nodeName(node: any): string;\n  abstract nodeValue(node: any): string|null;\n  abstract type(node: any): string;\n  abstract content(node: any): any;\n  abstract firstChild(el: any): Node|null;\n  abstract nextSibling(el: any): Node|null;\n  abstract parentElement(el: any): Node|null;\n  abstract childNodes(el: any): Node[];\n  abstract childNodesAsList(el: any): Node[];\n  abstract clearNodes(el: any): any;\n  abstract appendChild(el: any, node: any): any;\n  abstract removeChild(el: any, node: any): any;\n  abstract replaceChild(el: any, newNode: any, oldNode: any): any;\n  abstract remove(el: any): Node;\n  abstract insertBefore(parent: any, ref: any, node: any): any;\n  abstract insertAllBefore(parent: any, ref: any, nodes: any): any;\n  abstract insertAfter(parent: any, el: any, node: any): any;\n  abstract setInnerHTML(el: any, value: any): any;\n  abstract getText(el: any): string|null;\n  abstract setText(el: any, value: string): any;\n  abstract getValue(el: any): string;\n  abstract setValue(el: any, value: string): any;\n  abstract getChecked(el: any): boolean;\n  abstract setChecked(el: any, value: boolean): any;\n  abstract createComment(text: string): any;\n  abstract createTemplate(html: any): HTMLElement;\n  abstract createElement(tagName: any, doc?: any): HTMLElement;\n  abstract createElementNS(ns: string, tagName: string, doc?: any): Element;\n  abstract createTextNode(text: string, doc?: any): Text;\n  abstract createScriptTag(attrName: string, attrValue: string, doc?: any): HTMLElement;\n  abstract createStyleElement(css: string, doc?: any): HTMLStyleElement;\n  abstract createShadowRoot(el: any): any;\n  abstract getShadowRoot(el: any): any;\n  abstract getHost(el: any): any;\n  abstract getDistributedNodes(el: any): Node[];\n  abstract clone /*<T extends Node>*/ (node: Node /*T*/): Node /*T*/;\n  abstract getElementsByClassName(element: any, name: string): HTMLElement[];\n  abstract getElementsByTagName(element: any, name: string): HTMLElement[];\n  abstract classList(element: any): any[];\n  abstract addClass(element: any, className: string): any;\n  abstract removeClass(element: any, className: string): any;\n  abstract hasClass(element: any, className: string): boolean;\n  abstract setStyle(element: any, styleName: string, styleValue: string): any;\n  abstract removeStyle(element: any, styleName: string): any;\n  abstract getStyle(element: any, styleName: string): string;\n  abstract hasStyle(element: any, styleName: string, styleValue?: string): boolean;\n  abstract tagName(element: any): string;\n  abstract attributeMap(element: any): Map<string, string>;\n  abstract hasAttribute(element: any, attribute: string): boolean;\n  abstract hasAttributeNS(element: any, ns: string, attribute: string): boolean;\n  abstract getAttribute(element: any, attribute: string): string|null;\n  abstract getAttributeNS(element: any, ns: string, attribute: string): string|null;\n  abstract setAttribute(element: any, name: string, value: string): any;\n  abstract setAttributeNS(element: any, ns: string, name: string, value: string): any;\n  abstract removeAttribute(element: any, attribute: string): any;\n  abstract removeAttributeNS(element: any, ns: string, attribute: string): any;\n  abstract templateAwareRoot(el: any): any;\n  abstract createHtmlDocument(): HTMLDocument;\n  abstract getDefaultDocument(): Document;\n  abstract getBoundingClientRect(el: any): any;\n  abstract getTitle(doc: Document): string;\n  abstract setTitle(doc: Document, newTitle: string): any;\n  abstract elementMatches(n: any, selector: string): boolean;\n  abstract isTemplateElement(el: any): boolean;\n  abstract isTextNode(node: any): boolean;\n  abstract isCommentNode(node: any): boolean;\n  abstract isElementNode(node: any): boolean;\n  abstract hasShadowRoot(node: any): boolean;\n  abstract isShadowRoot(node: any): boolean;\n  abstract importIntoDoc /*<T extends Node>*/ (node: Node /*T*/): Node /*T*/;\n  abstract adoptNode /*<T extends Node>*/ (node: Node /*T*/): Node /*T*/;\n  abstract getHref(element: any): string;\n  abstract getEventKey(event: any): string;\n  abstract resolveAndSetHref(element: any, baseUrl: string, href: string): any;\n  abstract supportsDOMEvents(): boolean;\n  abstract supportsNativeShadowDOM(): boolean;\n  abstract getGlobalEventTarget(doc: Document, target: string): any;\n  abstract getHistory(): History;\n  abstract getLocation(): Location;\n  abstract getBaseHref(doc: Document): string|null;\n  abstract resetBaseElement(): void;\n  abstract getUserAgent(): string;\n  abstract setData(element: any, name: string, value: string): any;\n  abstract getComputedStyle(element: any): any;\n  abstract getData(element: any, name: string): string|null;\n  abstract supportsWebAnimation(): boolean;\n  abstract performanceNow(): number;\n  abstract getAnimationPrefix(): string;\n  abstract getTransitionEnd(): string;\n  abstract supportsAnimation(): boolean;\n\n  abstract supportsCookies(): boolean;\n  abstract getCookie(name: string): string|null;\n  abstract setCookie(name: string, value: string): any;\n}\n","/* Observable */\nexport { Observable } from './internal/Observable';\nexport { ConnectableObservable } from './internal/observable/ConnectableObservable';\nexport { GroupedObservable } from './internal/operators/groupBy';\nexport { Operator } from './internal/Operator';\nexport { observable } from './internal/symbol/observable';\n\n/* Subjects */\nexport { Subject } from './internal/Subject';\nexport { BehaviorSubject } from './internal/BehaviorSubject';\nexport { ReplaySubject } from './internal/ReplaySubject';\nexport { AsyncSubject } from './internal/AsyncSubject';\n\n/* Schedulers */\nexport { asap as asapScheduler } from './internal/scheduler/asap';\nexport { async as asyncScheduler } from './internal/scheduler/async';\nexport { queue as queueScheduler } from './internal/scheduler/queue';\nexport { animationFrame as animationFrameScheduler } from './internal/scheduler/animationFrame';\nexport { VirtualTimeScheduler, VirtualAction } from './internal/scheduler/VirtualTimeScheduler';\nexport { Scheduler } from './internal/Scheduler';\n\n/* Subscription */\nexport { Subscription } from './internal/Subscription';\nexport { Subscriber } from './internal/Subscriber';\n\n/* Notification */\nexport { Notification } from './internal/Notification';\n\n/* Utils */\nexport { pipe } from './internal/util/pipe';\nexport { noop } from './internal/util/noop';\nexport { identity } from './internal/util/identity';\nexport { isObservable } from './internal/util/isObservable';\n\n/* Error types */\nexport { ArgumentOutOfRangeError } from './internal/util/ArgumentOutOfRangeError';\nexport { EmptyError } from './internal/util/EmptyError';\nexport { ObjectUnsubscribedError } from './internal/util/ObjectUnsubscribedError';\nexport { UnsubscriptionError } from './internal/util/UnsubscriptionError';\nexport { TimeoutError } from './internal/util/TimeoutError';\n\n/* Static observable creation exports */\nexport { bindCallback } from './internal/observable/bindCallback';\nexport { bindNodeCallback } from './internal/observable/bindNodeCallback';\nexport { combineLatest } from './internal/observable/combineLatest';\nexport { concat } from './internal/observable/concat';\nexport { defer } from './internal/observable/defer';\nexport { empty } from './internal/observable/empty';\nexport { forkJoin } from './internal/observable/forkJoin';\nexport { from } from './internal/observable/from';\nexport { fromEvent } from './internal/observable/fromEvent';\nexport { fromEventPattern } from './internal/observable/fromEventPattern';\nexport { generate } from './internal/observable/generate';\nexport { iif } from './internal/observable/iif';\nexport { interval } from './internal/observable/interval';\nexport { merge } from './internal/observable/merge';\nexport { never } from './internal/observable/never';\nexport { of } from './internal/observable/of';\nexport { onErrorResumeNext } from './internal/observable/onErrorResumeNext';\nexport { pairs } from './internal/observable/pairs';\nexport { race } from './internal/observable/race';\nexport { range } from './internal/observable/range';\nexport { throwError } from './internal/observable/throwError';\nexport { timer } from './internal/observable/timer';\nexport { using } from './internal/observable/using';\nexport { zip } from './internal/observable/zip';\n\n/* Constants */\nexport { EMPTY } from './internal/observable/empty';\nexport { NEVER } from './internal/observable/never';\n\n/* Types */\nexport * from './internal/types';\n\n/* Config */\nexport { config } from './internal/config';\n","import { Observable } from '../Observable';\nimport { fromArray } from './fromArray';\nimport { isArray } from '../util/isArray';\nimport { Operator } from '../Operator';\nimport { ObservableInput, PartialObserver } from '../types';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { iterator as Symbol_iterator } from '../../internal/symbol/iterator';\n\n/* tslint:disable:max-line-length */\n/** @deprecated resultSelector is no longer supported, pipe to map instead */\nexport function zip<T, R>(v1: ObservableInput<T>, resultSelector: (v1: T) => R): Observable<R>;\n/** @deprecated resultSelector is no longer supported, pipe to map instead */\nexport function zip<T, T2, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, resultSelector: (v1: T, v2: T2) => R): Observable<R>;\n/** @deprecated resultSelector is no longer supported, pipe to map instead */\nexport function zip<T, T2, T3, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, resultSelector: (v1: T, v2: T2, v3: T3) => R): Observable<R>;\n/** @deprecated resultSelector is no longer supported, pipe to map instead */\nexport function zip<T, T2, T3, T4, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, resultSelector: (v1: T, v2: T2, v3: T3, v4: T4) => R): Observable<R>;\n/** @deprecated resultSelector is no longer supported, pipe to map instead */\nexport function zip<T, T2, T3, T4, T5, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, resultSelector: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R): Observable<R>;\n/** @deprecated resultSelector is no longer supported, pipe to map instead */\nexport function zip<T, T2, T3, T4, T5, T6, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, resultSelector: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R): Observable<R>;\n\nexport function zip<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function zip<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function zip<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function zip<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function zip<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n\nexport function zip<T>(array: ObservableInput<T>[]): Observable<T[]>;\nexport function zip<R>(array: ObservableInput<any>[]): Observable<R>;\n/** @deprecated resultSelector is no longer supported, pipe to map instead */\nexport function zip<T, R>(array: ObservableInput<T>[], resultSelector: (...values: Array<T>) => R): Observable<R>;\n/** @deprecated resultSelector is no longer supported, pipe to map instead */\nexport function zip<R>(array: ObservableInput<any>[], resultSelector: (...values: Array<any>) => R): Observable<R>;\n\nexport function zip<T>(...observables: Array<ObservableInput<T>>): Observable<T[]>;\nexport function zip<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R)>): Observable<R>;\nexport function zip<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are calculated from the values, in order, of each\n * of its input Observables.\n *\n * If the latest parameter is a function, this function is used to compute the created value from the input values.\n * Otherwise, an array of the input values is returned.\n *\n * ## Example\n * Combine age and name from different sources\n * ```javascript\n * let age$ = of<number>(27, 25, 29);\n * let name$ = of<string>('Foo', 'Bar', 'Beer');\n * let isDev$ = of<boolean>(true, true, false);\n *\n * zip(age$, name$, isDev$).pipe(\n *   map((age: number, name: string, isDev: boolean) => ({ age, name, isDev })),\n * )\n * .subscribe(x => console.log(x));\n *\n * // outputs\n * // { age: 27, name: 'Foo', isDev: true }\n * // { age: 25, name: 'Bar', isDev: true }\n * // { age: 29, name: 'Beer', isDev: false }\n * ```\n * @param observables\n * @return {Observable<R>}\n * @static true\n * @name zip\n * @owner Observable\n */\nexport function zip<T, R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R> {\n  const resultSelector = <((...ys: Array<any>) => R)> observables[observables.length - 1];\n  if (typeof resultSelector === 'function') {\n    observables.pop();\n  }\n  return fromArray(observables, undefined).lift(new ZipOperator(resultSelector));\n}\n\nexport class ZipOperator<T, R> implements Operator<T, R> {\n\n  resultSelector: (...values: Array<any>) => R;\n\n  constructor(resultSelector?: (...values: Array<any>) => R) {\n    this.resultSelector = resultSelector;\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new ZipSubscriber(subscriber, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ZipSubscriber<T, R> extends Subscriber<T> {\n  private values: any;\n  private resultSelector: (...values: Array<any>) => R;\n  private iterators: LookAheadIterator<any>[] = [];\n  private active = 0;\n\n  constructor(destination: Subscriber<R>,\n              resultSelector?: (...values: Array<any>) => R,\n              values: any = Object.create(null)) {\n    super(destination);\n    this.resultSelector = (typeof resultSelector === 'function') ? resultSelector : null;\n    this.values = values;\n  }\n\n  protected _next(value: any) {\n    const iterators = this.iterators;\n    if (isArray(value)) {\n      iterators.push(new StaticArrayIterator(value));\n    } else if (typeof value[Symbol_iterator] === 'function') {\n      iterators.push(new StaticIterator(value[Symbol_iterator]()));\n    } else {\n      iterators.push(new ZipBufferIterator(this.destination, this, value));\n    }\n  }\n\n  protected _complete() {\n    const iterators = this.iterators;\n    const len = iterators.length;\n\n    this.unsubscribe();\n\n    if (len === 0) {\n      this.destination.complete();\n      return;\n    }\n\n    this.active = len;\n    for (let i = 0; i < len; i++) {\n      let iterator: ZipBufferIterator<any, any> = <any>iterators[i];\n      if (iterator.stillUnsubscribed) {\n        const destination = this.destination as Subscription;\n        destination.add(iterator.subscribe(iterator, i));\n      } else {\n        this.active--; // not an observable\n      }\n    }\n  }\n\n  notifyInactive() {\n    this.active--;\n    if (this.active === 0) {\n      this.destination.complete();\n    }\n  }\n\n  checkIterators() {\n    const iterators = this.iterators;\n    const len = iterators.length;\n    const destination = this.destination;\n\n    // abort if not all of them have values\n    for (let i = 0; i < len; i++) {\n      let iterator = iterators[i];\n      if (typeof iterator.hasValue === 'function' && !iterator.hasValue()) {\n        return;\n      }\n    }\n\n    let shouldComplete = false;\n    const args: any[] = [];\n    for (let i = 0; i < len; i++) {\n      let iterator = iterators[i];\n      let result = iterator.next();\n\n      // check to see if it's completed now that you've gotten\n      // the next value.\n      if (iterator.hasCompleted()) {\n        shouldComplete = true;\n      }\n\n      if (result.done) {\n        destination.complete();\n        return;\n      }\n\n      args.push(result.value);\n    }\n\n    if (this.resultSelector) {\n      this._tryresultSelector(args);\n    } else {\n      destination.next(args);\n    }\n\n    if (shouldComplete) {\n      destination.complete();\n    }\n  }\n\n  protected _tryresultSelector(args: any[]) {\n    let result: any;\n    try {\n      result = this.resultSelector.apply(this, args);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n\ninterface LookAheadIterator<T> extends Iterator<T> {\n  hasValue(): boolean;\n  hasCompleted(): boolean;\n}\n\nclass StaticIterator<T> implements LookAheadIterator<T> {\n  private nextResult: IteratorResult<T>;\n\n  constructor(private iterator: Iterator<T>) {\n    this.nextResult = iterator.next();\n  }\n\n  hasValue() {\n    return true;\n  }\n\n  next(): IteratorResult<T> {\n    const result = this.nextResult;\n    this.nextResult = this.iterator.next();\n    return result;\n  }\n\n  hasCompleted() {\n    const nextResult = this.nextResult;\n    return nextResult && nextResult.done;\n  }\n}\n\nclass StaticArrayIterator<T> implements LookAheadIterator<T> {\n  private index = 0;\n  private length = 0;\n\n  constructor(private array: T[]) {\n    this.length = array.length;\n  }\n\n  [Symbol_iterator]() {\n    return this;\n  }\n\n  next(value?: any): IteratorResult<T> {\n    const i = this.index++;\n    const array = this.array;\n    return i < this.length ? { value: array[i], done: false } : { value: null, done: true };\n  }\n\n  hasValue() {\n    return this.array.length > this.index;\n  }\n\n  hasCompleted() {\n    return this.array.length === this.index;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ZipBufferIterator<T, R> extends OuterSubscriber<T, R> implements LookAheadIterator<T> {\n  stillUnsubscribed = true;\n  buffer: T[] = [];\n  isComplete = false;\n\n  constructor(destination: PartialObserver<T>,\n              private parent: ZipSubscriber<T, R>,\n              private observable: Observable<T>) {\n    super(destination);\n  }\n\n  [Symbol_iterator]() {\n    return this;\n  }\n\n  // NOTE: there is actually a name collision here with Subscriber.next and Iterator.next\n  //    this is legit because `next()` will never be called by a subscription in this case.\n  next(): IteratorResult<T> {\n    const buffer = this.buffer;\n    if (buffer.length === 0 && this.isComplete) {\n      return { value: null, done: true };\n    } else {\n      return { value: buffer.shift(), done: false };\n    }\n  }\n\n  hasValue() {\n    return this.buffer.length > 0;\n  }\n\n  hasCompleted() {\n    return this.buffer.length === 0 && this.isComplete;\n  }\n\n  notifyComplete() {\n    if (this.buffer.length > 0) {\n      this.isComplete = true;\n      this.parent.notifyInactive();\n    } else {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: any,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.buffer.push(innerValue);\n    this.parent.checkIterators();\n  }\n\n  subscribe(value: any, index: number) {\n    return subscribeToResult<any, any>(this, this.observable, this, index);\n  }\n}\n","import { Observable } from '../Observable';\nimport { Unsubscribable, ObservableInput } from '../types';\nimport { from } from './from'; // from from from! LAWL\nimport { EMPTY } from './empty';\n\n/**\n * Creates an Observable that uses a resource which will be disposed at the same time as the Observable.\n *\n * <span class=\"informal\">Use it when you catch yourself cleaning up after an Observable.</span>\n *\n * `using` is a factory operator, which accepts two functions. First function returns a disposable resource.\n * It can be an arbitrary object that implements `unsubscribe` method. Second function will be injected with\n * that object and should return an Observable. That Observable can use resource object during its execution.\n * Both functions passed to `using` will be called every time someone subscribes - neither an Observable nor\n * resource object will be shared in any way between subscriptions.\n *\n * When Observable returned by `using` is subscribed, Observable returned from the second function will be subscribed\n * as well. All its notifications (nexted values, completion and error events) will be emitted unchanged by the output\n * Observable. If however someone unsubscribes from the Observable or source Observable completes or errors by itself,\n * the `unsubscribe` method on resource object will be called. This can be used to do any necessary clean up, which\n * otherwise would have to be handled by hand. Note that complete or error notifications are not emitted when someone\n * cancels subscription to an Observable via `unsubscribe`, so `using` can be used as a hook, allowing you to make\n * sure that all resources which need to exist during an Observable execution will be disposed at appropriate time.\n *\n * @see {@link defer}\n *\n * @param {function(): ISubscription} resourceFactory A function which creates any resource object\n * that implements `unsubscribe` method.\n * @param {function(resource: ISubscription): Observable<T>} observableFactory A function which\n * creates an Observable, that can use injected resource object.\n * @return {Observable<T>} An Observable that behaves the same as Observable returned by `observableFactory`, but\n * which - when completed, errored or unsubscribed - will also call `unsubscribe` on created resource object.\n */\nexport function using<T>(resourceFactory: () => Unsubscribable | void,\n                         observableFactory: (resource: Unsubscribable | void) => ObservableInput<T> | void): Observable<T> {\n  return new Observable<T>(subscriber => {\n    let resource: Unsubscribable | void;\n\n    try {\n      resource = resourceFactory();\n    } catch (err) {\n      subscriber.error(err);\n      return undefined;\n    }\n\n    let result: ObservableInput<T> | void;\n    try {\n      result = observableFactory(resource);\n    } catch (err) {\n      subscriber.error(err);\n      return undefined;\n    }\n\n    const source = result ? from(result) : EMPTY;\n    const subscription = source.subscribe(subscriber);\n    return () => {\n      subscription.unsubscribe();\n      if (resource) {\n        resource.unsubscribe();\n      }\n    };\n  });\n}\n","import { Observable } from '../Observable';\nimport { SchedulerAction, SchedulerLike } from '../types';\nimport { async } from '../scheduler/async';\nimport { isNumeric } from '../util/isNumeric';\nimport { isScheduler } from '../util/isScheduler';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * Creates an Observable that starts emitting after an `dueTime` and\n * emits ever increasing numbers after each `period` of time thereafter.\n *\n * <span class=\"informal\">Its like {@link index/interval}, but you can specify when\n * should the emissions start.</span>\n *\n * ![](timer.png)\n *\n * `timer` returns an Observable that emits an infinite sequence of ascending\n * integers, with a constant interval of time, `period` of your choosing\n * between those emissions. The first emission happens after the specified\n * `dueTime`. The initial delay may be a `Date`. By default, this\n * operator uses the {@link asyncScheduler} {@link SchedulerLike} to provide a notion of time, but you\n * may pass any {@link SchedulerLike} to it. If `period` is not specified, the output\n * Observable emits only one value, `0`. Otherwise, it emits an infinite\n * sequence.\n *\n * ## Examples\n * ### Emits ascending numbers, one every second (1000ms), starting after 3 seconds\n * ```javascript\n * const numbers = timer(3000, 1000);\n * numbers.subscribe(x => console.log(x));\n * ```\n *\n * ### Emits one number after five seconds\n * ```javascript\n * const numbers = timer(5000);\n * numbers.subscribe(x => console.log(x));\n * ```\n * @see {@link index/interval}\n * @see {@link delay}\n *\n * @param {number|Date} [dueTime] The initial delay time specified as a Date object or as an integer denoting\n * milliseconds to wait before emitting the first value of 0`.\n * @param {number|SchedulerLike} [periodOrScheduler] The period of time between emissions of the\n * subsequent numbers.\n * @param {SchedulerLike} [scheduler=async] The {@link SchedulerLike} to use for scheduling\n * the emission of values, and providing a notion of \"time\".\n * @return {Observable} An Observable that emits a `0` after the\n * `dueTime` and ever increasing numbers after each `period` of time\n * thereafter.\n * @static true\n * @name timer\n * @owner Observable\n */\nexport function timer(dueTime: number | Date = 0,\n                      periodOrScheduler?: number | SchedulerLike,\n                      scheduler?: SchedulerLike): Observable<number> {\n  let period = -1;\n  if (isNumeric(periodOrScheduler)) {\n    period = Number(periodOrScheduler) < 1 && 1 || Number(periodOrScheduler);\n  } else if (isScheduler(periodOrScheduler)) {\n    scheduler = periodOrScheduler as any;\n  }\n\n  if (!isScheduler(scheduler)) {\n    scheduler = async;\n  }\n\n  return new Observable(subscriber => {\n    const due = isNumeric(dueTime)\n      ? (dueTime as number)\n      : (+dueTime - scheduler.now());\n\n    return scheduler.schedule(dispatch, due, {\n      index: 0, period, subscriber\n    });\n  });\n}\n\ninterface TimerState {\n  index: number;\n  period: number;\n  subscriber: Subscriber<number>;\n}\n\nfunction dispatch(this: SchedulerAction<TimerState>, state: TimerState) {\n  const { index, period, subscriber } = state;\n  subscriber.next(index);\n\n  if (subscriber.closed) {\n    return;\n  } else if (period === -1) {\n    return subscriber.complete();\n  }\n\n  state.index = index + 1;\n  this.schedule(state, period);\n}\n","import { SchedulerAction, SchedulerLike } from '../types';\nimport { Observable } from '../Observable';\n\n/**\n * Creates an Observable that emits a sequence of numbers within a specified\n * range.\n *\n * <span class=\"informal\">Emits a sequence of numbers in a range.</span>\n *\n * ![](range.png)\n *\n * `range` operator emits a range of sequential integers, in order, where you\n * select the `start` of the range and its `length`. By default, uses no\n * {@link SchedulerLike} and just delivers the notifications synchronously, but may use\n * an optional {@link SchedulerLike} to regulate those deliveries.\n *\n * ## Example\n * Emits the numbers 1 to 10</caption>\n * ```javascript\n * const numbers = range(1, 10);\n * numbers.subscribe(x => console.log(x));\n * ```\n * @see {@link timer}\n * @see {@link index/interval}\n *\n * @param {number} [start=0] The value of the first integer in the sequence.\n * @param {number} [count=0] The number of sequential integers to generate.\n * @param {SchedulerLike} [scheduler] A {@link SchedulerLike} to use for scheduling\n * the emissions of the notifications.\n * @return {Observable} An Observable of numbers that emits a finite range of\n * sequential integers.\n * @static true\n * @name range\n * @owner Observable\n */\nexport function range(start: number = 0,\n                      count: number = 0,\n                      scheduler?: SchedulerLike): Observable<number> {\n  return new Observable<number>(subscriber => {\n    let index = 0;\n    let current = start;\n\n    if (scheduler) {\n      return scheduler.schedule(dispatch, 0, {\n        index, count, start, subscriber\n      });\n    } else {\n      do {\n        if (index++ >= count) {\n          subscriber.complete();\n          break;\n        }\n        subscriber.next(current++);\n        if (subscriber.closed) {\n          break;\n        }\n      } while (true);\n    }\n\n    return undefined;\n  });\n}\n\n/** @internal */\nexport function dispatch(this: SchedulerAction<any>, state: any) {\n  const { start, index, count, subscriber } = state;\n\n  if (index >= count) {\n    subscriber.complete();\n    return;\n  }\n\n  subscriber.next(start);\n\n  if (subscriber.closed) {\n    return;\n  }\n\n  state.index = index + 1;\n  state.start = start + 1;\n\n  this.schedule(state);\n}\n","import { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { fromArray } from './fromArray';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { TeardownLogic } from '../types';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n\n/**\n * Returns an Observable that mirrors the first source Observable to emit an item.\n *\n * ## Example\n * ### Subscribes to the observable that was the first to start emitting.\n *\n * ```javascript\n * const obs1 = interval(1000).pipe(mapTo('fast one'));\n * const obs2 = interval(3000).pipe(mapTo('medium one'));\n * const obs3 = interval(5000).pipe(mapTo('slow one'));\n *\n * race(obs3, obs1, obs2)\n * .subscribe(\n *   winner => console.log(winner)\n * );\n *\n * // result:\n * // a series of 'fast one'\n * ```\n *\n * @param {...Observables} ...observables sources used to race for which Observable emits first.\n * @return {Observable} an Observable that mirrors the output of the first Observable to emit an item.\n * @static true\n * @name race\n * @owner Observable\n */\nexport function race<T>(observables: Array<Observable<T>>): Observable<T>;\nexport function race<T>(observables: Array<Observable<any>>): Observable<T>;\nexport function race<T>(...observables: Array<Observable<T> | Array<Observable<T>>>): Observable<T>;\nexport function race<T>(...observables: Array<Observable<any> | Array<Observable<any>>>): Observable<T> {\n  // if the only argument is an array, it was most likely called with\n  // `race([obs1, obs2, ...])`\n  if (observables.length === 1) {\n    if (isArray(observables[0])) {\n      observables = <Array<Observable<any>>>observables[0];\n    } else {\n      return <Observable<any>>observables[0];\n    }\n  }\n\n  return fromArray(observables, undefined).lift(new RaceOperator<T>());\n}\n\nexport class RaceOperator<T> implements Operator<T, T> {\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new RaceSubscriber(subscriber));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class RaceSubscriber<T> extends OuterSubscriber<T, T> {\n  private hasFirst: boolean = false;\n  private observables: Observable<any>[] = [];\n  private subscriptions: Subscription[] = [];\n\n  constructor(destination: Subscriber<T>) {\n    super(destination);\n  }\n\n  protected _next(observable: any): void {\n    this.observables.push(observable);\n  }\n\n  protected _complete() {\n    const observables = this.observables;\n    const len = observables.length;\n\n    if (len === 0) {\n      this.destination.complete();\n    } else {\n      for (let i = 0; i < len && !this.hasFirst; i++) {\n        let observable = observables[i];\n        let subscription = subscribeToResult(this, observable, observable as any, i);\n\n        if (this.subscriptions) {\n          this.subscriptions.push(subscription);\n        }\n        this.add(subscription);\n      }\n      this.observables = null;\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    if (!this.hasFirst) {\n      this.hasFirst = true;\n\n      for (let i = 0; i < this.subscriptions.length; i++) {\n        if (i !== outerIndex) {\n          let subscription = this.subscriptions[i];\n\n          subscription.unsubscribe();\n          this.remove(subscription);\n        }\n      }\n\n      this.subscriptions = null;\n    }\n\n    this.destination.next(innerValue);\n  }\n}\n","import { Observable } from '../Observable';\nimport { SchedulerAction, SchedulerLike } from '../types';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\n\n/**\n * Convert an object into an Observable of `[key, value]` pairs.\n *\n * <span class=\"informal\">Turn entries of an object into a stream.</span>\n *\n * <img src=\"./img/pairs.png\" width=\"100%\">\n *\n * `pairs` takes an arbitrary object and returns an Observable that emits arrays. Each\n * emitted array has exactly two elements - the first is a key from the object\n * and the second is a value corresponding to that key. Keys are extracted from\n * an object via `Object.keys` function, which means that they will be only\n * enumerable keys that are present on an object directly - not ones inherited\n * via prototype chain.\n *\n * By default these arrays are emitted synchronously. To change that you can\n * pass a {@link SchedulerLike} as a second argument to `pairs`.\n *\n * @example <caption>Converts a javascript object to an Observable</caption>\n * ```javascript\n * const obj = {\n *   foo: 42,\n *   bar: 56,\n *   baz: 78\n * };\n *\n * pairs(obj)\n * .subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('the end!')\n * );\n *\n * // Logs:\n * // [\"foo\": 42],\n * // [\"bar\": 56],\n * // [\"baz\": 78],\n * // \"the end!\"\n * ```\n *\n * @param {Object} obj The object to inspect and turn into an\n * Observable sequence.\n * @param {Scheduler} [scheduler] An optional IScheduler to schedule\n * when resulting Observable will emit values.\n * @returns {(Observable<Array<string|T>>)} An observable sequence of\n * [key, value] pairs from the object.\n */\nexport function pairs<T>(obj: Object, scheduler?: SchedulerLike): Observable<[string, T]> {\n  if (!scheduler) {\n    return new Observable<[string, T]>(subscriber => {\n      const keys = Object.keys(obj);\n      for (let i = 0; i < keys.length && !subscriber.closed; i++) {\n        const key = keys[i];\n        if (obj.hasOwnProperty(key)) {\n          subscriber.next([key, obj[key]]);\n        }\n      }\n      subscriber.complete();\n    });\n  } else {\n    return new Observable<[string, T]>(subscriber => {\n      const keys = Object.keys(obj);\n      const subscription = new Subscription();\n      subscription.add(\n        scheduler.schedule<{ keys: string[], index: number, subscriber: Subscriber<[string, T]>, subscription: Subscription, obj: Object }>\n          (dispatch, 0, { keys, index: 0, subscriber, subscription, obj }));\n      return subscription;\n    });\n  }\n}\n\n/** @internal */\nexport function dispatch<T>(this: SchedulerAction<any>,\n                            state: { keys: string[], index: number, subscriber: Subscriber<[string, T]>, subscription: Subscription, obj: Object }) {\n  const { keys, index, subscriber, subscription, obj } = state;\n  if (!subscriber.closed) {\n    if (index < keys.length) {\n      const key = keys[index];\n      subscriber.next([key, obj[key]]);\n      subscription.add(this.schedule({ keys, index: index + 1, subscriber, subscription, obj }));\n    } else {\n      subscriber.complete();\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { ObservableInput } from '../types';\nimport { from } from './from';\nimport { isArray } from '../util/isArray';\nimport { EMPTY } from './empty';\n\n/* tslint:disable:max-line-length */\nexport function onErrorResumeNext<R>(v: ObservableInput<R>): Observable<R>;\nexport function onErrorResumeNext<T2, T3, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<R>;\nexport function onErrorResumeNext<T2, T3, T4, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<R>;\nexport function onErrorResumeNext<T2, T3, T4, T5, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<R>;\nexport function onErrorResumeNext<T2, T3, T4, T5, T6, R>(v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<R>;\n\nexport function onErrorResumeNext<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): Observable<R>;\nexport function onErrorResumeNext<R>(array: ObservableInput<any>[]): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * When any of the provided Observable emits an complete or error notification, it immediately subscribes to the next one\n * that was passed.\n *\n * <span class=\"informal\">Execute series of Observables no matter what, even if it means swallowing errors.</span>\n *\n * ![](onErrorResumeNext.png)\n *\n * `onErrorResumeNext` Will subscribe to each observable source it is provided, in order.\n * If the source it's subscribed to emits an error or completes, it will move to the next source\n * without error.\n *\n * If `onErrorResumeNext` is provided no arguments, or a single, empty array, it will return {@link index/EMPTY}.\n *\n * `onErrorResumeNext` is basically {@link concat}, only it will continue, even if one of its\n * sources emits an error.\n *\n * Note that there is no way to handle any errors thrown by sources via the resuult of\n * `onErrorResumeNext`. If you want to handle errors thrown in any given source, you can\n * always use the {@link catchError} operator on them before passing them into `onErrorResumeNext`.\n *\n * ## Example\n * Subscribe to the next Observable after map fails</caption>\n * ```javascript\n * import { onErrorResumeNext, of } from 'rxjs';\n * import { map } from 'rxjs/operators';\n *\n * onErrorResumeNext(\n *  of(1, 2, 3, 0).pipe(\n *    map(x => {\n *      if (x === 0) throw Error();\n *      return 10 / x;\n *    })\n *  ),\n *  of(1, 2, 3),\n * )\n * .subscribe(\n *   val => console.log(val),\n *   err => console.log(err),          // Will never be called.\n *   () => console.log('done'),\n * );\n *\n * // Logs:\n * // 10\n * // 5\n * // 3.3333333333333335\n * // 1\n * // 2\n * // 3\n * // \"done\"\n * ```\n *\n * @see {@link concat}\n * @see {@link catchError}\n *\n * @param {...ObservableInput} sources Observables (or anything that *is* observable) passed either directly or as an array.\n * @return {Observable} An Observable that concatenates all sources, one after the other,\n * ignoring all errors, such that any error causes it to move on to the next source.\n */\nexport function onErrorResumeNext<T, R>(...sources: Array<ObservableInput<any> |\n                                                              Array<ObservableInput<any>> |\n                                                              ((...values: Array<any>) => R)>): Observable<R> {\n\n  if (sources.length === 0) {\n    return EMPTY;\n  }\n\n  const [ first, ...remainder ] = sources;\n\n  if (sources.length === 1 && isArray(first)) {\n    return onErrorResumeNext(...first);\n  }\n\n  return new Observable(subscriber => {\n    const subNext = () => subscriber.add(\n      onErrorResumeNext(...remainder).subscribe(subscriber)\n    );\n\n    return from(first).subscribe({\n      next(value) { subscriber.next(value); },\n      error: subNext,\n      complete: subNext,\n    });\n  });\n}\n","import { Observable } from '../Observable';\nimport { noop } from '../util/noop';\n\n/**\n * An Observable that emits no items to the Observer and never completes.\n *\n * ![](never.png)\n *\n * A simple Observable that emits neither values nor errors nor the completion\n * notification. It can be used for testing purposes or for composing with other\n * Observables. Please note that by never emitting a complete notification, this\n * Observable keeps the subscription from being disposed automatically.\n * Subscriptions need to be manually disposed.\n *\n * ##  Example\n * ### Emit the number 7, then never emit anything else (not even complete)\n * ```javascript\n * function info() {\n *   console.log('Will not be called');\n * }\n * const result = NEVER.pipe(startWith(7));\n * result.subscribe(x => console.log(x), info, info);\n *\n * ```\n *\n * @see {@link Observable}\n * @see {@link index/EMPTY}\n * @see {@link of}\n * @see {@link throwError}\n */\nexport const NEVER = new Observable<never>(noop);\n\n/**\n * @deprecated Deprecated in favor of using {@link NEVER} constant.\n */\nexport function never () {\n  return NEVER;\n}\n","import { Observable } from '../Observable';\nimport { ObservableInput, SchedulerLike} from '../types';\nimport { isScheduler } from '../util/isScheduler';\nimport { mergeAll } from '../operators/mergeAll';\nimport { fromArray } from './fromArray';\n\n/* tslint:disable:max-line-length */\nexport function merge<T>(v1: ObservableInput<T>, scheduler?: SchedulerLike): Observable<T>;\nexport function merge<T>(v1: ObservableInput<T>, concurrent?: number, scheduler?: SchedulerLike): Observable<T>;\nexport function merge<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: SchedulerLike): Observable<T | T2>;\nexport function merge<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, concurrent?: number, scheduler?: SchedulerLike): Observable<T | T2>;\nexport function merge<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: SchedulerLike): Observable<T | T2 | T3>;\nexport function merge<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, concurrent?: number, scheduler?: SchedulerLike): Observable<T | T2 | T3>;\nexport function merge<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: SchedulerLike): Observable<T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, concurrent?: number, scheduler?: SchedulerLike): Observable<T | T2 | T3 | T4>;\nexport function merge<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: SchedulerLike): Observable<T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, concurrent?: number, scheduler?: SchedulerLike): Observable<T | T2 | T3 | T4 | T5>;\nexport function merge<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: SchedulerLike): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, concurrent?: number, scheduler?: SchedulerLike): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function merge<T>(...observables: (ObservableInput<T> | SchedulerLike | number)[]): Observable<T>;\nexport function merge<T, R>(...observables: (ObservableInput<any> | SchedulerLike | number)[]): Observable<R>;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * ![](merge.png)\n *\n * `merge` subscribes to each given input Observable (as arguments), and simply\n * forwards (without doing any transformation) all the values from all the input\n * Observables to the output Observable. The output Observable only completes\n * once all input Observables have completed. Any error delivered by an input\n * Observable will be immediately emitted on the output Observable.\n *\n * ## Examples\n * ### Merge together two Observables: 1s interval and clicks\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const timer = interval(1000);\n * const clicksOrTimer = merge(clicks, timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // timer will emit ascending values, one every second(1000ms) to console\n * // clicks logs MouseEvents to console everytime the \"document\" is clicked\n * // Since the two streams are merged you see these happening\n * // as they occur.\n * ```\n *\n * ### Merge together 3 Observables, but only 2 run concurrently\n * ```javascript\n * const timer1 = interval(1000).pipe(take(10));\n * const timer2 = interval(2000).pipe(take(6));\n * const timer3 = interval(500).pipe(take(10));\n * const concurrent = 2; // the argument\n * const merged = merge(timer1, timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - First timer1 and timer2 will run concurrently\n * // - timer1 will emit a value every 1000ms for 10 iterations\n * // - timer2 will emit a value every 2000ms for 6 iterations\n * // - after timer1 hits it's max iteration, timer2 will\n * //   continue, and timer3 will start to run concurrently with timer2\n * // - when timer2 hits it's max iteration it terminates, and\n * //   timer3 will continue to emit a value every 500ms until it is complete\n * ```\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {...ObservableInput} observables Input Observables to merge together.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {SchedulerLike} [scheduler=null] The {@link SchedulerLike} to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n * @static true\n * @name merge\n * @owner Observable\n */\nexport function merge<T, R>(...observables: Array<ObservableInput<any> | SchedulerLike | number>): Observable<R> {\n let concurrent = Number.POSITIVE_INFINITY;\n let scheduler: SchedulerLike = null;\n  let last: any = observables[observables.length - 1];\n  if (isScheduler(last)) {\n    scheduler = <SchedulerLike>observables.pop();\n    if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {\n      concurrent = <number>observables.pop();\n    }\n  } else if (typeof last === 'number') {\n    concurrent = <number>observables.pop();\n  }\n\n  if (scheduler === null && observables.length === 1 && observables[0] instanceof Observable) {\n    return <Observable<R>>observables[0];\n  }\n\n  return mergeAll<R>(concurrent)(fromArray<any>(observables, scheduler));\n}\n","import { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\nimport { SchedulerAction, SchedulerLike } from '../types';\nimport { isNumeric } from '../util/isNumeric';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * Creates an Observable that emits sequential numbers every specified\n * interval of time, on a specified {@link SchedulerLike}.\n *\n * <span class=\"informal\">Emits incremental numbers periodically in time.\n * </span>\n *\n * ![](interval.png)\n *\n * `interval` returns an Observable that emits an infinite sequence of\n * ascending integers, with a constant interval of time of your choosing\n * between those emissions. The first emission is not sent immediately, but\n * only after the first period has passed. By default, this operator uses the\n * `async` {@link SchedulerLike} to provide a notion of time, but you may pass any\n * {@link SchedulerLike} to it.\n *\n * ## Example\n * Emits ascending numbers, one every second (1000ms) up to the number 3\n * ```javascript\n * import { interval } from 'rxjs';\n * import { take } from 'rxjs/operators';\n *\n * const numbers = interval(1000);\n *\n * const takeFourNumbers = numbers.pipe(take(4));\n *\n * takeFourNumbers.subscribe(x => console.log('Next: ', x));\n *\n * // Logs:\n * // Next: 0\n * // Next: 1\n * // Next: 2\n * // Next: 3\n * ```\n *\n * @see {@link timer}\n * @see {@link delay}\n *\n * @param {number} [period=0] The interval size in milliseconds (by default)\n * or the time unit determined by the scheduler's clock.\n * @param {SchedulerLike} [scheduler=async] The {@link SchedulerLike} to use for scheduling\n * the emission of values, and providing a notion of \"time\".\n * @return {Observable} An Observable that emits a sequential number each time\n * interval.\n * @static true\n * @name interval\n * @owner Observable\n */\nexport function interval(period = 0,\n                         scheduler: SchedulerLike = async): Observable<number> {\n  if (!isNumeric(period) || period < 0) {\n    period = 0;\n  }\n\n  if (!scheduler || typeof scheduler.schedule !== 'function') {\n    scheduler = async;\n  }\n\n  return new Observable<number>(subscriber => {\n    subscriber.add(\n      scheduler.schedule(dispatch, period, { subscriber, counter: 0, period })\n    );\n    return subscriber;\n  });\n}\n\nfunction dispatch(this: SchedulerAction<IntervalState>, state: IntervalState) {\n  const { subscriber, counter, period } = state;\n  subscriber.next(counter);\n  this.schedule({ subscriber, counter: counter + 1, period }, period);\n}\n\ninterface IntervalState {\n  subscriber: Subscriber<number>;\n  counter: number;\n  period: number;\n}\n","import { isArray } from './isArray';\n\nexport function isNumeric(val: any): val is number | string {\n  // parseFloat NaNs numeric-cast false positives (null|true|false|\"\")\n  // ...but misinterprets leading-number strings, particularly hex literals (\"0x...\")\n  // subtraction forces infinities to NaN\n  // adding 1 corrects loss of precision from parseFloat (#15100)\n  return !isArray(val) && (val - parseFloat(val) + 1) >= 0;\n}\n","import { Observable } from '../Observable';\nimport { defer } from './defer';\nimport { EMPTY } from './empty';\nimport { SubscribableOrPromise } from '../types';\n\n/**\n * Decides at subscription time which Observable will actually be subscribed.\n *\n * <span class=\"informal\">`If` statement for Observables.</span>\n *\n * `iif` accepts a condition function and two Observables. When\n * an Observable returned by the operator is subscribed, condition function will be called.\n * Based on what boolean it returns at that moment, consumer will subscribe either to\n * the first Observable (if condition was true) or to the second (if condition was false). Condition\n * function may also not return anything - in that case condition will be evaluated as false and\n * second Observable will be subscribed.\n *\n * Note that Observables for both cases (true and false) are optional. If condition points to an Observable that\n * was left undefined, resulting stream will simply complete immediately. That allows you to, rather\n * then controlling which Observable will be subscribed, decide at runtime if consumer should have access\n * to given Observable or not.\n *\n * If you have more complex logic that requires decision between more than two Observables, {@link defer}\n * will probably be a better choice. Actually `iif` can be easily implemented with {@link defer}\n * and exists only for convenience and readability reasons.\n *\n *\n * ## Examples\n * ### Change at runtime which Observable will be subscribed\n * ```javascript\n * let subscribeToFirst;\n * const firstOrSecond = iif(\n *   () => subscribeToFirst,\n *   of('first'),\n *   of('second'),\n * );\n *\n * subscribeToFirst = true;\n * firstOrSecond.subscribe(value => console.log(value));\n *\n * // Logs:\n * // \"first\"\n *\n * subscribeToFirst = false;\n * firstOrSecond.subscribe(value => console.log(value));\n *\n * // Logs:\n * // \"second\"\n *\n * ```\n *\n * ### Control an access to an Observable\n * ```javascript\n * let accessGranted;\n * const observableIfYouHaveAccess = iif(\n *   () => accessGranted,\n *   of('It seems you have an access...'), // Note that only one Observable is passed to the operator.\n * );\n *\n * accessGranted = true;\n * observableIfYouHaveAccess.subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('The end'),\n * );\n *\n * // Logs:\n * // \"It seems you have an access...\"\n * // \"The end\"\n *\n * accessGranted = false;\n * observableIfYouHaveAccess.subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('The end'),\n * );\n *\n * // Logs:\n * // \"The end\"\n * ```\n *\n * @see {@link defer}\n *\n * @param {function(): boolean} condition Condition which Observable should be chosen.\n * @param {Observable} [trueObservable] An Observable that will be subscribed if condition is true.\n * @param {Observable} [falseObservable] An Observable that will be subscribed if condition is false.\n * @return {Observable} Either first or second Observable, depending on condition.\n * @static true\n * @name iif\n * @owner Observable\n */\nexport function iif<T, F>(\n  condition: () => boolean,\n  trueResult: SubscribableOrPromise<T> = EMPTY,\n  falseResult: SubscribableOrPromise<F> = EMPTY\n): Observable<T|F> {\n  return defer<T|F>(() => condition() ? trueResult : falseResult);\n}\n","import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { identity } from '../util/identity';\nimport { SchedulerAction, SchedulerLike } from '../types';\nimport { isScheduler } from '../util/isScheduler';\n\nexport type ConditionFunc<S> = (state: S) => boolean;\nexport type IterateFunc<S> = (state: S) => S;\nexport type ResultFunc<S, T> = (state: S) => T;\n\ninterface SchedulerState<T, S> {\n  needIterate?: boolean;\n  state: S;\n  subscriber: Subscriber<T>;\n  condition?: ConditionFunc<S>;\n  iterate: IterateFunc<S>;\n  resultSelector: ResultFunc<S, T>;\n}\n\nexport interface GenerateBaseOptions<S> {\n  /**\n   * Initial state.\n   */\n  initialState: S;\n  /**\n   * Condition function that accepts state and returns boolean.\n   * When it returns false, the generator stops.\n   * If not specified, a generator never stops.\n   */\n  condition?: ConditionFunc<S>;\n  /**\n   * Iterate function that accepts state and returns new state.\n   */\n  iterate: IterateFunc<S>;\n  /**\n   * SchedulerLike to use for generation process.\n   * By default, a generator starts immediately.\n   */\n  scheduler?: SchedulerLike;\n}\n\nexport interface GenerateOptions<T, S> extends GenerateBaseOptions<S> {\n  /**\n   * Result selection function that accepts state and returns a value to emit.\n   */\n  resultSelector: ResultFunc<S, T>;\n}\n\n/**\n * Generates an observable sequence by running a state-driven loop\n * producing the sequence's elements, using the specified scheduler\n * to send out observer messages.\n *\n * ![](generate.png)\n *\n * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n * const res = generate(0, x => x < 10, x => x + 1, x => x);\n *\n * @example <caption>Using asap scheduler, produces sequence of 2, 3, 5, then completes.</caption>\n * const res = generate(1, x => x < 5, x =>  * 2, x => x + 1, asap);\n *\n * @see {@link from}\n * @see {@link Observable}\n *\n * @param {S} initialState Initial state.\n * @param {function (state: S): boolean} condition Condition to terminate generation (upon returning false).\n * @param {function (state: S): S} iterate Iteration step function.\n * @param {function (state: S): T} resultSelector Selector function for results produced in the sequence. (deprecated)\n * @param {SchedulerLike} [scheduler] A {@link SchedulerLike} on which to run the generator loop. If not provided, defaults to emit immediately.\n * @returns {Observable<T>} The generated sequence.\n */\n  export function generate<T, S>(initialState: S,\n                                 condition: ConditionFunc<S>,\n                                 iterate: IterateFunc<S>,\n                                 resultSelector: ResultFunc<S, T>,\n                                 scheduler?: SchedulerLike): Observable<T>;\n\n/**\n * Generates an Observable by running a state-driven loop\n * that emits an element on each iteration.\n *\n * <span class=\"informal\">Use it instead of nexting values in a for loop.</span>\n *\n * <img src=\"./img/generate.png\" width=\"100%\">\n *\n * `generate` allows you to create stream of values generated with a loop very similar to\n * traditional for loop. First argument of `generate` is a beginning value. Second argument\n * is a function that accepts this value and tests if some condition still holds. If it does,\n * loop continues, if not, it stops. Third value is a function which takes previously defined\n * value and modifies it in some way on each iteration. Note how these three parameters\n * are direct equivalents of three expressions in regular for loop: first expression\n * initializes some state (for example numeric index), second tests if loop can make next\n * iteration (for example if index is lower than 10) and third states how defined value\n * will be modified on every step (index will be incremented by one).\n *\n * Return value of a `generate` operator is an Observable that on each loop iteration\n * emits a value. First, condition function is ran. If it returned true, Observable\n * emits currently stored value (initial value at the first iteration) and then updates\n * that value with iterate function. If at some point condition returned false, Observable\n * completes at that moment.\n *\n * Optionally you can pass fourth parameter to `generate` - a result selector function which allows you\n * to immediately map value that would normally be emitted by an Observable.\n *\n * If you find three anonymous functions in `generate` call hard to read, you can provide\n * single object to the operator instead. That object has properties: `initialState`,\n * `condition`, `iterate` and `resultSelector`, which should have respective values that you\n * would normally pass to `generate`. `resultSelector` is still optional, but that form\n * of calling `generate` allows you to omit `condition` as well. If you omit it, that means\n * condition always holds, so output Observable will never complete.\n *\n * Both forms of `generate` can optionally accept a scheduler. In case of multi-parameter call,\n * scheduler simply comes as a last argument (no matter if there is resultSelector\n * function or not). In case of single-parameter call, you can provide it as a\n * `scheduler` property on object passed to the operator. In both cases scheduler decides when\n * next iteration of the loop will happen and therefore when next value will be emitted\n * by the Observable. For example to ensure that each value is pushed to the observer\n * on separate task in event loop, you could use `async` scheduler. Note that\n * by default (when no scheduler is passed) values are simply emitted synchronously.\n *\n *\n * @example <caption>Use with condition and iterate functions.</caption>\n * const generated = generate(0, x => x < 3, x => x + 1);\n *\n * generated.subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('Yo!')\n * );\n *\n * // Logs:\n * // 0\n * // 1\n * // 2\n * // \"Yo!\"\n *\n *\n * @example <caption>Use with condition, iterate and resultSelector functions.</caption>\n * const generated = generate(0, x => x < 3, x => x + 1, x => x * 1000);\n *\n * generated.subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('Yo!')\n * );\n *\n * // Logs:\n * // 0\n * // 1000\n * // 2000\n * // \"Yo!\"\n *\n *\n * @example <caption>Use with options object.</caption>\n * const generated = generate({\n *   initialState: 0,\n *   condition(value) { return value < 3; },\n *   iterate(value) { return value + 1; },\n *   resultSelector(value) { return value * 1000; }\n * });\n *\n * generated.subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('Yo!')\n * );\n *\n * // Logs:\n * // 0\n * // 1000\n * // 2000\n * // \"Yo!\"\n *\n * @example <caption>Use options object without condition function.</caption>\n * const generated = generate({\n *   initialState: 0,\n *   iterate(value) { return value + 1; },\n *   resultSelector(value) { return value * 1000; }\n * });\n *\n * generated.subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('Yo!') // This will never run.\n * );\n *\n * // Logs:\n * // 0\n * // 1000\n * // 2000\n * // 3000\n * // ...and never stops.\n *\n *\n * @see {@link from}\n * @see {@link create}\n *\n * @param {S} initialState Initial state.\n * @param {function (state: S): boolean} condition Condition to terminate generation (upon returning false).\n * @param {function (state: S): S} iterate Iteration step function.\n * @param {function (state: S): T} [resultSelector] Selector function for results produced in the sequence.\n * @param {Scheduler} [scheduler] A {@link Scheduler} on which to run the generator loop. If not provided, defaults to emitting immediately.\n * @return {Observable<T>} The generated sequence.\n */\nexport function generate<S>(initialState: S,\n                            condition: ConditionFunc<S>,\n                            iterate: IterateFunc<S>,\n                            scheduler?: SchedulerLike): Observable<S>;\n\n/**\n * Generates an observable sequence by running a state-driven loop\n * producing the sequence's elements, using the specified scheduler\n * to send out observer messages.\n * The overload accepts options object that might contain initial state, iterate,\n * condition and scheduler.\n *\n * ![](generate.png)\n *\n * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n * const res = generate({\n *   initialState: 0,\n *   condition: x => x < 10,\n *   iterate: x => x + 1,\n * });\n *\n * @see {@link from}\n * @see {@link Observable}\n *\n * @param {GenerateBaseOptions<S>} options Object that must contain initialState, iterate and might contain condition and scheduler.\n * @returns {Observable<S>} The generated sequence.\n */\nexport function generate<S>(options: GenerateBaseOptions<S>): Observable<S>;\n\n/**\n * Generates an observable sequence by running a state-driven loop\n * producing the sequence's elements, using the specified scheduler\n * to send out observer messages.\n * The overload accepts options object that might contain initial state, iterate,\n * condition, result selector and scheduler.\n *\n * ![](generate.png)\n *\n * @example <caption>Produces sequence of 0, 1, 2, ... 9, then completes.</caption>\n * const res = generate({\n *   initialState: 0,\n *   condition: x => x < 10,\n *   iterate: x => x + 1,\n *   resultSelector: x => x,\n * });\n *\n * @see {@link from}\n * @see {@link Observable}\n *\n * @param {GenerateOptions<T, S>} options Object that must contain initialState, iterate, resultSelector and might contain condition and scheduler.\n * @returns {Observable<T>} The generated sequence.\n */\nexport function generate<T, S>(options: GenerateOptions<T, S>): Observable<T>;\n\nexport function generate<T, S>(initialStateOrOptions: S | GenerateOptions<T, S>,\n                               condition?: ConditionFunc<S>,\n                               iterate?: IterateFunc<S>,\n                               resultSelectorOrObservable?: (ResultFunc<S, T>) | SchedulerLike,\n                               scheduler?: SchedulerLike): Observable<T> {\n\n  let resultSelector: ResultFunc<S, T>;\n  let initialState: S;\n\n  if (arguments.length == 1) {\n    const options = initialStateOrOptions as GenerateOptions<T, S>;\n    initialState = options.initialState;\n    condition = options.condition;\n    iterate = options.iterate;\n    resultSelector = options.resultSelector || identity as ResultFunc<S, T>;\n    scheduler = options.scheduler;\n  } else if (resultSelectorOrObservable === undefined || isScheduler(resultSelectorOrObservable)) {\n    initialState = initialStateOrOptions as S;\n    resultSelector = identity as ResultFunc<S, T>;\n    scheduler = resultSelectorOrObservable as SchedulerLike;\n  } else {\n    initialState = initialStateOrOptions as S;\n    resultSelector = resultSelectorOrObservable as ResultFunc<S, T>;\n  }\n\n  return new Observable<T>(subscriber => {\n    let state = initialState;\n    if (scheduler) {\n      return scheduler.schedule<SchedulerState<T, S>>(dispatch, 0, {\n        subscriber,\n        iterate,\n        condition,\n        resultSelector,\n        state\n      });\n    }\n\n    do {\n      if (condition) {\n        let conditionResult: boolean;\n        try {\n          conditionResult = condition(state);\n        } catch (err) {\n          subscriber.error(err);\n          return undefined;\n        }\n        if (!conditionResult) {\n          subscriber.complete();\n          break;\n        }\n      }\n      let value: T;\n      try {\n        value = resultSelector(state);\n      } catch (err) {\n        subscriber.error(err);\n        return undefined;\n      }\n      subscriber.next(value);\n      if (subscriber.closed) {\n        break;\n      }\n      try {\n        state = iterate(state);\n      } catch (err) {\n        subscriber.error(err);\n        return undefined;\n      }\n    } while (true);\n\n    return undefined;\n  });\n}\n\nfunction dispatch<T, S>(this: SchedulerAction<SchedulerState<T, S>>, state: SchedulerState<T, S>) {\n  const { subscriber, condition } = state;\n  if (subscriber.closed) {\n    return undefined;\n  }\n  if (state.needIterate) {\n    try {\n      state.state = state.iterate(state.state);\n    } catch (err) {\n      subscriber.error(err);\n      return undefined;\n    }\n  } else {\n    state.needIterate = true;\n  }\n  if (condition) {\n    let conditionResult: boolean;\n    try {\n      conditionResult = condition(state.state);\n    } catch (err) {\n      subscriber.error(err);\n      return undefined;\n    }\n    if (!conditionResult) {\n      subscriber.complete();\n      return undefined;\n    }\n    if (subscriber.closed) {\n      return undefined;\n    }\n  }\n  let value: T;\n  try {\n    value = state.resultSelector(state.state);\n  } catch (err) {\n    subscriber.error(err);\n    return undefined;\n  }\n  if (subscriber.closed) {\n    return undefined;\n  }\n  subscriber.next(value);\n  if (subscriber.closed) {\n    return undefined;\n  }\n  return this.schedule(state);\n}\n","import { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { isFunction } from '../util/isFunction';\nimport { fromEvent } from './fromEvent';\nimport { map } from '../operators/map';\n\n/* tslint:disable:max-line-length */\nexport function fromEventPattern<T>(addHandler: (handler: Function) => any, removeHandler?: (handler: Function, signal?: any) => void): Observable<T>;\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport function fromEventPattern<T>(addHandler: (handler: Function) => any, removeHandler?: (handler: Function, signal?: any) => void, resultSelector?: (...args: any[]) => T): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Creates an Observable from an arbitrary API for registering event handlers.\n *\n * <span class=\"informal\">When that method for adding event handler was something {@link fromEvent}\n * was not prepared for.</span>\n *\n * ![](fromEventPattern.png)\n *\n * `fromEventPattern` allows you to convert into an Observable any API that supports registering handler functions\n * for events. It is similar to {@link fromEvent}, but far\n * more flexible. In fact, all use cases of {@link fromEvent} could be easily handled by\n * `fromEventPattern` (although in slightly more verbose way).\n *\n * This operator accepts as a first argument an `addHandler` function, which will be injected with\n * handler parameter. That handler is actually an event handler function that you now can pass\n * to API expecting it. `addHandler` will be called whenever Observable\n * returned by the operator is subscribed, so registering handler in API will not\n * necessarily happen when `fromEventPattern` is called.\n *\n * After registration, every time an event that we listen to happens,\n * Observable returned by `fromEventPattern` will emit value that event handler\n * function was called with. Note that if event handler was called with more\n * then one argument, second and following arguments will not appear in the Observable.\n *\n * If API you are using allows to unregister event handlers as well, you can pass to `fromEventPattern`\n * another function - `removeHandler` - as a second parameter. It will be injected\n * with the same handler function as before, which now you can use to unregister\n * it from the API. `removeHandler` will be called when consumer of resulting Observable\n * unsubscribes from it.\n *\n * In some APIs unregistering is actually handled differently. Method registering an event handler\n * returns some kind of token, which is later used to identify which function should\n * be unregistered or it itself has method that unregisters event handler.\n * If that is the case with your API, make sure token returned\n * by registering method is returned by `addHandler`. Then it will be passed\n * as a second argument to `removeHandler`, where you will be able to use it.\n *\n * If you need access to all event handler parameters (not only the first one),\n * or you need to transform them in any way, you can call `fromEventPattern` with optional\n * third parameter - project function which will accept all arguments passed to\n * event handler when it is called. Whatever is returned from project function will appear on\n * resulting stream instead of usual event handlers first argument. This means\n * that default project can be thought of as function that takes its first parameter\n * and ignores the rest.\n *\n * ## Example\n * ### Emits clicks happening on the DOM document\n *\n * ```javascript\n * function addClickHandler(handler) {\n *   document.addEventListener('click', handler);\n * }\n *\n * function removeClickHandler(handler) {\n *   document.removeEventListener('click', handler);\n * }\n *\n * const clicks = fromEventPattern(\n *   addClickHandler,\n *   removeClickHandler\n * );\n * clicks.subscribe(x => console.log(x));\n *\n * // Whenever you click anywhere in the browser, DOM MouseEvent\n * // object will be logged.\n * ```\n *\n * ## Example\n * ### Use with API that returns cancellation token\n *\n * ```javascript\n * const token = someAPI.registerEventHandler(function() {});\n * someAPI.unregisterEventHandler(token); // this APIs cancellation method accepts\n *                                        // not handler itself, but special token.\n *\n * const someAPIObservable = fromEventPattern(\n *   function(handler) { return someAPI.registerEventHandler(handler); }, // Note that we return the token here...\n *   function(handler, token) { someAPI.unregisterEventHandler(token); }  // ...to then use it here.\n * );\n * ```\n *\n * ## Example\n * ### Use with project function\n *\n * ```javascript\n * someAPI.registerEventHandler((eventType, eventMessage) => {\n *   console.log(eventType, eventMessage); // Logs \"EVENT_TYPE\" \"EVENT_MESSAGE\" to console.\n * });\n *\n * const someAPIObservable = fromEventPattern(\n *   handler => someAPI.registerEventHandler(handler),\n *   handler => someAPI.unregisterEventHandler(handler)\n *   (eventType, eventMessage) => eventType + \" --- \" + eventMessage // without that function only \"EVENT_TYPE\"\n * );                                                                // would be emitted by the Observable\n *\n * someAPIObservable.subscribe(value => console.log(value));\n *\n * // Logs:\n * // \"EVENT_TYPE --- EVENT_MESSAGE\"\n * ```\n *\n * @see {@link fromEvent}\n * @see {@link bindCallback}\n * @see {@link bindNodeCallback}\n *\n * @param {function(handler: Function): any} addHandler A function that takes\n * a `handler` function as argument and attaches it somehow to the actual\n * source of events.\n * @param {function(handler: Function, token?: any): void} [removeHandler] A function that\n * takes a `handler` function as an argument and removes it from the event source. If `addHandler`\n * returns some kind of token, `removeHandler` function will have it as a second parameter.\n * @param {function(...args: any): T} [project] A function to\n * transform results. It takes the arguments from the event handler and\n * should return a single value.\n * @return {Observable<T>} Observable which, when an event happens, emits first parameter\n * passed to registered event handler. Alternatively it emits whatever project function returns\n * at that moment.\n * @static true\n * @name fromEventPattern\n * @owner Observable\n */\n\nexport function fromEventPattern<T>(addHandler: (handler: Function) => any,\n                                    removeHandler?: (handler: Function, signal?: any) => void,\n                                    resultSelector?: (...args: any[]) => T): Observable<T | T[]> {\n\n  if (resultSelector) {\n    // DEPRECATED PATH\n    return fromEventPattern<T>(addHandler, removeHandler).pipe(\n      map(args => isArray(args) ? resultSelector(...args) : resultSelector(args))\n    );\n  }\n\n  return new Observable<T | T[]>(subscriber => {\n    const handler = (...e: T[]) => subscriber.next(e.length === 1 ? e[0] : e);\n\n    let retValue: any;\n    try {\n      retValue = addHandler(handler);\n    } catch (err) {\n      subscriber.error(err);\n      return undefined;\n    }\n\n    if (!isFunction(removeHandler)) {\n      return undefined;\n    }\n\n    return () => removeHandler(handler, retValue) ;\n  });\n}\n","import { Observable } from '../Observable';\nimport { isArray } from '../util/isArray';\nimport { isFunction } from '../util/isFunction';\nimport { Subscriber } from '../Subscriber';\nimport { map } from '../operators/map';\n\nconst toString: Function = Object.prototype.toString;\n\nexport interface NodeStyleEventEmitter {\n  addListener: (eventName: string | symbol, handler: NodeEventHandler) => this;\n  removeListener: (eventName: string | symbol, handler: NodeEventHandler) => this;\n}\n\nexport type NodeEventHandler = (...args: any[]) => void;\n\n// For APIs that implement `addListener` and `removeListener` methods that may\n// not use the same arguments or return EventEmitter values\n// such as React Native\nexport interface NodeCompatibleEventEmitter {\n  addListener: (eventName: string, handler: NodeEventHandler) => void | {};\n  removeListener: (eventName: string, handler: NodeEventHandler) => void | {};\n}\n\nexport interface JQueryStyleEventEmitter {\n  on: (eventName: string, handler: Function) => void;\n  off: (eventName: string, handler: Function) => void;\n}\n\nexport interface HasEventTargetAddRemove<E> {\n  addEventListener(type: string, listener: ((evt: E) => void) | null, options?: boolean | AddEventListenerOptions): void;\n  removeEventListener(type: string, listener?: ((evt: E) => void) | null, options?: EventListenerOptions | boolean): void;\n}\n\nexport type EventTargetLike<T> = HasEventTargetAddRemove<T> | NodeStyleEventEmitter | NodeCompatibleEventEmitter | JQueryStyleEventEmitter;\n\nexport type FromEventTarget<T> = EventTargetLike<T> | ArrayLike<EventTargetLike<T>>;\n\nexport interface EventListenerOptions {\n  capture?: boolean;\n  passive?: boolean;\n  once?: boolean;\n}\n\nexport interface AddEventListenerOptions extends EventListenerOptions {\n  once?: boolean;\n  passive?: boolean;\n}\n\n/* tslint:disable:max-line-length */\nexport function fromEvent<T>(target: FromEventTarget<T>, eventName: string): Observable<T>;\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport function fromEvent<T>(target: FromEventTarget<T>, eventName: string, resultSelector: (...args: any[]) => T): Observable<T>;\nexport function fromEvent<T>(target: FromEventTarget<T>, eventName: string, options: EventListenerOptions): Observable<T>;\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport function fromEvent<T>(target: FromEventTarget<T>, eventName: string, options: EventListenerOptions, resultSelector: (...args: any[]) => T): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Creates an Observable that emits events of a specific type coming from the\n * given event target.\n *\n * <span class=\"informal\">Creates an Observable from DOM events, or Node.js\n * EventEmitter events or others.</span>\n *\n * ![](fromEvent.png)\n *\n * `fromEvent` accepts as a first argument event target, which is an object with methods\n * for registering event handler functions. As a second argument it takes string that indicates\n * type of event we want to listen for. `fromEvent` supports selected types of event targets,\n * which are described in detail below. If your event target does not match any of the ones listed,\n * you should use {@link fromEventPattern}, which can be used on arbitrary APIs.\n * When it comes to APIs supported by `fromEvent`, their methods for adding and removing event\n * handler functions have different names, but they all accept a string describing event type\n * and function itself, which will be called whenever said event happens.\n *\n * Every time resulting Observable is subscribed, event handler function will be registered\n * to event target on given event type. When that event fires, value\n * passed as a first argument to registered function will be emitted by output Observable.\n * When Observable is unsubscribed, function will be unregistered from event target.\n *\n * Note that if event target calls registered function with more than one argument, second\n * and following arguments will not appear in resulting stream. In order to get access to them,\n * you can pass to `fromEvent` optional project function, which will be called with all arguments\n * passed to event handler. Output Observable will then emit value returned by project function,\n * instead of the usual value.\n *\n * Remember that event targets listed below are checked via duck typing. It means that\n * no matter what kind of object you have and no matter what environment you work in,\n * you can safely use `fromEvent` on that object if it exposes described methods (provided\n * of course they behave as was described above). So for example if Node.js library exposes\n * event target which has the same method names as DOM EventTarget, `fromEvent` is still\n * a good choice.\n *\n * If the API you use is more callback then event handler oriented (subscribed\n * callback function fires only once and thus there is no need to manually\n * unregister it), you should use {@link bindCallback} or {@link bindNodeCallback}\n * instead.\n *\n * `fromEvent` supports following types of event targets:\n *\n * **DOM EventTarget**\n *\n * This is an object with `addEventListener` and `removeEventListener` methods.\n *\n * In the browser, `addEventListener` accepts - apart from event type string and event\n * handler function arguments - optional third parameter, which is either an object or boolean,\n * both used for additional configuration how and when passed function will be called. When\n * `fromEvent` is used with event target of that type, you can provide this values\n * as third parameter as well.\n *\n * **Node.js EventEmitter**\n *\n * An object with `addListener` and `removeListener` methods.\n *\n * **JQuery-style event target**\n *\n * An object with `on` and `off` methods\n *\n * **DOM NodeList**\n *\n * List of DOM Nodes, returned for example by `document.querySelectorAll` or `Node.childNodes`.\n *\n * Although this collection is not event target in itself, `fromEvent` will iterate over all Nodes\n * it contains and install event handler function in every of them. When returned Observable\n * is unsubscribed, function will be removed from all Nodes.\n *\n * **DOM HtmlCollection**\n *\n * Just as in case of NodeList it is a collection of DOM nodes. Here as well event handler function is\n * installed and removed in each of elements.\n *\n *\n * ## Examples\n * ### Emits clicks happening on the DOM document\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * clicks.subscribe(x => console.log(x));\n *\n * // Results in:\n * // MouseEvent object logged to console every time a click\n * // occurs on the document.\n * ```\n *\n * ### Use addEventListener with capture option\n * ```javascript\n * const clicksInDocument = fromEvent(document, 'click', true); // note optional configuration parameter\n *                                                              // which will be passed to addEventListener\n * const clicksInDiv = fromEvent(someDivInDocument, 'click');\n *\n * clicksInDocument.subscribe(() => console.log('document'));\n * clicksInDiv.subscribe(() => console.log('div'));\n *\n * // By default events bubble UP in DOM tree, so normally\n * // when we would click on div in document\n * // \"div\" would be logged first and then \"document\".\n * // Since we specified optional `capture` option, document\n * // will catch event when it goes DOWN DOM tree, so console\n * // will log \"document\" and then \"div\".\n * ```\n *\n * @see {@link bindCallback}\n * @see {@link bindNodeCallback}\n * @see {@link fromEventPattern}\n *\n * @param {FromEventTarget<T>} target The DOM EventTarget, Node.js\n * EventEmitter, JQuery-like event target, NodeList or HTMLCollection to attach the event handler to.\n * @param {string} eventName The event name of interest, being emitted by the\n * `target`.\n * @param {EventListenerOptions} [options] Options to pass through to addEventListener\n * @return {Observable<T>}\n * @name fromEvent\n */\nexport function fromEvent<T>(\n  target: FromEventTarget<T>,\n  eventName: string,\n  options?: EventListenerOptions | ((...args: any[]) => T),\n  resultSelector?: ((...args: any[]) => T)\n): Observable<T> {\n\n  if (isFunction(options)) {\n    // DEPRECATED PATH\n    resultSelector = options;\n    options = undefined;\n  }\n  if (resultSelector) {\n    // DEPRECATED PATH\n    return fromEvent<T>(target, eventName, <EventListenerOptions | undefined>options).pipe(\n      map(args => isArray(args) ? resultSelector(...args) : resultSelector(args))\n    );\n  }\n\n  return new Observable<T>(subscriber => {\n    function handler(e: T) {\n      if (arguments.length > 1) {\n        subscriber.next(Array.prototype.slice.call(arguments));\n      } else {\n        subscriber.next(e);\n      }\n    }\n    setupSubscription(target, eventName, handler, subscriber, options as EventListenerOptions);\n  });\n}\n\nfunction setupSubscription<T>(sourceObj: FromEventTarget<T>, eventName: string,\n                              handler: (...args: any[]) => void, subscriber: Subscriber<T>,\n                              options?: EventListenerOptions) {\n  let unsubscribe: () => void;\n  if (isEventTarget(sourceObj)) {\n    const source = sourceObj;\n    sourceObj.addEventListener(eventName, handler, options);\n    unsubscribe = () => source.removeEventListener(eventName, handler, options);\n  } else if (isJQueryStyleEventEmitter(sourceObj)) {\n    const source = sourceObj;\n    sourceObj.on(eventName, handler);\n    unsubscribe = () => source.off(eventName, handler);\n  } else if (isNodeStyleEventEmitter(sourceObj)) {\n    const source = sourceObj;\n    sourceObj.addListener(eventName, handler as NodeEventHandler);\n    unsubscribe = () => source.removeListener(eventName, handler as NodeEventHandler);\n  } else if (sourceObj && (sourceObj as any).length) {\n    for (let i = 0, len = (sourceObj as any).length; i < len; i++) {\n      setupSubscription(sourceObj[i], eventName, handler, subscriber, options);\n    }\n  } else {\n    throw new TypeError('Invalid event target');\n  }\n\n  subscriber.add(unsubscribe);\n}\n\nfunction isNodeStyleEventEmitter(sourceObj: any): sourceObj is NodeStyleEventEmitter {\n  return sourceObj && typeof sourceObj.addListener === 'function' && typeof sourceObj.removeListener === 'function';\n}\n\nfunction isJQueryStyleEventEmitter(sourceObj: any): sourceObj is JQueryStyleEventEmitter {\n  return sourceObj && typeof sourceObj.on === 'function' && typeof sourceObj.off === 'function';\n}\n\nfunction isEventTarget(sourceObj: any): sourceObj is HasEventTargetAddRemove<any> {\n  return sourceObj && typeof sourceObj.addEventListener === 'function' && typeof sourceObj.removeEventListener === 'function';\n}\n","import { Observable } from '../Observable';\nimport { ObservableInput } from '../types';\nimport { isArray } from '../util/isArray';\nimport { EMPTY } from './empty';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { Subscriber } from '../Subscriber';\nimport { map } from '../operators/map';\n\n/* tslint:disable:max-line-length */\n// forkJoin([a$, b$, c$]);\nexport function forkJoin<T>(sources: [ObservableInput<T>]): Observable<T[]>;\nexport function forkJoin<T, T2>(sources: [ObservableInput<T>, ObservableInput<T2>]): Observable<[T, T2]>;\nexport function forkJoin<T, T2, T3>(sources: [ObservableInput<T>, ObservableInput<T2>, ObservableInput<T3>]): Observable<[T, T2, T3]>;\nexport function forkJoin<T, T2, T3, T4>(sources: [ObservableInput<T>, ObservableInput<T2>, ObservableInput<T3>, ObservableInput<T4>]): Observable<[T, T2, T3, T4]>;\nexport function forkJoin<T, T2, T3, T4, T5>(sources: [ObservableInput<T>, ObservableInput<T2>, ObservableInput<T3>, ObservableInput<T4>, ObservableInput<T5>]): Observable<[T, T2, T3, T4, T5]>;\nexport function forkJoin<T, T2, T3, T4, T5, T6>(sources: [ObservableInput<T>, ObservableInput<T2>, ObservableInput<T3>, ObservableInput<T4>, ObservableInput<T5>, ObservableInput<T6>]): Observable<[T, T2, T3, T4, T5, T6]>;\nexport function forkJoin<T>(sources: Array<ObservableInput<T>>): Observable<T[]>;\n\n// forkJoin(a$, b$, c$)\nexport function forkJoin<T>(v1: ObservableInput<T>): Observable<T[]>;\nexport function forkJoin<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>): Observable<[T, T2]>;\nexport function forkJoin<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>): Observable<[T, T2, T3]>;\nexport function forkJoin<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>): Observable<[T, T2, T3, T4]>;\nexport function forkJoin<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>): Observable<[T, T2, T3, T4, T5]>;\nexport function forkJoin<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>): Observable<[T, T2, T3, T4, T5, T6]>;\n\n/** @deprecated resultSelector is deprecated, pipe to map instead */\nexport function forkJoin(...args: Array<ObservableInput<any>|Function>): Observable<any>;\nexport function forkJoin<T>(...sources: ObservableInput<T>[]): Observable<T[]>;\n/* tslint:enable:max-line-length */\n\n/**\n * Joins last values emitted by passed Observables.\n *\n * <span class=\"informal\">Wait for Observables to complete and then combine last values they emitted.</span>\n *\n * ![](forkJoin.png)\n *\n * `forkJoin` is an operator that takes any number of Observables which can be passed either as an array\n * or directly as arguments. If no input Observables are provided, resulting stream will complete\n * immediately.\n *\n * `forkJoin` will wait for all passed Observables to complete and then it will emit an array with last\n * values from corresponding Observables. So if you pass `n` Observables to the operator, resulting\n * array will have `n` values, where first value is the last thing emitted by the first Observable,\n * second value is the last thing emitted by the second Observable and so on. That means `forkJoin` will\n * not emit more than once and it will complete after that. If you need to emit combined values not only\n * at the end of lifecycle of passed Observables, but also throughout it, try out {@link combineLatest}\n * or {@link zip} instead.\n *\n * In order for resulting array to have the same length as the number of input Observables, whenever any of\n * that Observables completes without emitting any value, `forkJoin` will complete at that moment as well\n * and it will not emit anything either, even if it already has some last values from other Observables.\n * Conversely, if there is an Observable that never completes, `forkJoin` will never complete as well,\n * unless at any point some other Observable completes without emitting value, which brings us back to\n * the previous case. Overall, in order for `forkJoin` to emit a value, all Observables passed as arguments\n * have to emit something at least once and complete.\n *\n * If any input Observable errors at some point, `forkJoin` will error as well and all other Observables\n * will be immediately unsubscribed.\n *\n * Optionally `forkJoin` accepts project function, that will be called with values which normally\n * would land in emitted array. Whatever is returned by project function, will appear in output\n * Observable instead. This means that default project can be thought of as a function that takes\n * all its arguments and puts them into an array. Note that project function will be called only\n * when output Observable is supposed to emit a result.\n *\n * ## Examples\n * ### Use forkJoin with operator emitting immediately\n * ```javascript\n * import { forkJoin, of } from 'rxjs';\n *\n * const observable = forkJoin(\n *   of(1, 2, 3, 4),\n *   of(5, 6, 7, 8),\n * );\n * observable.subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('This is how it ends!'),\n * );\n *\n * // Logs:\n * // [4, 8]\n * // \"This is how it ends!\"\n * ```\n *\n * ### Use forkJoin with operator emitting after some time\n * ```javascript\n * import { forkJoin, interval } from 'rxjs';\n * import { take } from 'rxjs/operators';\n *\n * const observable = forkJoin(\n *   interval(1000).pipe(take(3)), // emit 0, 1, 2 every second and complete\n *   interval(500).pipe(take(4)),  // emit 0, 1, 2, 3 every half a second and complete\n * );\n * observable.subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('This is how it ends!'),\n * );\n *\n * // Logs:\n * // [2, 3] after 3 seconds\n * // \"This is how it ends!\" immediately after\n * ```\n *\n * ### Use forkJoin with project function\n * ```javascript\n * import { forkJoin, interval } from 'rxjs';\n * import { take } from 'rxjs/operators';\n *\n * const observable = forkJoin(\n *   interval(1000).pipe(take(3)), // emit 0, 1, 2 every second and complete\n *   interval(500).pipe(take(4)),  // emit 0, 1, 2, 3 every half a second and complete\n * ).pipe(\n *   map(([n, m]) => n + m),\n * );\n * observable.subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('This is how it ends!'),\n * );\n *\n * // Logs:\n * // 5 after 3 seconds\n * // \"This is how it ends!\" immediately after\n * ```\n *\n * @see {@link combineLatest}\n * @see {@link zip}\n *\n * @param {...ObservableInput} sources Any number of Observables provided either as an array or as an arguments\n * passed directly to the operator.\n * @param {function} [project] Function that takes values emitted by input Observables and returns value\n * that will appear in resulting Observable instead of default array.\n * @return {Observable} Observable emitting either an array of last values emitted by passed Observables\n * or value from project function.\n */\nexport function forkJoin<T>(\n  ...sources: Array<ObservableInput<T> | ObservableInput<T>[] | Function>\n): Observable<T[]> {\n\n  let resultSelector: Function;\n  if (typeof sources[sources.length - 1] === 'function') {\n    // DEPRECATED PATH\n    resultSelector = sources.pop() as Function;\n  }\n\n  // if the first and only other argument is an array\n  // assume it's been called with `forkJoin([obs1, obs2, obs3])`\n  if (sources.length === 1 && isArray(sources[0])) {\n    sources = sources[0] as Array<ObservableInput<T>>;\n  }\n\n  if (sources.length === 0) {\n    return EMPTY;\n  }\n\n  if (resultSelector) {\n    // DEPRECATED PATH\n    return forkJoin(sources).pipe(\n      map(args => resultSelector(...args))\n    );\n  }\n\n  return new Observable(subscriber => {\n    return new ForkJoinSubscriber(subscriber, sources as Array<ObservableInput<T>>);\n  });\n}\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass ForkJoinSubscriber<T, R> extends OuterSubscriber<T, T> {\n  private completed = 0;\n  private values: T[];\n  private haveValues = 0;\n\n  constructor(destination: Subscriber<R>,\n              private sources: Array<ObservableInput<T>>) {\n    super(destination);\n\n    const len = sources.length;\n    this.values = new Array(len);\n\n    for (let i = 0; i < len; i++) {\n      const source = sources[i];\n      const innerSubscription = subscribeToResult(this, source, null, i);\n\n      if (innerSubscription) {\n        this.add(innerSubscription);\n      }\n    }\n  }\n\n  notifyNext(outerValue: any, innerValue: T,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, T>): void {\n    this.values[outerIndex] = innerValue;\n    if (!(innerSub as any)._hasValue) {\n      (innerSub as any)._hasValue = true;\n      this.haveValues++;\n    }\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, T>): void {\n    const { destination, haveValues, values } = this;\n    const len = values.length;\n\n    if (!(innerSub as any)._hasValue) {\n      destination.complete();\n      return;\n    }\n\n    this.completed++;\n\n    if (this.completed !== len) {\n      return;\n    }\n\n    if (haveValues === len) {\n      destination.next(values);\n    }\n\n    destination.complete();\n  }\n}\n","import { Observable } from '../Observable';\nimport { SubscribableOrPromise } from '../types';\nimport { from } from './from'; // lol\nimport { empty } from './empty';\n\n/**\n * Creates an Observable that, on subscribe, calls an Observable factory to\n * make an Observable for each new Observer.\n *\n * <span class=\"informal\">Creates the Observable lazily, that is, only when it\n * is subscribed.\n * </span>\n *\n * ![](defer.png)\n *\n * `defer` allows you to create the Observable only when the Observer\n * subscribes, and create a fresh Observable for each Observer. It waits until\n * an Observer subscribes to it, and then it generates an Observable,\n * typically with an Observable factory function. It does this afresh for each\n * subscriber, so although each subscriber may think it is subscribing to the\n * same Observable, in fact each subscriber gets its own individual\n * Observable.\n *\n * ## Example\n * ### Subscribe to either an Observable of clicks or an Observable of interval, at random\n * ```javascript\n * const clicksOrInterval = defer(function () {\n *   return Math.random() > 0.5\n *     ? fromEvent(document, 'click')\n *     : interval(1000);\n * });\n * clicksOrInterval.subscribe(x => console.log(x));\n *\n * // Results in the following behavior:\n * // If the result of Math.random() is greater than 0.5 it will listen\n * // for clicks anywhere on the \"document\"; when document is clicked it\n * // will log a MouseEvent object to the console. If the result is less\n * // than 0.5 it will emit ascending numbers, one every second(1000ms).\n * ```\n *\n * @see {@link Observable}\n *\n * @param {function(): SubscribableOrPromise} observableFactory The Observable\n * factory function to invoke for each Observer that subscribes to the output\n * Observable. May also return a Promise, which will be converted on the fly\n * to an Observable.\n * @return {Observable} An Observable whose Observers' subscriptions trigger\n * an invocation of the given Observable factory function.\n * @static true\n * @name defer\n * @owner Observable\n */\nexport function defer<T>(observableFactory: () => SubscribableOrPromise<T> | void): Observable<T> {\n  return new Observable(subscriber => {\n    let input: SubscribableOrPromise<T> | void;\n    try {\n      input = observableFactory();\n    } catch (err) {\n      subscriber.error(err);\n      return undefined;\n    }\n    const source = input ? from(input) : empty();\n    return source.subscribe(subscriber);\n  });\n}","import { Observable } from '../Observable';\nimport { ObservableInput, SchedulerLike } from '../types';\nimport { isScheduler } from '../util/isScheduler';\nimport { of } from './of';\nimport { from } from './from';\nimport { concatAll } from '../operators/concatAll';\n\n/* tslint:disable:max-line-length */\nexport function concat<T>(v1: ObservableInput<T>, scheduler?: SchedulerLike): Observable<T>;\nexport function concat<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: SchedulerLike): Observable<T | T2>;\nexport function concat<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: SchedulerLike): Observable<T | T2 | T3>;\nexport function concat<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: SchedulerLike): Observable<T | T2 | T3 | T4>;\nexport function concat<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: SchedulerLike): Observable<T | T2 | T3 | T4 | T5>;\nexport function concat<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: SchedulerLike): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function concat<T>(...observables: (ObservableInput<T> | SchedulerLike)[]): Observable<T>;\nexport function concat<T, R>(...observables: (ObservableInput<any> | SchedulerLike)[]): Observable<R>;\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which sequentially emits all values from given\n * Observable and then moves on to the next.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * ![](concat.png)\n *\n * `concat` joins multiple Observables together, by subscribing to them one at a time and\n * merging their results into the output Observable. You can pass either an array of\n * Observables, or put them directly as arguments. Passing an empty array will result\n * in Observable that completes immediately.\n *\n * `concat` will subscribe to first input Observable and emit all its values, without\n * changing or affecting them in any way. When that Observable completes, it will\n * subscribe to then next Observable passed and, again, emit its values. This will be\n * repeated, until the operator runs out of Observables. When last input Observable completes,\n * `concat` will complete as well. At any given moment only one Observable passed to operator\n * emits values. If you would like to emit values from passed Observables concurrently, check out\n * {@link merge} instead, especially with optional `concurrent` parameter. As a matter of fact,\n * `concat` is an equivalent of `merge` operator with `concurrent` parameter set to `1`.\n *\n * Note that if some input Observable never completes, `concat` will also never complete\n * and Observables following the one that did not complete will never be subscribed. On the other\n * hand, if some Observable simply completes immediately after it is subscribed, it will be\n * invisible for `concat`, which will just move on to the next Observable.\n *\n * If any Observable in chain errors, instead of passing control to the next Observable,\n * `concat` will error immediately as well. Observables that would be subscribed after\n * the one that emitted error, never will.\n *\n * If you pass to `concat` the same Observable many times, its stream of values\n * will be \"replayed\" on every subscription, which means you can repeat given Observable\n * as many times as you like. If passing the same Observable to `concat` 1000 times becomes tedious,\n * you can always use {@link repeat}.\n *\n * ## Examples\n * ### Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10\n * ```javascript\n * const timer = interval(1000).pipe(take(4));\n * const sequence = range(1, 10);\n * const result = concat(timer, sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n * ```\n *\n * ### Concatenate an array of 3 Observables\n * ```javascript\n * const timer1 = interval(1000).pipe(take(10));\n * const timer2 = interval(2000).pipe(take(6));\n * const timer3 = interval(500).pipe(take(10));\n * const result = concat([timer1, timer2, timer3]); // note that array is passed\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n * ```\n *\n * ### Concatenate the same Observable to repeat it\n * ```javascript\n * const timer = interval(1000).pipe(take(2));\n * *\n * concat(timer, timer) // concatenating the same Observable!\n * .subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('...and it is done!')\n * );\n *\n * // Logs:\n * // 0 after 1s\n * // 1 after 2s\n * // 0 after 3s\n * // 1 after 4s\n * // \"...and it is done!\" also after 4s\n * ```\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} input1 An input Observable to concatenate with others.\n * @param {ObservableInput} input2 An input Observable to concatenate with others.\n * More than one input Observables may be given as argument.\n * @param {SchedulerLike} [scheduler=null] An optional {@link SchedulerLike} to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @static true\n * @name concat\n * @owner Observable\n */\nexport function concat<T, R>(...observables: Array<ObservableInput<any> | SchedulerLike>): Observable<R> {\n  if (observables.length === 1 || (observables.length === 2 && isScheduler(observables[1]))) {\n    return from(<any>observables[0]);\n  }\n  return concatAll<R>()(of(...observables));\n}\n","\nimport { mergeAll } from './mergeAll';\nimport { OperatorFunction, ObservableInput } from '../types';\n\nexport function concatAll<T>(): OperatorFunction<ObservableInput<T>, T>;\nexport function concatAll<R>(): OperatorFunction<any, R>;\n\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * concatenating the inner Observables in order.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by putting one\n * inner Observable after the other.</span>\n *\n * ![](concatAll.png)\n *\n * Joins every Observable emitted by the source (a higher-order Observable), in\n * a serial fashion. It subscribes to each inner Observable only after the\n * previous inner Observable has completed, and merges all of their values into\n * the returned observable.\n *\n * __Warning:__ If the source Observable emits Observables quickly and\n * endlessly, and the inner Observables it emits generally complete slower than\n * the source emits, you can run into memory issues as the incoming Observables\n * collect in an unbounded buffer.\n *\n * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set\n * to `1`.\n *\n * ## Example\n *\n * For each click event, tick every second from 0 to 3, with no concurrency\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const higherOrder = clicks.pipe(\n *   map(ev => interval(1000).pipe(take(4))),\n * );\n * const firstOrder = higherOrder.pipe(concatAll());\n * firstOrder.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n * ```\n *\n * @see {@link combineAll}\n * @see {@link concat}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switchAll}\n * @see {@link switchMap}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable emitting values from all the inner\n * Observables concatenated.\n * @method concatAll\n * @owner Observable\n */\nexport function concatAll<T>(): OperatorFunction<ObservableInput<T>, T> {\n  return mergeAll<T>(1);\n}\n","\nimport { mergeMap } from './mergeMap';\nimport { identity } from '../util/identity';\nimport { MonoTypeOperatorFunction, OperatorFunction, ObservableInput } from '../types';\n\nexport function mergeAll<T>(concurrent?: number): OperatorFunction<ObservableInput<T>, T>;\n\n/**\n * Converts a higher-order Observable into a first-order Observable which\n * concurrently delivers all values that are emitted on the inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\n *\n * ![](mergeAll.png)\n *\n * `mergeAll` subscribes to an Observable that emits Observables, also known as\n * a higher-order Observable. Each time it observes one of these emitted inner\n * Observables, it subscribes to that and delivers all the values from the\n * inner Observable on the output Observable. The output Observable only\n * completes once all inner Observables have completed. Any error delivered by\n * a inner Observable will be immediately emitted on the output Observable.\n *\n * ## Examples\n * Spawn a new interval Observable for each click event, and blend their outputs as one Observable\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const higherOrder = clicks.pipe(map((ev) => interval(1000)));\n * const firstOrder = higherOrder.pipe(mergeAll());\n * firstOrder.subscribe(x => console.log(x));\n * ```\n *\n * Count from 0 to 9 every second for each click, but only allow 2 concurrent timers\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const higherOrder = clicks.pipe(\n *   map((ev) => interval(1000).pipe(take(10))),\n * );\n * const firstOrder = higherOrder.pipe(mergeAll(2));\n * firstOrder.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link merge}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchAll}\n * @see {@link switchMap}\n * @see {@link zipAll}\n *\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits values coming from all the\n * inner Observables emitted by the source Observable.\n * @method mergeAll\n * @owner Observable\n */\nexport function mergeAll<T>(concurrent: number = Number.POSITIVE_INFINITY): MonoTypeOperatorFunction<T> {\n  return mergeMap<T, T>(identity as (value: T, index: number) => ObservableInput<T>, concurrent);\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { ObservableInput, OperatorFunction } from '../types';\nimport { map } from './map';\nimport { from } from '../observable/from';\n\n/* tslint:disable:max-line-length */\nexport function mergeMap<T, R>(project: (value: T, index: number) => ObservableInput<R>, concurrent?: number): OperatorFunction<T, R>;\n/** @deprecated resultSelector no longer supported, use inner map instead */\nexport function mergeMap<T, R>(project: (value: T, index: number) => ObservableInput<R>, resultSelector: undefined, concurrent?: number): OperatorFunction<T, R>;\n/** @deprecated resultSelector no longer supported, use inner map instead */\nexport function mergeMap<T, I, R>(project: (value: T, index: number) => ObservableInput<I>, resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R, concurrent?: number): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * ![](mergeMap.png)\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * ## Example\n * Map and flatten each letter to an Observable ticking every 1 second\n * ```javascript\n * const letters = of('a', 'b', 'c');\n * const result = letters.pipe(\n *   mergeMap(x => interval(1000).pipe(map(i => x+i))),\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a,b,c with respective ascending integers\n * ```\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional deprecated `resultSelector`) to each item\n * emitted by the source Observable and merging the results of the Observables\n * obtained from this transformation.\n * @method mergeMap\n * @owner Observable\n */\nexport function mergeMap<T, I, R>(\n  project: (value: T, index: number) => ObservableInput<I>,\n  resultSelector?: ((outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R) | number,\n  concurrent: number = Number.POSITIVE_INFINITY\n): OperatorFunction<T, I|R> {\n  if (typeof resultSelector === 'function') {\n    // DEPRECATED PATH\n    return (source: Observable<T>) => source.pipe(\n      mergeMap((a, i) => from(project(a, i)).pipe(\n        map((b, ii) => resultSelector(a, b, i, ii)),\n      ), concurrent)\n    );\n  } else if (typeof resultSelector === 'number') {\n    concurrent = resultSelector;\n  }\n  return (source: Observable<T>) => source.lift(new MergeMapOperator(project, concurrent));\n}\n\nexport class MergeMapOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => ObservableInput<R>,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n  }\n\n  call(observer: Subscriber<R>, source: any): any {\n    return source.subscribe(new MergeMapSubscriber(\n      observer, this.project, this.concurrent\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class MergeMapSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private hasCompleted: boolean = false;\n  private buffer: T[] = [];\n  private active: number = 0;\n  protected index: number = 0;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => ObservableInput<R>,\n              private concurrent: number = Number.POSITIVE_INFINITY) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    if (this.active < this.concurrent) {\n      this._tryNext(value);\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  protected _tryNext(value: T) {\n    let result: ObservableInput<R>;\n    const index = this.index++;\n    try {\n      result = this.project(value, index);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.active++;\n    this._innerSub(result, value, index);\n  }\n\n  private _innerSub(ish: ObservableInput<R>, value: T, index: number): void {\n    const innerSubscriber = new InnerSubscriber(this, undefined, undefined);\n    const destination = this.destination as Subscription;\n    destination.add(innerSubscriber);\n    subscribeToResult<T, R>(this, ish, value, index, innerSubscriber);\n  }\n\n  protected _complete(): void {\n    this.hasCompleted = true;\n    if (this.active === 0 && this.buffer.length === 0) {\n      this.destination.complete();\n    }\n    this.unsubscribe();\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(innerValue);\n  }\n\n  notifyComplete(innerSub: Subscription): void {\n    const buffer = this.buffer;\n    this.remove(innerSub);\n    this.active--;\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      this.destination.complete();\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { isPromise } from '../util/isPromise';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isInteropObservable } from '../util/isInteropObservable';\nimport { isIterable } from '../util/isIterable';\nimport { fromArray } from './fromArray';\nimport { fromPromise } from './fromPromise';\nimport { fromIterable } from './fromIterable';\nimport { fromObservable } from './fromObservable';\nimport { subscribeTo } from '../util/subscribeTo';\nimport { ObservableInput, SchedulerLike } from '../types';\n\nexport function from<T>(input: ObservableInput<T>, scheduler?: SchedulerLike): Observable<T>;\nexport function from<T>(input: ObservableInput<ObservableInput<T>>, scheduler?: SchedulerLike): Observable<Observable<T>>;\n\n/**\n * Creates an Observable from an Array, an array-like object, a Promise, an iterable object, or an Observable-like object.\n *\n * <span class=\"informal\">Converts almost anything to an Observable.</span>\n *\n * ![](from.png)\n *\n * `from` converts various other objects and data types into Observables. It also converts a Promise, an array-like, or an\n * <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable\" target=\"_blank\">iterable</a>\n * object into an Observable that emits the items in that promise, array, or iterable. A String, in this context, is treated\n * as an array of characters. Observable-like objects (contains a function named with the ES2015 Symbol for Observable) can also be\n * converted through this operator.\n *\n * ## Examples\n * ### Converts an array to an Observable\n * ```javascript\n * import { from } from 'rxjs/observable/from';\n *\n * const array = [10, 20, 30];\n * const result = from(array);\n *\n * result.subscribe(x => console.log(x));\n *\n * // Logs:\n * // 10 20 30\n * ```\n *\n * ---\n *\n * ### Convert an infinite iterable (from a generator) to an Observable\n * ```javascript\n * import { take } from 'rxjs/operators';\n * import { from } from 'rxjs/observable/from';\n *\n * function* generateDoubles(seed) {\n *    let i = seed;\n *    while (true) {\n *      yield i;\n *      i = 2 * i; // double it\n *    }\n * }\n *\n * const iterator = generateDoubles(3);\n * const result = from(iterator).pipe(take(10));\n *\n * result.subscribe(x => console.log(x));\n *\n * // Logs:\n * // 3 6 12 24 48 96 192 384 768 1536\n * ```\n *\n * ---\n *\n * ### with async scheduler\n * ```javascript\n * import { from } from 'rxjs/observable/from';\n * import { async } from 'rxjs/scheduler/async';\n *\n * console.log('start');\n *\n * const array = [10, 20, 30];\n * const result = from(array, async);\n *\n * result.subscribe(x => console.log(x));\n *\n * console.log('end');\n *\n * // Logs:\n * // start end 10 20 30\n * ```\n *\n * @see {@link fromEvent}\n * @see {@link fromEventPattern}\n * @see {@link fromPromise}\n *\n * @param {ObservableInput<T>} A subscription object, a Promise, an Observable-like,\n * an Array, an iterable, or an array-like object to be converted.\n * @param {SchedulerLike} An optional {@link SchedulerLike} on which to schedule the emission of values.\n * @return {Observable<T>}\n * @name from\n * @owner Observable\n */\n\nexport function from<T>(input: ObservableInput<T>, scheduler?: SchedulerLike): Observable<T> {\n  if (!scheduler) {\n    if (input instanceof Observable) {\n      return input;\n    }\n    return new Observable<T>(subscribeTo(input));\n  }\n\n  if (input != null) {\n    if (isInteropObservable(input)) {\n      return fromObservable(input, scheduler);\n    } else if (isPromise(input)) {\n      return fromPromise(input, scheduler);\n    } else if (isArrayLike(input)) {\n      return fromArray(input, scheduler);\n    }  else if (isIterable(input) || typeof input === 'string') {\n      return fromIterable(input, scheduler);\n    }\n  }\n\n  throw new TypeError((input !== null && typeof input || input) + ' is not observable');\n}\n","import { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { observable as Symbol_observable } from '../symbol/observable';\nimport { subscribeToObservable } from '../util/subscribeToObservable';\nimport { InteropObservable, SchedulerLike, Subscribable } from '../types';\n\nexport function fromObservable<T>(input: InteropObservable<T>, scheduler: SchedulerLike) {\n  if (!scheduler) {\n    return new Observable<T>(subscribeToObservable(input));\n  } else {\n    return new Observable<T>(subscriber => {\n      const sub = new Subscription();\n      sub.add(scheduler.schedule(() => {\n        const observable: Subscribable<T> = input[Symbol_observable]();\n        sub.add(observable.subscribe({\n          next(value) { sub.add(scheduler.schedule(() => subscriber.next(value))); },\n          error(err) { sub.add(scheduler.schedule(() => subscriber.error(err))); },\n          complete() { sub.add(scheduler.schedule(() => subscriber.complete())); },\n        }));\n      }));\n      return sub;\n    });\n  }\n}\n","import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\nimport { Subscription } from '../Subscription';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { subscribeToIterable } from '../util/subscribeToIterable';\n\nexport function fromIterable<T>(input: Iterable<T>, scheduler: SchedulerLike) {\n  if (!input) {\n    throw new Error('Iterable cannot be null');\n  }\n  if (!scheduler) {\n    return new Observable<T>(subscribeToIterable(input));\n  } else {\n    return new Observable<T>(subscriber => {\n      const sub = new Subscription();\n      let iterator: Iterator<T>;\n      sub.add(() => {\n        // Finalize generators\n        if (iterator && typeof iterator.return === 'function') {\n          iterator.return();\n        }\n      });\n      sub.add(scheduler.schedule(() => {\n        iterator = input[Symbol_iterator]();\n        sub.add(scheduler.schedule(function () {\n          if (subscriber.closed) {\n            return;\n          }\n          let value: T;\n          let done: boolean;\n          try {\n            const result = iterator.next();\n            value = result.value;\n            done = result.done;\n          } catch (err) {\n            subscriber.error(err);\n            return;\n          }\n          if (done) {\n            subscriber.complete();\n          } else {\n            subscriber.next(value);\n            this.schedule();\n          }\n        }));\n      }));\n      return sub;\n    });\n  }\n}\n","import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\nimport { Subscription } from '../Subscription';\nimport { subscribeToPromise } from '../util/subscribeToPromise';\n\nexport function fromPromise<T>(input: PromiseLike<T>, scheduler?: SchedulerLike) {\n  if (!scheduler) {\n    return new Observable<T>(subscribeToPromise(input));\n  } else {\n    return new Observable<T>(subscriber => {\n      const sub = new Subscription();\n      sub.add(scheduler.schedule(() => input.then(\n        value => {\n          sub.add(scheduler.schedule(() => {\n            subscriber.next(value);\n            sub.add(scheduler.schedule(() => subscriber.complete()));\n          }));\n        },\n        err => {\n          sub.add(scheduler.schedule(() => subscriber.error(err)));\n        }\n      )));\n      return sub;\n    });\n  }\n}\n","import { iterator as Symbol_iterator } from '../symbol/iterator';\n\n/** Identifies an input as being an Iterable */\nexport function isIterable(input: any): input is Iterable<any> {\n  return input && typeof input[Symbol_iterator] === 'function';\n}\n","import { InteropObservable } from '../types';\nimport { observable as Symbol_observable } from '../symbol/observable';\n\n/** Identifies an input as being Observable (but not necessary an Rx Observable) */\nexport function isInteropObservable(input: any): input is InteropObservable<any> {\n  return input && typeof input[Symbol_observable] === 'function';\n}\n","import { Observable } from '../Observable';\nimport { ObservableInput, SchedulerLike } from '../types';\nimport { isScheduler  } from '../util/isScheduler';\nimport { isArray  } from '../util/isArray';\nimport { Subscriber } from '../Subscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { Operator } from '../Operator';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { fromArray } from './fromArray';\n\nconst NONE = {};\n\n/* tslint:disable:max-line-length */\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport function combineLatest<T, R>(v1: ObservableInput<T>, resultSelector: (v1: T) => R, scheduler?: SchedulerLike): Observable<R>;\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport function combineLatest<T, T2, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, resultSelector: (v1: T, v2: T2) => R, scheduler?: SchedulerLike): Observable<R>;\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport function combineLatest<T, T2, T3, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, resultSelector: (v1: T, v2: T2, v3: T3) => R, scheduler?: SchedulerLike): Observable<R>;\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport function combineLatest<T, T2, T3, T4, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, resultSelector: (v1: T, v2: T2, v3: T3, v4: T4) => R, scheduler?: SchedulerLike): Observable<R>;\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport function combineLatest<T, T2, T3, T4, T5, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, resultSelector: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5) => R, scheduler?: SchedulerLike): Observable<R>;\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport function combineLatest<T, T2, T3, T4, T5, T6, R>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, resultSelector: (v1: T, v2: T2, v3: T3, v4: T4, v5: T5, v6: T6) => R, scheduler?: SchedulerLike): Observable<R>;\n\nexport function combineLatest<T, T2>(v1: ObservableInput<T>, v2: ObservableInput<T2>, scheduler?: SchedulerLike): Observable<[T, T2]>;\nexport function combineLatest<T, T2, T3>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, scheduler?: SchedulerLike): Observable<[T, T2, T3]>;\nexport function combineLatest<T, T2, T3, T4>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, scheduler?: SchedulerLike): Observable<[T, T2, T3, T4]>;\nexport function combineLatest<T, T2, T3, T4, T5>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, scheduler?: SchedulerLike): Observable<[T, T2, T3, T4, T5]>;\nexport function combineLatest<T, T2, T3, T4, T5, T6>(v1: ObservableInput<T>, v2: ObservableInput<T2>, v3: ObservableInput<T3>, v4: ObservableInput<T4>, v5: ObservableInput<T5>, v6: ObservableInput<T6>, scheduler?: SchedulerLike): Observable<[T, T2, T3, T4, T5, T6]>;\n\nexport function combineLatest<T>(array: ObservableInput<T>[], scheduler?: SchedulerLike): Observable<T[]>;\nexport function combineLatest<R>(array: ObservableInput<any>[], scheduler?: SchedulerLike): Observable<R>;\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport function combineLatest<T, R>(array: ObservableInput<T>[], resultSelector: (...values: Array<T>) => R, scheduler?: SchedulerLike): Observable<R>;\n/** @deprecated resultSelector no longer supported, pipe to map instead */\nexport function combineLatest<R>(array: ObservableInput<any>[], resultSelector: (...values: Array<any>) => R, scheduler?: SchedulerLike): Observable<R>;\nexport function combineLatest<T>(...observables: Array<ObservableInput<T> | SchedulerLike>): Observable<T[]>;\nexport function combineLatest<T, R>(...observables: Array<ObservableInput<T> | ((...values: Array<T>) => R) | SchedulerLike>): Observable<R>;\nexport function combineLatest<R>(...observables: Array<ObservableInput<any> | ((...values: Array<any>) => R) | SchedulerLike>): Observable<R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * ![](combineLatest.png)\n *\n * `combineLatest` combines the values from all the Observables passed as\n * arguments. This is done by subscribing to each Observable in order and,\n * whenever any Observable emits, collecting an array of the most recent\n * values from each Observable. So if you pass `n` Observables to operator,\n * returned Observable will always emit an array of `n` values, in order\n * corresponding to order of passed Observables (value from the first Observable\n * on the first place and so on).\n *\n * Static version of `combineLatest` accepts either an array of Observables\n * or each Observable can be put directly as an argument. Note that array of\n * Observables is good choice, if you don't know beforehand how many Observables\n * you will combine. Passing empty array will result in Observable that\n * completes immediately.\n *\n * To ensure output array has always the same length, `combineLatest` will\n * actually wait for all input Observables to emit at least once,\n * before it starts emitting results. This means if some Observable emits\n * values before other Observables started emitting, all these values but the last\n * will be lost. On the other hand, if some Observable does not emit a value but\n * completes, resulting Observable will complete at the same moment without\n * emitting anything, since it will be now impossible to include value from\n * completed Observable in resulting array. Also, if some input Observable does\n * not emit any value and never completes, `combineLatest` will also never emit\n * and never complete, since, again, it will wait for all streams to emit some\n * value.\n *\n * If at least one Observable was passed to `combineLatest` and all passed Observables\n * emitted something, resulting Observable will complete when all combined\n * streams complete. So even if some Observable completes, result of\n * `combineLatest` will still emit values when other Observables do. In case\n * of completed Observable, its value from now on will always be the last\n * emitted value. On the other hand, if any Observable errors, `combineLatest`\n * will error immediately as well, and all other Observables will be unsubscribed.\n *\n * `combineLatest` accepts as optional parameter `project` function, which takes\n * as arguments all values that would normally be emitted by resulting Observable.\n * `project` can return any kind of value, which will be then emitted by Observable\n * instead of default array. Note that `project` does not take as argument that array\n * of values, but values themselves. That means default `project` can be imagined\n * as function that takes all its arguments and puts them into an array.\n *\n * ## Examples\n * ### Combine two timer Observables\n * ```javascript\n * const firstTimer = timer(0, 1000); // emit 0, 1, 2... after every second, starting from now\n * const secondTimer = timer(500, 1000); // emit 0, 1, 2... after every second, starting 0,5s from now\n * const combinedTimers = combineLatest(firstTimer, secondTimer);\n * combinedTimers.subscribe(value => console.log(value));\n * // Logs\n * // [0, 0] after 0.5s\n * // [1, 0] after 1s\n * // [1, 1] after 1.5s\n * // [2, 1] after 2s\n * ```\n *\n * ### Combine an array of Observables\n * ```javascript\n * const observables = [1, 5, 10].map(\n *   n => of(n).pipe(\n *     delay(n * 1000),   // emit 0 and then emit n after n seconds\n *     startWith(0),\n *   )\n * );\n * const combined = combineLatest(observables);\n * combined.subscribe(value => console.log(value));\n * // Logs\n * // [0, 0, 0] immediately\n * // [1, 0, 0] after 1s\n * // [1, 5, 0] after 5s\n * // [1, 5, 10] after 10s\n * ```\n *\n *\n * ### Use project function to dynamically calculate the Body-Mass Index\n * ```javascript\n * * const weight = of(70, 72, 76, 79, 75);\n * const height = of(1.76, 1.77, 1.78);\n * const bmi = combineLatest(weight, height).pipe(\n *   map(([w, h]) => w / (h * h)),\n * );\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n * ```\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} observable1 An input Observable to combine with other Observables.\n * @param {ObservableInput} observable2 An input Observable to combine with other Observables.\n * More than one input Observables may be given as arguments\n * or an array of Observables may be given as the first argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @param {SchedulerLike} [scheduler=null] The {@link SchedulerLike} to use for subscribing to\n * each input Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n */\nexport function combineLatest<T, R>(...observables: Array<any | ObservableInput<any> |\n                                                    Array<ObservableInput<any>> |\n                                                    (((...values: Array<any>) => R)) |\n                                                    SchedulerLike>): Observable<R> {\n  let resultSelector: (...values: Array<any>) => R =  null;\n  let scheduler: SchedulerLike = null;\n\n  if (isScheduler(observables[observables.length - 1])) {\n    scheduler = <SchedulerLike>observables.pop();\n  }\n\n  if (typeof observables[observables.length - 1] === 'function') {\n    resultSelector = <(...values: Array<any>) => R>observables.pop();\n  }\n\n  // if the first and only other argument besides the resultSelector is an array\n  // assume it's been called with `combineLatest([obs1, obs2, obs3], resultSelector)`\n  if (observables.length === 1 && isArray(observables[0])) {\n    observables = <Array<Observable<any>>>observables[0];\n  }\n\n  return fromArray(observables, scheduler).lift(new CombineLatestOperator<T, R>(resultSelector));\n}\n\nexport class CombineLatestOperator<T, R> implements Operator<T, R> {\n  constructor(private resultSelector?: (...values: Array<any>) => R) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new CombineLatestSubscriber(subscriber, this.resultSelector));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class CombineLatestSubscriber<T, R> extends OuterSubscriber<T, R> {\n  private active: number = 0;\n  private values: any[] = [];\n  private observables: any[] = [];\n  private toRespond: number;\n\n  constructor(destination: Subscriber<R>, private resultSelector?: (...values: Array<any>) => R) {\n    super(destination);\n  }\n\n  protected _next(observable: any) {\n    this.values.push(NONE);\n    this.observables.push(observable);\n  }\n\n  protected _complete() {\n    const observables = this.observables;\n    const len = observables.length;\n    if (len === 0) {\n      this.destination.complete();\n    } else {\n      this.active = len;\n      this.toRespond = len;\n      for (let i = 0; i < len; i++) {\n        const observable = observables[i];\n        this.add(subscribeToResult(this, observable, observable, i));\n      }\n    }\n  }\n\n  notifyComplete(unused: Subscriber<R>): void {\n    if ((this.active -= 1) === 0) {\n      this.destination.complete();\n    }\n  }\n\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    const values = this.values;\n    const oldVal = values[outerIndex];\n    const toRespond = !this.toRespond\n      ? 0\n      : oldVal === NONE ? --this.toRespond : this.toRespond;\n    values[outerIndex] = innerValue;\n\n    if (toRespond === 0) {\n      if (this.resultSelector) {\n        this._tryResultSelector(values);\n      } else {\n        this.destination.next(values.slice());\n      }\n    }\n  }\n\n  private _tryResultSelector(values: any[]) {\n    let result: any;\n    try {\n      result = this.resultSelector.apply(this, values);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","import { ObservableInput } from '../types';\nimport { Subscription } from '../Subscription';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { Subscriber } from '../Subscriber';\nimport { subscribeTo } from './subscribeTo';\n\nexport function subscribeToResult<T, R>(\n  outerSubscriber: OuterSubscriber<T, R>,\n  result: any,\n  outerValue?: T,\n  outerIndex?: number,\n  destination?: Subscriber<any>\n): Subscription;\nexport function subscribeToResult<T, R>(\n  outerSubscriber: OuterSubscriber<T, R>,\n  result: any,\n  outerValue?: T,\n  outerIndex?: number,\n  destination: Subscriber<any> = new InnerSubscriber(outerSubscriber, outerValue, outerIndex)\n): Subscription | void {\n  if (destination.closed) {\n    return;\n  }\n  return subscribeTo(result)(destination);\n}\n","import { Observable } from '../Observable';\nimport { ObservableInput } from '../types';\nimport { subscribeToArray } from './subscribeToArray';\nimport { subscribeToPromise } from './subscribeToPromise';\nimport { subscribeToIterable } from './subscribeToIterable';\nimport { subscribeToObservable } from './subscribeToObservable';\nimport { isArrayLike } from './isArrayLike';\nimport { isPromise } from './isPromise';\nimport { isObject } from './isObject';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { observable as Symbol_observable } from '../symbol/observable';\nimport { Subscriber } from '../Subscriber';\n\nexport const subscribeTo = <T>(result: ObservableInput<T>) => {\n  if (result instanceof Observable) {\n    return (subscriber: Subscriber<T>) => {\n        if (result._isScalar) {\n        subscriber.next((result as any).value);\n        subscriber.complete();\n        return undefined;\n      } else {\n        return result.subscribe(subscriber);\n      }\n    };\n  } else if (result && typeof result[Symbol_observable] === 'function') {\n    return subscribeToObservable(result as any);\n  } else if (isArrayLike(result)) {\n    return subscribeToArray(result);\n  } else if (isPromise(result)) {\n    return subscribeToPromise(result as Promise<any>);\n  } else if (result && typeof result[Symbol_iterator] === 'function') {\n    return subscribeToIterable(result as any);\n  } else {\n    const value = isObject(result) ? 'an invalid object' : `'${result}'`;\n    const msg = `You provided ${value} where a stream was expected.`\n      + ' You can provide an Observable, Promise, Array, or Iterable.';\n    throw new TypeError(msg);\n  }\n};\n","export function isPromise(value: any): value is PromiseLike<any> {\n  return value && typeof (<any>value).subscribe !== 'function' && typeof (value as any).then === 'function';\n}\n","export const isArrayLike = (<T>(x: any): x is ArrayLike<T> => x && typeof x.length === 'number' && typeof x !== 'function');","import { Subscriber } from '../Subscriber';\nimport { observable as Symbol_observable } from '../symbol/observable';\n\n/**\n * Subscribes to an object that implements Symbol.observable with the given\n * Subscriber.\n * @param obj An object that implements Symbol.observable\n */\nexport const subscribeToObservable = <T>(obj: any) => (subscriber: Subscriber<T>) => {\n  const obs = obj[Symbol_observable]();\n  if (typeof obs.subscribe !== 'function') {\n    // Should be caught by observable subscribe function error handling.\n    throw new TypeError('Provided object does not correctly implement Symbol.observable');\n  } else {\n    return obs.subscribe(subscriber);\n  }\n};\n","import { Subscriber } from '../Subscriber';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\n\nexport const subscribeToIterable = <T>(iterable: Iterable<T>) => (subscriber: Subscriber<T>) => {\n  const iterator = iterable[Symbol_iterator]();\n  do {\n    const item = iterator.next();\n    if (item.done) {\n      subscriber.complete();\n      break;\n    }\n    subscriber.next(item.value);\n    if (subscriber.closed) {\n      break;\n    }\n  } while (true);\n\n  // Finalize the iterator if it happens to be a Generator\n  if (typeof iterator.return === 'function') {\n    subscriber.add(() => {\n      if (iterator.return) {\n        iterator.return();\n      }\n    });\n  }\n\n  return subscriber;\n};\n","export function getSymbolIterator(): symbol {\n  if (typeof Symbol !== 'function' || !Symbol.iterator) {\n    return '@@iterator' as any;\n  }\n\n  return Symbol.iterator;\n}\n\nexport const iterator = getSymbolIterator();\n\n/**\n * @deprecated use {@link iterator} instead\n */\nexport const $$iterator = iterator;\n","import { Subscriber } from '../Subscriber';\nimport { hostReportError } from './hostReportError';\n\nexport const subscribeToPromise = <T>(promise: PromiseLike<T>) => (subscriber: Subscriber<T>) => {\n  promise.then(\n    (value) => {\n      if (!subscriber.closed) {\n        subscriber.next(value);\n        subscriber.complete();\n      }\n    },\n    (err: any) => subscriber.error(err)\n  )\n  .then(null, hostReportError);\n  return subscriber;\n};\n","import { Subscriber } from './Subscriber';\nimport { OuterSubscriber } from './OuterSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class InnerSubscriber<T, R> extends Subscriber<R> {\n  private index = 0;\n\n  constructor(private parent: OuterSubscriber<T, R>, public outerValue: T, public outerIndex: number) {\n    super();\n  }\n\n  protected _next(value: R): void {\n    this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);\n  }\n\n  protected _error(error: any): void {\n    this.parent.notifyError(error, this);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.parent.notifyComplete(this);\n    this.unsubscribe();\n  }\n}\n","import { Subscriber } from './Subscriber';\nimport { InnerSubscriber } from './InnerSubscriber';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class OuterSubscriber<T, R> extends Subscriber<T> {\n  notifyNext(outerValue: T, innerValue: R,\n             outerIndex: number, innerIndex: number,\n             innerSub: InnerSubscriber<T, R>): void {\n    this.destination.next(innerValue);\n  }\n\n  notifyError(error: any, innerSub: InnerSubscriber<T, R>): void {\n    this.destination.error(error);\n  }\n\n  notifyComplete(innerSub: InnerSubscriber<T, R>): void {\n    this.destination.complete();\n  }\n}\n","import { Observable } from '../Observable';\nimport { AsyncSubject } from '../AsyncSubject';\nimport { Subscriber } from '../Subscriber';\nimport { SchedulerAction, SchedulerLike } from '../types';\nimport { map } from '../operators/map';\nimport { canReportError } from '../util/canReportError';\nimport { isScheduler } from '../util/isScheduler';\nimport { isArray } from '../util/isArray';\n\n/* tslint:disable:max-line-length */\n/** @deprecated resultSelector is deprecated, pipe to map instead */\nexport function bindNodeCallback(callbackFunc: Function, resultSelector: Function, scheduler?: SchedulerLike): (...args: any[]) => Observable<any>;\n\nexport function bindNodeCallback<R1, R2, R3, R4>(callbackFunc: (callback: (err: any, res1: R1, res2: R2, res3: R3, res4: R4, ...args: any[]) => any) => any, scheduler?: SchedulerLike): (...args: any[]) => Observable<any[]>;\nexport function bindNodeCallback<R1, R2, R3>(callbackFunc: (callback: (err: any, res1: R1, res2: R2, res3: R3) => any) => any, scheduler?: SchedulerLike): () => Observable<[R1, R2, R3]>;\nexport function bindNodeCallback<R1, R2>(callbackFunc: (callback: (err: any, res1: R1, res2: R2) => any) => any, scheduler?: SchedulerLike): () => Observable<[R1, R2]>;\nexport function bindNodeCallback<R1>(callbackFunc: (callback: (err: any, res1: R1) => any) => any, scheduler?: SchedulerLike): () => Observable<R1>;\nexport function bindNodeCallback(callbackFunc: (callback: (err: any) => any) => any, scheduler?: SchedulerLike): () => Observable<void>;\n\nexport function bindNodeCallback<A1, R1, R2, R3, R4>(callbackFunc: (arg1: A1, callback: (err: any, res1: R1, res2: R2, res3: R3, res4: R4, ...args: any[]) => any) => any, scheduler?: SchedulerLike): (...args: any[]) => Observable<any[]>;\nexport function bindNodeCallback<A1, R1, R2, R3>(callbackFunc: (arg1: A1, callback: (err: any, res1: R1, res2: R2, res3: R3) => any) => any, scheduler?: SchedulerLike): (arg1: A1) => Observable<[R1, R2, R3]>;\nexport function bindNodeCallback<A1, R1, R2>(callbackFunc: (arg1: A1, callback: (err: any, res1: R1, res2: R2) => any) => any, scheduler?: SchedulerLike): (arg1: A1) => Observable<[R1, R2]>;\nexport function bindNodeCallback<A1, R1>(callbackFunc: (arg1: A1, callback: (err: any, res1: R1) => any) => any, scheduler?: SchedulerLike): (arg1: A1) => Observable<R1>;\nexport function bindNodeCallback<A1>(callbackFunc: (arg1: A1, callback: (err: any) => any) => any, scheduler?: SchedulerLike): (arg1: A1) => Observable<void>;\n\nexport function bindNodeCallback<A1, A2, R1, R2, R3, R4>(callbackFunc: (arg1: A1, arg2: A2, callback: (err: any, res1: R1, res2: R2, res3: R3, res4: R4, ...args: any[]) => any) => any, scheduler?: SchedulerLike): (...args: any[]) => Observable<any[]>;\nexport function bindNodeCallback<A1, A2, R1, R2, R3>(callbackFunc: (arg1: A1, arg2: A2, callback: (err: any, res1: R1, res2: R2, res3: R3) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2) => Observable<[R1, R2, R3]>;\nexport function bindNodeCallback<A1, A2, R1, R2>(callbackFunc: (arg1: A1, arg2: A2, callback: (err: any, res1: R1, res2: R2) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2) => Observable<[R1, R2]>;\nexport function bindNodeCallback<A1, A2, R1>(callbackFunc: (arg1: A1, arg2: A2, callback: (err: any, res1: R1) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2) => Observable<R1>;\nexport function bindNodeCallback<A1, A2>(callbackFunc: (arg1: A1, arg2: A2, callback: (err: any) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2) => Observable<void>;\n\nexport function bindNodeCallback<A1, A2, A3, R1, R2, R3, R4>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, callback: (err: any, res1: R1, res2: R2, res3: R3, res4: R4, ...args: any[]) => any) => any, scheduler?: SchedulerLike): (...args: any[]) => Observable<any[]>;\nexport function bindNodeCallback<A1, A2, A3, R1, R2, R3>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, callback: (err: any, res1: R1, res2: R2, res3: R3) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3) => Observable<[R1, R2, R3]>;\nexport function bindNodeCallback<A1, A2, A3, R1, R2>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, callback: (err: any, res1: R1, res2: R2) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3) => Observable<[R1, R2]>;\nexport function bindNodeCallback<A1, A2, A3, R1>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, callback: (err: any, res1: R1) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3) => Observable<R1>;\nexport function bindNodeCallback<A1, A2, A3>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, callback: (err: any) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3) => Observable<void>;\n\nexport function bindNodeCallback<A1, A2, A3, A4, R1, R2, R3, R4>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, callback: (err: any, res1: R1, res2: R2, res3: R3, res4: R4, ...args: any[]) => any) => any, scheduler?: SchedulerLike): (...args: any[]) => Observable<any[]>;\nexport function bindNodeCallback<A1, A2, A3, A4, R1, R2, R3>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, callback: (err: any, res1: R1, res2: R2, res3: R3) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4) => Observable<[R1, R2, R3]>;\nexport function bindNodeCallback<A1, A2, A3, A4, R1, R2>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, callback: (err: any, res1: R1, res2: R2) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4) => Observable<[R1, R2]>;\nexport function bindNodeCallback<A1, A2, A3, A4, R1>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, callback: (err: any, res1: R1) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4) => Observable<R1>;\nexport function bindNodeCallback<A1, A2, A3, A4>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, callback: (err: any) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4) => Observable<void>;\n\nexport function bindNodeCallback<A1, A2, A3, A4, A5, R1, R2, R3, R4>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5, callback: (err: any, res1: R1, res2: R2, res3: R3, res4: R4, ...args: any[]) => any) => any, scheduler?: SchedulerLike): (...args: any[]) => Observable<any[]>;\nexport function bindNodeCallback<A1, A2, A3, A4, A5, R1, R2, R3>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5, callback: (err: any, res1: R1, res2: R2, res3: R3) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5) => Observable<[R1, R2, R3]>;\nexport function bindNodeCallback<A1, A2, A3, A4, A5, R1, R2>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5, callback: (err: any, res1: R1, res2: R2) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5) => Observable<[R1, R2]>;\nexport function bindNodeCallback<A1, A2, A3, A4, A5, R1>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5, callback: (err: any, res1: R1) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5) => Observable<R1>;\nexport function bindNodeCallback<A1, A2, A3, A4, A5>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5, callback: (err: any) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5) => Observable<void>; /* tslint:enable:max-line-length */\n\nexport function bindNodeCallback(callbackFunc: Function, scheduler?: SchedulerLike): (...args: any[]) => Observable<any[]>;\n/**\n * Converts a Node.js-style callback API to a function that returns an\n * Observable.\n *\n * <span class=\"informal\">It's just like {@link bindCallback}, but the\n * callback is expected to be of type `callback(error, result)`.</span>\n *\n * `bindNodeCallback` is not an operator because its input and output are not\n * Observables. The input is a function `func` with some parameters, but the\n * last parameter must be a callback function that `func` calls when it is\n * done. The callback function is expected to follow Node.js conventions,\n * where the first argument to the callback is an error object, signaling\n * whether call was successful. If that object is passed to callback, it means\n * something went wrong.\n *\n * The output of `bindNodeCallback` is a function that takes the same\n * parameters as `func`, except the last one (the callback). When the output\n * function is called with arguments, it will return an Observable.\n * If `func` calls its callback with error parameter present, Observable will\n * error with that value as well. If error parameter is not passed, Observable will emit\n * second parameter. If there are more parameters (third and so on),\n * Observable will emit an array with all arguments, except first error argument.\n *\n * Note that `func` will not be called at the same time output function is,\n * but rather whenever resulting Observable is subscribed. By default call to\n * `func` will happen synchronously after subscription, but that can be changed\n * with proper `scheduler` provided as optional third parameter. {@link SchedulerLike}\n * can also control when values from callback will be emitted by Observable.\n * To find out more, check out documentation for {@link bindCallback}, where\n * {@link SchedulerLike} works exactly the same.\n *\n * As in {@link bindCallback}, context (`this` property) of input function will be set to context\n * of returned function, when it is called.\n *\n * After Observable emits value, it will complete immediately. This means\n * even if `func` calls callback again, values from second and consecutive\n * calls will never appear on the stream. If you need to handle functions\n * that call callbacks multiple times, check out {@link fromEvent} or\n * {@link fromEventPattern} instead.\n *\n * Note that `bindNodeCallback` can be used in non-Node.js environments as well.\n * \"Node.js-style\" callbacks are just a convention, so if you write for\n * browsers or any other environment and API you use implements that callback style,\n * `bindNodeCallback` can be safely used on that API functions as well.\n *\n * Remember that Error object passed to callback does not have to be an instance\n * of JavaScript built-in `Error` object. In fact, it does not even have to an object.\n * Error parameter of callback function is interpreted as \"present\", when value\n * of that parameter is truthy. It could be, for example, non-zero number, non-empty\n * string or boolean `true`. In all of these cases resulting Observable would error\n * with that value. This means usually regular style callbacks will fail very often when\n * `bindNodeCallback` is used. If your Observable errors much more often then you\n * would expect, check if callback really is called in Node.js-style and, if not,\n * switch to {@link bindCallback} instead.\n *\n * Note that even if error parameter is technically present in callback, but its value\n * is falsy, it still won't appear in array emitted by Observable.\n *\n * ## Examples\n * ###  Read a file from the filesystem and get the data as an Observable\n * ```javascript\n * import * as fs from 'fs';\n * const readFileAsObservable = bindNodeCallback(fs.readFile);\n * const result = readFileAsObservable('./roadNames.txt', 'utf8');\n * result.subscribe(x => console.log(x), e => console.error(e));\n * ```\n *\n * ### Use on function calling callback with multiple arguments\n * ```javascript\n * someFunction((err, a, b) => {\n *   console.log(err); // null\n *   console.log(a); // 5\n *   console.log(b); // \"some string\"\n * });\n * const boundSomeFunction = bindNodeCallback(someFunction);\n * boundSomeFunction()\n * .subscribe(value => {\n *   console.log(value); // [5, \"some string\"]\n * });\n * ```\n *\n * ### Use on function calling callback in regular style\n * ```javascript\n * someFunction(a => {\n *   console.log(a); // 5\n * });\n * const boundSomeFunction = bindNodeCallback(someFunction);\n * boundSomeFunction()\n * .subscribe(\n *   value => {}             // never gets called\n *   err => console.log(err) // 5\n * );\n * ```\n *\n * @see {@link bindCallback}\n * @see {@link from}\n *\n * @param {function} func Function with a Node.js-style callback as the last parameter.\n * @param {SchedulerLike} [scheduler] The scheduler on which to schedule the\n * callbacks.\n * @return {function(...params: *): Observable} A function which returns the\n * Observable that delivers the same values the Node.js callback would\n * deliver.\n * @name bindNodeCallback\n */\nexport function bindNodeCallback<T>(\n  callbackFunc: Function,\n  resultSelector: Function|SchedulerLike,\n  scheduler?: SchedulerLike\n): (...args: any[]) => Observable<T> {\n\n  if (resultSelector) {\n    if (isScheduler(resultSelector)) {\n      scheduler = resultSelector;\n    } else {\n      // DEPRECATED PATH\n      return (...args: any[]) => bindNodeCallback(callbackFunc, scheduler)(...args).pipe(\n        map(args => isArray(args) ? resultSelector(...args) : resultSelector(args))\n      );\n    }\n  }\n\n  return function(this: any, ...args: any[]): Observable<T> {\n    const params: ParamsState<T> = {\n      subject: undefined,\n      args,\n      callbackFunc,\n      scheduler,\n      context: this,\n    };\n    return new Observable<T>(subscriber => {\n      const { context } = params;\n      let { subject } = params;\n      if (!scheduler) {\n        if (!subject) {\n          subject = params.subject = new AsyncSubject<T>();\n          const handler = (...innerArgs: any[]) => {\n            const err = innerArgs.shift();\n\n            if (err) {\n              subject.error(err);\n              return;\n            }\n\n            subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);\n            subject.complete();\n          };\n\n          try {\n            callbackFunc.apply(context, [...args, handler]);\n          } catch (err) {\n            if (canReportError(subject)) {\n              subject.error(err);\n            } else {\n              console.warn(err);\n            }\n          }\n        }\n        return subject.subscribe(subscriber);\n      } else {\n        return scheduler.schedule<DispatchState<T>>(dispatch, 0, { params, subscriber, context });\n      }\n    });\n  };\n}\n\ninterface DispatchState<T> {\n  subscriber: Subscriber<T>;\n  context: any;\n  params: ParamsState<T>;\n}\n\ninterface ParamsState<T> {\n  callbackFunc: Function;\n  args: any[];\n  scheduler: SchedulerLike;\n  subject: AsyncSubject<T>;\n  context: any;\n}\n\nfunction dispatch<T>(this: SchedulerAction<DispatchState<T>>, state: DispatchState<T>) {\n  const { params, subscriber, context } = state;\n  const { callbackFunc, args, scheduler } = params;\n  let subject = params.subject;\n\n  if (!subject) {\n    subject = params.subject = new AsyncSubject<T>();\n\n    const handler = (...innerArgs: any[]) => {\n      const err = innerArgs.shift();\n      if (err) {\n        this.add(scheduler.schedule<DispatchErrorArg<T>>(dispatchError, 0, { err, subject }));\n      } else {\n        const value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;\n        this.add(scheduler.schedule<DispatchNextArg<T>>(dispatchNext, 0, { value, subject }));\n      }\n    };\n\n    try {\n      callbackFunc.apply(context, [...args, handler]);\n    } catch (err) {\n      this.add(scheduler.schedule<DispatchErrorArg<T>>(dispatchError, 0, { err, subject }));\n    }\n  }\n\n  this.add(subject.subscribe(subscriber));\n}\n\ninterface DispatchNextArg<T> {\n  subject: AsyncSubject<T>;\n  value: T;\n}\n\nfunction dispatchNext<T>(arg: DispatchNextArg<T>) {\n  const { value, subject } = arg;\n  subject.next(value);\n  subject.complete();\n}\n\ninterface DispatchErrorArg<T> {\n  subject: AsyncSubject<T>;\n  err: any;\n}\n\nfunction dispatchError<T>(arg: DispatchErrorArg<T>) {\n  const { err, subject } = arg;\n  subject.error(err);\n}\n","import { SchedulerLike, SchedulerAction } from '../types';\nimport { Observable } from '../Observable';\nimport { AsyncSubject } from '../AsyncSubject';\nimport { Subscriber } from '../Subscriber';\nimport { map } from '../operators/map';\nimport { canReportError } from '../util/canReportError';\nimport { isArray } from '../util/isArray';\nimport { isScheduler } from '../util/isScheduler';\n\n// tslint:disable:max-line-length\n/** @deprecated resultSelector is no longer supported, use a mapping function. */\nexport function bindCallback(callbackFunc: Function, resultSelector: Function, scheduler?: SchedulerLike): (...args: any[]) => Observable<any>;\n\nexport function bindCallback<R1, R2, R3, R4>(callbackFunc: (callback: (res1: R1, res2: R2, res3: R3, res4: R4, ...args: any[]) => any) => any, scheduler?: SchedulerLike): () => Observable<any[]>;\nexport function bindCallback<R1, R2, R3>(callbackFunc: (callback: (res1: R1, res2: R2, res3: R3) => any) => any, scheduler?: SchedulerLike): () => Observable<[R1, R2, R3]>;\nexport function bindCallback<R1, R2>(callbackFunc: (callback: (res1: R1, res2: R2) => any) => any, scheduler?: SchedulerLike): () => Observable<[R1, R2]>;\nexport function bindCallback<R1>(callbackFunc: (callback: (res1: R1) => any) => any, scheduler?: SchedulerLike): () => Observable<R1>;\nexport function bindCallback(callbackFunc: (callback: () => any) => any, scheduler?: SchedulerLike): () => Observable<void>;\n\nexport function bindCallback<A1, R1, R2, R3, R4>(callbackFunc: (arg1: A1, callback: (res1: R1, res2: R2, res3: R3, res4: R4, ...args: any[]) => any) => any, scheduler?: SchedulerLike): (arg1: A1) => Observable<any[]>;\nexport function bindCallback<A1, R1, R2, R3>(callbackFunc: (arg1: A1, callback: (res1: R1, res2: R2, res3: R3) => any) => any, scheduler?: SchedulerLike): (arg1: A1) => Observable<[R1, R2, R3]>;\nexport function bindCallback<A1, R1, R2>(callbackFunc: (arg1: A1, callback: (res1: R1, res2: R2) => any) => any, scheduler?: SchedulerLike): (arg1: A1) => Observable<[R1, R2]>;\nexport function bindCallback<A1, R1>(callbackFunc: (arg1: A1, callback: (res1: R1) => any) => any, scheduler?: SchedulerLike): (arg1: A1) => Observable<R1>;\nexport function bindCallback<A1>(callbackFunc: (arg1: A1, callback: () => any) => any, scheduler?: SchedulerLike): (arg1: A1) => Observable<void>;\n\nexport function bindCallback<A1, A2, R1, R2, R3, R4>(callbackFunc: (arg1: A1, arg2: A2, callback: (res1: R1, res2: R2, res3: R3, res4: R4, ...args: any[]) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2) => Observable<any[]>;\nexport function bindCallback<A1, A2, R1, R2, R3>(callbackFunc: (arg1: A1, arg2: A2, callback: (res1: R1, res2: R2, res3: R3) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2) => Observable<[R1, R2, R3]>;\nexport function bindCallback<A1, A2, R1, R2>(callbackFunc: (arg1: A1, arg2: A2, callback: (res1: R1, res2: R2) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2) => Observable<[R1, R2]>;\nexport function bindCallback<A1, A2, R1>(callbackFunc: (arg1: A1, arg2: A2, callback: (res1: R1) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2) => Observable<R1>;\nexport function bindCallback<A1, A2>(callbackFunc: (arg1: A1, arg2: A2, callback: () => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2) => Observable<void>;\n\nexport function bindCallback<A1, A2, A3, R1, R2, R3, R4>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, callback: (res1: R1, res2: R2, res3: R3, res4: R4, ...args: any[]) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3) => Observable<any[]>;\nexport function bindCallback<A1, A2, A3, R1, R2, R3>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, callback: (res1: R1, res2: R2, res3: R3) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3) => Observable<[R1, R2, R3]>;\nexport function bindCallback<A1, A2, A3, R1, R2>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, callback: (res1: R1, res2: R2) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3) => Observable<[R1, R2]>;\nexport function bindCallback<A1, A2, A3, R1>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, callback: (res1: R1) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3) => Observable<R1>;\nexport function bindCallback<A1, A2, A3>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, callback: () => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3) => Observable<void>;\n\nexport function bindCallback<A1, A2, A3, A4, R1, R2, R3, R4>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, callback: (res1: R1, res2: R2, res3: R3, res4: R4, ...args: any[]) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4) => Observable<any[]>;\nexport function bindCallback<A1, A2, A3, A4, R1, R2, R3>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, callback: (res1: R1, res2: R2, res3: R3) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4) => Observable<[R1, R2, R3]>;\nexport function bindCallback<A1, A2, A3, A4, R1, R2>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, callback: (res1: R1, res2: R2) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4) => Observable<[R1, R2]>;\nexport function bindCallback<A1, A2, A3, A4, R1>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, callback: (res1: R1) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4) => Observable<R1>;\nexport function bindCallback<A1, A2, A3, A4>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, callback: () => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4) => Observable<void>;\n\nexport function bindCallback<A1, A2, A3, A4, A5, R1, R2, R3, R4>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5, callback: (res1: R1, res2: R2, res3: R3, res4: R4, ...args: any[]) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5) => Observable<any[]>;\nexport function bindCallback<A1, A2, A3, A4, A5, R1, R2, R3>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5, callback: (res1: R1, res2: R2, res3: R3) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5) => Observable<[R1, R2, R3]>;\nexport function bindCallback<A1, A2, A3, A4, A5, R1, R2>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5, callback: (res1: R1, res2: R2) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5) => Observable<[R1, R2]>;\nexport function bindCallback<A1, A2, A3, A4, A5, R1>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5, callback: (res1: R1) => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5) => Observable<R1>;\nexport function bindCallback<A1, A2, A3, A4, A5>(callbackFunc: (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5, callback: () => any) => any, scheduler?: SchedulerLike): (arg1: A1, arg2: A2, arg3: A3, arg4: A4, arg5: A5) => Observable<void>;\n\nexport function bindCallback<A, R>(callbackFunc: (...args: Array<A | ((result: R) => any)>) => any, scheduler?: SchedulerLike): (...args: A[]) => Observable<R>;\nexport function bindCallback<A, R>(callbackFunc: (...args: Array<A | ((...results: R[]) => any)>) => any, scheduler?: SchedulerLike): (...args: A[]) => Observable<R[]>;\n\nexport function bindCallback(callbackFunc: Function, scheduler?: SchedulerLike): (...args: any[]) => Observable<any>;\n\n// tslint:enable:max-line-length\n\n/**\n * Converts a callback API to a function that returns an Observable.\n *\n * <span class=\"informal\">Give it a function `f` of type `f(x, callback)` and\n * it will return a function `g` that when called as `g(x)` will output an\n * Observable.</span>\n *\n * `bindCallback` is not an operator because its input and output are not\n * Observables. The input is a function `func` with some parameters. The\n * last parameter must be a callback function that `func` calls when it is\n * done.\n *\n * The output of `bindCallback` is a function that takes the same parameters\n * as `func`, except the last one (the callback). When the output function\n * is called with arguments it will return an Observable. If function `func`\n * calls its callback with one argument, the Observable will emit that value.\n * If on the other hand the callback is called with multiple values the resulting\n * Observable will emit an array with said values as arguments.\n *\n * It is **very important** to remember that input function `func` is not called\n * when the output function is, but rather when the Observable returned by the output\n * function is subscribed. This means if `func` makes an AJAX request, that request\n * will be made every time someone subscribes to the resulting Observable, but not before.\n *\n * The last optional parameter - `scheduler` - can be used to control when the call\n * to `func` happens after someone subscribes to Observable, as well as when results\n * passed to callback will be emitted. By default, the subscription to an Observable calls `func`\n * synchronously, but using {@link asyncScheduler} as the last parameter will defer the call to `func`,\n * just like wrapping the call in `setTimeout` with a timeout of `0` would. If you were to use the async Scheduler\n * and call `subscribe` on the output Observable, all function calls that are currently executing\n * will end before `func` is invoked.\n *\n * By default, results passed to the callback are emitted immediately after `func` invokes the callback.\n * In particular, if the callback is called synchronously, then the subscription of the resulting Observable\n * will call the `next` function synchronously as well.  If you want to defer that call,\n * you may use {@link asyncScheduler} just as before.  This means that by using `Scheduler.async` you can\n * ensure that `func` always calls its callback asynchronously, thus avoiding terrifying Zalgo.\n *\n * Note that the Observable created by the output function will always emit a single value\n * and then complete immediately. If `func` calls the callback multiple times, values from subsequent\n * calls will not appear in the stream. If you need to listen for multiple calls,\n *  you probably want to use {@link fromEvent} or {@link fromEventPattern} instead.\n *\n * If `func` depends on some context (`this` property) and is not already bound, the context of `func`\n * will be the context that the output function has at call time. In particular, if `func`\n * is called as a method of some objec and if `func` is not already bound, in order to preserve the context\n * it is recommended that the context of the output function is set to that object as well.\n *\n * If the input function calls its callback in the \"node style\" (i.e. first argument to callback is\n * optional error parameter signaling whether the call failed or not), {@link bindNodeCallback}\n * provides convenient error handling and probably is a better choice.\n * `bindCallback` will treat such functions the same as any other and error parameters\n * (whether passed or not) will always be interpreted as regular callback argument.\n *\n * ## Examples\n *\n * ### Convert jQuery's getJSON to an Observable API\n * ```javascript\n * // Suppose we have jQuery.getJSON('/my/url', callback)\n * const getJSONAsObservable = bindCallback(jQuery.getJSON);\n * const result = getJSONAsObservable('/my/url');\n * result.subscribe(x => console.log(x), e => console.error(e));\n * ```\n *\n * ### Receive an array of arguments passed to a callback\n * ```javascript\n * someFunction((a, b, c) => {\n *   console.log(a); // 5\n *   console.log(b); // 'some string'\n *   console.log(c); // {someProperty: 'someValue'}\n * });\n *\n * const boundSomeFunction = bindCallback(someFunction);\n * boundSomeFunction().subscribe(values => {\n *   console.log(values) // [5, 'some string', {someProperty: 'someValue'}]\n * });\n * ```\n *\n * ### Compare behaviour with and without async Scheduler\n * ```javascript\n * function iCallMyCallbackSynchronously(cb) {\n *   cb();\n * }\n *\n * const boundSyncFn = bindCallback(iCallMyCallbackSynchronously);\n * const boundAsyncFn = bindCallback(iCallMyCallbackSynchronously, null, Rx.Scheduler.async);\n *\n * boundSyncFn().subscribe(() => console.log('I was sync!'));\n * boundAsyncFn().subscribe(() => console.log('I was async!'));\n * console.log('This happened...');\n *\n * // Logs:\n * // I was sync!\n * // This happened...\n * // I was async!\n * ```\n *\n * ### Use bindCallback on an object method\n * ```javascript\n * const boundMethod = bindCallback(someObject.methodWithCallback);\n * boundMethod.call(someObject) // make sure methodWithCallback has access to someObject\n * .subscribe(subscriber);\n * ```\n *\n * @see {@link bindNodeCallback}\n * @see {@link from}\n *\n * @param {function} func A function with a callback as the last parameter.\n * @param {SchedulerLike} [scheduler] The scheduler on which to schedule the\n * callbacks.\n * @return {function(...params: *): Observable} A function which returns the\n * Observable that delivers the same values the callback would deliver.\n * @name bindCallback\n */\nexport function bindCallback<T>(\n  callbackFunc: Function,\n  resultSelector?: Function|SchedulerLike,\n  scheduler?: SchedulerLike\n): (...args: any[]) => Observable<T> {\n  if (resultSelector) {\n    if (isScheduler(resultSelector)) {\n      scheduler = resultSelector;\n    } else {\n      // DEPRECATED PATH\n      return (...args: any[]) => bindCallback(callbackFunc, scheduler)(...args).pipe(\n        map((args) => isArray(args) ? resultSelector(...args) : resultSelector(args)),\n      );\n    }\n  }\n\n  return function (this: any, ...args: any[]): Observable<T> {\n    const context = this;\n    let subject: AsyncSubject<T>;\n    const params = {\n      context,\n      subject,\n      callbackFunc,\n      scheduler,\n    };\n    return new Observable<T>(subscriber => {\n      if (!scheduler) {\n        if (!subject) {\n          subject = new AsyncSubject<T>();\n          const handler = (...innerArgs: any[]) => {\n            subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);\n            subject.complete();\n          };\n\n          try {\n            callbackFunc.apply(context, [...args, handler]);\n          } catch (err) {\n            if (canReportError(subject)) {\n              subject.error(err);\n            } else {\n              console.warn(err);\n            }\n          }\n        }\n        return subject.subscribe(subscriber);\n      } else {\n        const state: DispatchState<T> = {\n          args, subscriber, params,\n        };\n        return scheduler.schedule<DispatchState<T>>(dispatch, 0, state);\n      }\n    });\n  };\n}\n\ninterface DispatchState<T> {\n  args: any[];\n  subscriber: Subscriber<T>;\n  params: ParamsContext<T>;\n}\n\ninterface ParamsContext<T> {\n  callbackFunc: Function;\n  scheduler: SchedulerLike;\n  context: any;\n  subject: AsyncSubject<T>;\n}\n\nfunction dispatch<T>(this: SchedulerAction<DispatchState<T>>, state: DispatchState<T>) {\n  const self = this;\n  const { args, subscriber, params } = state;\n  const { callbackFunc, context, scheduler } = params;\n  let { subject } = params;\n  if (!subject) {\n    subject = params.subject = new AsyncSubject<T>();\n\n    const handler = (...innerArgs: any[]) => {\n      const value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;\n      this.add(scheduler.schedule<NextState<T>>(dispatchNext, 0, { value, subject }));\n    };\n\n    try {\n      callbackFunc.apply(context, [...args, handler]);\n    } catch (err) {\n      subject.error(err);\n    }\n  }\n\n  this.add(subject.subscribe(subscriber));\n}\n\ninterface NextState<T> {\n  subject: AsyncSubject<T>;\n  value: T;\n}\n\nfunction dispatchNext<T>(this: SchedulerAction<NextState<T>>, state: NextState<T>) {\n  const { value, subject } = state;\n  subject.next(value);\n  subject.complete();\n}\n\ninterface ErrorState<T> {\n  subject: AsyncSubject<T>;\n  err: any;\n}\n\nfunction dispatchError<T>(this: SchedulerAction<ErrorState<T>>, state: ErrorState<T>) {\n  const { err, subject } = state;\n  subject.error(err);\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../types';\n\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * ![](map.png)\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * ## Example\n * Map every click to the clientX position of that click\n * ```javascript\n * const clicks = fromEvent(document, 'click');\n * const positions = clicks.pipe(map(ev => ev.clientX));\n * positions.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nexport function map<T, R>(project: (value: T, index: number) => R, thisArg?: any): OperatorFunction<T, R> {\n  return function mapOperation(source: Observable<T>): Observable<R> {\n    if (typeof project !== 'function') {\n      throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');\n    }\n    return source.lift(new MapOperator(project, thisArg));\n  };\n}\n\nexport class MapOperator<T, R> implements Operator<T, R> {\n  constructor(private project: (value: T, index: number) => R, private thisArg: any) {\n  }\n\n  call(subscriber: Subscriber<R>, source: any): any {\n    return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass MapSubscriber<T, R> extends Subscriber<T> {\n  count: number = 0;\n  private thisArg: any;\n\n  constructor(destination: Subscriber<R>,\n              private project: (value: T, index: number) => R,\n              thisArg: any) {\n    super(destination);\n    this.thisArg = thisArg || this;\n  }\n\n  // NOTE: This looks unoptimized, but it's actually purposefully NOT\n  // using try/catch optimizations.\n  protected _next(value: T) {\n    let result: any;\n    try {\n      result = this.project.call(this.thisArg, value, this.count++);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n    this.destination.next(result);\n  }\n}\n","export interface TimeoutError extends Error {\r\n}\r\n\r\nexport interface TimeoutErrorCtor {\r\n  new(): TimeoutError;\r\n}\r\n\r\nfunction TimeoutErrorImpl(this: any) {\r\n  Error.call(this);\r\n  this.message = 'Timeout has occurred';\r\n  this.name = 'TimeoutError';\r\n  return this;\r\n}\r\n\r\nTimeoutErrorImpl.prototype = Object.create(Error.prototype);\r\n\r\n/**\r\n * An error thrown when duetime elapses.\r\n *\r\n * @see {@link timeout}\r\n *\r\n * @class TimeoutError\r\n */\r\nexport const TimeoutError: TimeoutErrorCtor = TimeoutErrorImpl as any;\r\n","export interface EmptyError extends Error {\n}\n\nexport interface EmptyErrorCtor {\n  new(): EmptyError;\n}\n\nfunction EmptyErrorImpl(this: any) {\n  Error.call(this);\n  this.message = 'no elements in sequence';\n  this.name = 'EmptyError';\n  return this;\n}\n\nEmptyErrorImpl.prototype = Object.create(Error.prototype);\n\n/**\n * An error thrown when an Observable or a sequence was queried but has no\n * elements.\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link single}\n *\n * @class EmptyError\n */\nexport const EmptyError: EmptyErrorCtor = EmptyErrorImpl as any;","export interface ArgumentOutOfRangeError extends Error {\n}\n\nexport interface ArgumentOutOfRangeErrorCtor {\n  new(): ArgumentOutOfRangeError;\n}\n\nfunction ArgumentOutOfRangeErrorImpl(this: any) {\n  Error.call(this);\n  this.message = 'argument out of range';\n  this.name = 'ArgumentOutOfRangeError';\n  return this;\n}\n\nArgumentOutOfRangeErrorImpl.prototype = Object.create(Error.prototype);\n\n/**\n * An error thrown when an element was queried at a certain index of an\n * Observable, but no such index or position exists in that sequence.\n *\n * @see {@link elementAt}\n * @see {@link take}\n * @see {@link takeLast}\n *\n * @class ArgumentOutOfRangeError\n */\nexport const ArgumentOutOfRangeError: ArgumentOutOfRangeErrorCtor = ArgumentOutOfRangeErrorImpl as any;","import { Observable } from '../Observable';\nimport { ObservableInput } from '../types';\n\n/**\n * Tests to see if the object is an RxJS {@link Observable}\n * @param obj the object to test\n */\nexport function isObservable<T>(obj: any): obj is Observable<T> {\n  return !!obj && (obj instanceof Observable || (typeof obj.lift === 'function' && typeof obj.subscribe === 'function'));\n}\n","export function identity<T>(x: T): T {\n  return x;\n}\n","import { AsyncAction } from './AsyncAction';\nimport { Subscription } from '../Subscription';\nimport { AsyncScheduler } from './AsyncScheduler';\nimport { SchedulerAction } from '../types';\n\nexport class VirtualTimeScheduler extends AsyncScheduler {\n\n  protected static frameTimeFactor: number = 10;\n\n  public frame: number = 0;\n  public index: number = -1;\n\n  constructor(SchedulerAction: typeof AsyncAction = VirtualAction as any,\n              public maxFrames: number = Number.POSITIVE_INFINITY) {\n    super(SchedulerAction, () => this.frame);\n  }\n\n  /**\n   * Prompt the Scheduler to execute all of its queued actions, therefore\n   * clearing its queue.\n   * @return {void}\n   */\n  public flush(): void {\n\n    const {actions, maxFrames} = this;\n    let error: any, action: AsyncAction<any>;\n\n    while ((action = actions.shift()) && (this.frame = action.delay) <= maxFrames) {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    }\n\n    if (error) {\n      while (action = actions.shift()) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @nodoc\n */\nexport class VirtualAction<T> extends AsyncAction<T> {\n\n  protected active: boolean = true;\n\n  constructor(protected scheduler: VirtualTimeScheduler,\n              protected work: (this: SchedulerAction<T>, state?: T) => void,\n              protected index: number = scheduler.index += 1) {\n    super(scheduler, work);\n    this.index = scheduler.index = index;\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n    if (!this.id) {\n      return super.schedule(state, delay);\n    }\n    this.active = false;\n    // If an action is rescheduled, we save allocations by mutating its state,\n    // pushing it to the end of the scheduler queue, and recycling the action.\n    // But since the VirtualTimeScheduler is used for testing, VirtualActions\n    // must be immutable so they can be inspected later.\n    const action = new VirtualAction(this.scheduler, this.work);\n    this.add(action);\n    return action.schedule(state, delay);\n  }\n\n  protected requestAsyncId(scheduler: VirtualTimeScheduler, id?: any, delay: number = 0): any {\n    this.delay = scheduler.frame + delay;\n    const {actions} = scheduler;\n    actions.push(this);\n    (actions as Array<VirtualAction<T>>).sort(VirtualAction.sortActions);\n    return true;\n  }\n\n  protected recycleAsyncId(scheduler: VirtualTimeScheduler, id?: any, delay: number = 0): any {\n    return undefined;\n  }\n\n  protected _execute(state: T, delay: number): any {\n    if (this.active === true) {\n      return super._execute(state, delay);\n    }\n  }\n\n  public static sortActions<T>(a: VirtualAction<T>, b: VirtualAction<T>) {\n    if (a.delay === b.delay) {\n      if (a.index === b.index) {\n        return 0;\n      } else if (a.index > b.index) {\n        return 1;\n      } else {\n        return -1;\n      }\n    } else if (a.delay > b.delay) {\n      return 1;\n    } else {\n      return -1;\n    }\n  }\n}\n","import { AnimationFrameAction } from './AnimationFrameAction';\nimport { AnimationFrameScheduler } from './AnimationFrameScheduler';\n\n/**\n *\n * Animation Frame Scheduler\n *\n * <span class=\"informal\">Perform task when `window.requestAnimationFrame` would fire</span>\n *\n * When `animationFrame` scheduler is used with delay, it will fall back to {@link asyncScheduler} scheduler\n * behaviour.\n *\n * Without delay, `animationFrame` scheduler can be used to create smooth browser animations.\n * It makes sure scheduled task will happen just before next browser content repaint,\n * thus performing animations as efficiently as possible.\n *\n * ## Example\n * Schedule div height animation\n * ```javascript\n * const div = document.querySelector('.some-div');\n *\n * Rx.Scheduler.animationFrame.schedule(function(height) {\n *   div.style.height = height + \"px\";\n *\n *   this.schedule(height + 1);  // `this` references currently executing Action,\n *                               // which we reschedule with new state\n * }, 0, 0);\n *\n * // You will see .some-div element growing in height\n * ```\n *\n * @static true\n * @name animationFrame\n * @owner Scheduler\n */\n\nexport const animationFrame = new AnimationFrameScheduler(AnimationFrameAction);\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport class AnimationFrameScheduler extends AsyncScheduler {\n  public flush(action?: AsyncAction<any>): void {\n\n    this.active = true;\n    this.scheduled = undefined;\n\n    const {actions} = this;\n    let error: any;\n    let index: number = -1;\n    let count: number = actions.length;\n    action = action || actions.shift();\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (++index < count && (action = actions.shift()));\n\n    this.active = false;\n\n    if (error) {\n      while (++index < count && (action = actions.shift())) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { AnimationFrameScheduler } from './AnimationFrameScheduler';\nimport { SchedulerAction } from '../types';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AnimationFrameAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: AnimationFrameScheduler,\n              protected work: (this: SchedulerAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  protected requestAsyncId(scheduler: AnimationFrameScheduler, id?: any, delay: number = 0): any {\n    // If delay is greater than 0, request as an async action.\n    if (delay !== null && delay > 0) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Push the action to the end of the scheduler queue.\n    scheduler.actions.push(this);\n    // If an animation frame has already been requested, don't request another\n    // one. If an animation frame hasn't been requested yet, request one. Return\n    // the current animation frame request id.\n    return scheduler.scheduled || (scheduler.scheduled = requestAnimationFrame(\n      () => scheduler.flush(null)));\n  }\n  protected recycleAsyncId(scheduler: AnimationFrameScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n      return super.recycleAsyncId(scheduler, id, delay);\n    }\n    // If the scheduler queue is empty, cancel the requested animation frame and\n    // set the scheduled flag to undefined so the next AnimationFrameAction will\n    // request its own.\n    if (scheduler.actions.length === 0) {\n      cancelAnimationFrame(id);\n      scheduler.scheduled = undefined;\n    }\n    // Return undefined so the action knows to request a new async id if it's rescheduled.\n    return undefined;\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\n/**\n *\n * Async Scheduler\n *\n * <span class=\"informal\">Schedule task as if you used setTimeout(task, duration)</span>\n *\n * `async` scheduler schedules tasks asynchronously, by putting them on the JavaScript\n * event loop queue. It is best used to delay tasks in time or to schedule tasks repeating\n * in intervals.\n *\n * If you just want to \"defer\" task, that is to perform it right after currently\n * executing synchronous code ends (commonly achieved by `setTimeout(deferredTask, 0)`),\n * better choice will be the {@link asapScheduler} scheduler.\n *\n * ## Examples\n * Use async scheduler to delay task\n * ```javascript\n * const task = () => console.log('it works!');\n *\n * Rx.Scheduler.async.schedule(task, 2000);\n *\n * // After 2 seconds logs:\n * // \"it works!\"\n * ```\n *\n * Use async scheduler to repeat task in intervals\n * ```javascript\n * function task(state) {\n *   console.log(state);\n *   this.schedule(state + 1, 1000); // `this` references currently executing Action,\n *                                   // which we reschedule with new state and delay\n * }\n *\n * Rx.Scheduler.async.schedule(task, 3000, 0);\n *\n * // Logs:\n * // 0 after 3s\n * // 1 after 4s\n * // 2 after 5s\n * // 3 after 6s\n * ```\n *\n * @static true\n * @name async\n * @owner Scheduler\n */\n\nexport const async = new AsyncScheduler(AsyncAction);\n","import { AsapAction } from './AsapAction';\nimport { AsapScheduler } from './AsapScheduler';\n\n/**\n *\n * Asap Scheduler\n *\n * <span class=\"informal\">Perform task as fast as it can be performed asynchronously</span>\n *\n * `asap` scheduler behaves the same as {@link asyncScheduler} scheduler when you use it to delay task\n * in time. If however you set delay to `0`, `asap` will wait for current synchronously executing\n * code to end and then it will try to execute given task as fast as possible.\n *\n * `asap` scheduler will do its best to minimize time between end of currently executing code\n * and start of scheduled task. This makes it best candidate for performing so called \"deferring\".\n * Traditionally this was achieved by calling `setTimeout(deferredTask, 0)`, but that technique involves\n * some (although minimal) unwanted delay.\n *\n * Note that using `asap` scheduler does not necessarily mean that your task will be first to process\n * after currently executing code. In particular, if some task was also scheduled with `asap` before,\n * that task will execute first. That being said, if you need to schedule task asynchronously, but\n * as soon as possible, `asap` scheduler is your best bet.\n *\n * ## Example\n * Compare async and asap scheduler<\n * ```javascript\n * Rx.Scheduler.async.schedule(() => console.log('async')); // scheduling 'async' first...\n * Rx.Scheduler.asap.schedule(() => console.log('asap'));\n *\n * // Logs:\n * // \"asap\"\n * // \"async\"\n * // ... but 'asap' goes first!\n * ```\n * @static true\n * @name asap\n * @owner Scheduler\n */\n\nexport const asap = new AsapScheduler(AsapAction);\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport class AsapScheduler extends AsyncScheduler {\n  public flush(action?: AsyncAction<any>): void {\n\n    this.active = true;\n    this.scheduled = undefined;\n\n    const {actions} = this;\n    let error: any;\n    let index: number = -1;\n    let count: number = actions.length;\n    action = action || actions.shift();\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (++index < count && (action = actions.shift()));\n\n    this.active = false;\n\n    if (error) {\n      while (++index < count && (action = actions.shift())) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { Immediate } from '../util/Immediate';\nimport { AsyncAction } from './AsyncAction';\nimport { AsapScheduler } from './AsapScheduler';\nimport { SchedulerAction } from '../types';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AsapAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: AsapScheduler,\n              protected work: (this: SchedulerAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  protected requestAsyncId(scheduler: AsapScheduler, id?: any, delay: number = 0): any {\n    // If delay is greater than 0, request as an async action.\n    if (delay !== null && delay > 0) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Push the action to the end of the scheduler queue.\n    scheduler.actions.push(this);\n    // If a microtask has already been scheduled, don't schedule another\n    // one. If a microtask hasn't been scheduled yet, schedule one now. Return\n    // the current scheduled microtask id.\n    return scheduler.scheduled || (scheduler.scheduled = Immediate.setImmediate(\n      scheduler.flush.bind(scheduler, null)\n    ));\n  }\n  protected recycleAsyncId(scheduler: AsapScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n      return super.recycleAsyncId(scheduler, id, delay);\n    }\n    // If the scheduler queue is empty, cancel the requested microtask and\n    // set the scheduled flag to undefined so the next AsapAction will schedule\n    // its own.\n    if (scheduler.actions.length === 0) {\n      Immediate.clearImmediate(id);\n      scheduler.scheduled = undefined;\n    }\n    // Return undefined so the action knows to request a new async id if it's rescheduled.\n    return undefined;\n  }\n}\n","let nextHandle = 1;\n\nconst tasksByHandle: { [handle: string]: () => void } = {};\n\nfunction runIfPresent(handle: number) {\n  const cb = tasksByHandle[handle];\n  if (cb) {\n    cb();\n  }\n}\n\nexport const Immediate = {\n  setImmediate(cb: () => void): number {\n    const handle = nextHandle++;\n    tasksByHandle[handle] = cb;\n    Promise.resolve().then(() => runIfPresent(handle));\n    return handle;\n  },\n\n  clearImmediate(handle: number): void {\n    delete tasksByHandle[handle];\n  },\n};\n","import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\n\n/**\n * A variant of Subject that only emits a value when it completes. It will emit\n * its latest value to all its observers on completion.\n *\n * @class AsyncSubject<T>\n */\nexport class AsyncSubject<T> extends Subject<T> {\n  private value: T = null;\n  private hasNext: boolean = false;\n  private hasCompleted: boolean = false;\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<any>): Subscription {\n    if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.hasCompleted && this.hasNext) {\n      subscriber.next(this.value);\n      subscriber.complete();\n      return Subscription.EMPTY;\n    }\n    return super._subscribe(subscriber);\n  }\n\n  next(value: T): void {\n    if (!this.hasCompleted) {\n      this.value = value;\n      this.hasNext = true;\n    }\n  }\n\n  error(error: any): void {\n    if (!this.hasCompleted) {\n      super.error(error);\n    }\n  }\n\n  complete(): void {\n    this.hasCompleted = true;\n    if (this.hasNext) {\n      super.next(this.value);\n    }\n    super.complete();\n  }\n}\n","import { Subject } from './Subject';\nimport { SchedulerLike } from './types';\nimport { queue } from './scheduler/queue';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { ObserveOnSubscriber } from './operators/observeOn';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\n/**\n * A variant of Subject that \"replays\" or emits old values to new subscribers.\n * It buffers a set number of values and will emit those values immediately to\n * any new subscribers in addition to emitting new values to existing subscribers.\n *\n * @class ReplaySubject<T>\n */\nexport class ReplaySubject<T> extends Subject<T> {\n  private _events: (ReplayEvent<T> | T)[] = [];\n  private _bufferSize: number;\n  private _windowTime: number;\n  private _infiniteTimeWindow: boolean = false;\n\n  constructor(bufferSize: number = Number.POSITIVE_INFINITY,\n              windowTime: number = Number.POSITIVE_INFINITY,\n              private scheduler?: SchedulerLike) {\n    super();\n    this._bufferSize = bufferSize < 1 ? 1 : bufferSize;\n    this._windowTime = windowTime < 1 ? 1 : windowTime;\n\n    if (windowTime === Number.POSITIVE_INFINITY) {\n      this._infiniteTimeWindow = true;\n      this.next = this.nextInfiniteTimeWindow;\n    } else {\n      this.next = this.nextTimeWindow;\n    }\n  }\n\n  private nextInfiniteTimeWindow(value: T): void {\n    const _events = this._events;\n    _events.push(value);\n    // Since this method is invoked in every next() call than the buffer\n    // can overgrow the max size only by one item\n    if (_events.length > this._bufferSize) {\n      _events.shift();\n    }\n\n    super.next(value);\n  }\n\n  private nextTimeWindow(value: T): void {\n    this._events.push(new ReplayEvent(this._getNow(), value));\n    this._trimBufferThenGetEvents();\n\n    super.next(value);\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<T>): Subscription {\n    // When `_infiniteTimeWindow === true` then the buffer is already trimmed\n    const _infiniteTimeWindow = this._infiniteTimeWindow;\n    const _events = _infiniteTimeWindow ? this._events : this._trimBufferThenGetEvents();\n    const scheduler = this.scheduler;\n    const len = _events.length;\n    let subscription: Subscription;\n\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.isStopped || this.hasError) {\n      subscription = Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      subscription = new SubjectSubscription(this, subscriber);\n    }\n\n    if (scheduler) {\n      subscriber.add(subscriber = new ObserveOnSubscriber<T>(subscriber, scheduler));\n    }\n\n    if (_infiniteTimeWindow) {\n      for (let i = 0; i < len && !subscriber.closed; i++) {\n        subscriber.next(<T>_events[i]);\n      }\n    } else {\n      for (let i = 0; i < len && !subscriber.closed; i++) {\n        subscriber.next((<ReplayEvent<T>>_events[i]).value);\n      }\n    }\n\n    if (this.hasError) {\n      subscriber.error(this.thrownError);\n    } else if (this.isStopped) {\n      subscriber.complete();\n    }\n\n    return subscription;\n  }\n\n  _getNow(): number {\n    return (this.scheduler || queue).now();\n  }\n\n  private _trimBufferThenGetEvents(): ReplayEvent<T>[] {\n    const now = this._getNow();\n    const _bufferSize = this._bufferSize;\n    const _windowTime = this._windowTime;\n    const _events = <ReplayEvent<T>[]>this._events;\n\n    const eventsCount = _events.length;\n    let spliceCount = 0;\n\n    // Trim events that fall out of the time window.\n    // Start at the front of the list. Break early once\n    // we encounter an event that falls within the window.\n    while (spliceCount < eventsCount) {\n      if ((now - _events[spliceCount].time) < _windowTime) {\n        break;\n      }\n      spliceCount++;\n    }\n\n    if (eventsCount > _bufferSize) {\n      spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);\n    }\n\n    if (spliceCount > 0) {\n      _events.splice(0, spliceCount);\n    }\n\n    return _events;\n  }\n\n}\n\nclass ReplayEvent<T> {\n  constructor(public time: number, public value: T) {\n  }\n}\n","import { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Notification } from '../Notification';\nimport { MonoTypeOperatorFunction, PartialObserver, SchedulerAction, SchedulerLike, TeardownLogic } from '../types';\n\n/**\n *\n * Re-emits all notifications from source Observable with specified scheduler.\n *\n * <span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\n *\n * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\n * notifications emitted by the source Observable. It might be useful, if you do not have control over\n * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\n *\n * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\n * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\n * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\n * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\n * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\n * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\n * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\n * little bit more, to ensure that they are emitted at expected moments.\n *\n * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\n * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\n * will delay all notifications - including error notifications - while `delay` will pass through error\n * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\n * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\n * for notification emissions in general.\n *\n * ## Example\n * Ensure values in subscribe are called just before browser repaint.\n * ```javascript\n * const intervals = interval(10);                // Intervals are scheduled\n *                                                // with async scheduler by default...\n * intervals.pipe(\n *   observeOn(animationFrameScheduler),          // ...but we will observe on animationFrame\n * )                                              // scheduler to ensure smooth animation.\n * .subscribe(val => {\n *   someDiv.style.height = val + 'px';\n * });\n * ```\n *\n * @see {@link delay}\n *\n * @param {SchedulerLike} scheduler Scheduler that will be used to reschedule notifications from source Observable.\n * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.\n * @return {Observable<T>} Observable that emits the same notifications as the source Observable,\n * but with provided scheduler.\n *\n * @method observeOn\n * @owner Observable\n */\nexport function observeOn<T>(scheduler: SchedulerLike, delay: number = 0): MonoTypeOperatorFunction<T> {\n  return function observeOnOperatorFunction(source: Observable<T>): Observable<T> {\n    return source.lift(new ObserveOnOperator(scheduler, delay));\n  };\n}\n\nexport class ObserveOnOperator<T> implements Operator<T, T> {\n  constructor(private scheduler: SchedulerLike, private delay: number = 0) {\n  }\n\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n    return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class ObserveOnSubscriber<T> extends Subscriber<T> {\n  /** @nocollapse */\n  static dispatch(this: SchedulerAction<ObserveOnMessage>, arg: ObserveOnMessage) {\n    const { notification, destination } = arg;\n    notification.observe(destination);\n    this.unsubscribe();\n  }\n\n  constructor(destination: Subscriber<T>,\n              private scheduler: SchedulerLike,\n              private delay: number = 0) {\n    super(destination);\n  }\n\n  private scheduleMessage(notification: Notification<any>): void {\n    const destination = this.destination as Subscription;\n    destination.add(this.scheduler.schedule(\n      ObserveOnSubscriber.dispatch,\n      this.delay,\n      new ObserveOnMessage(notification, this.destination)\n    ));\n  }\n\n  protected _next(value: T): void {\n    this.scheduleMessage(Notification.createNext(value));\n  }\n\n  protected _error(err: any): void {\n    this.scheduleMessage(Notification.createError(err));\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.scheduleMessage(Notification.createComplete());\n    this.unsubscribe();\n  }\n}\n\nexport class ObserveOnMessage {\n  constructor(public notification: Notification<any>,\n              public destination: PartialObserver<any>) {\n  }\n}\n","import { PartialObserver } from './types';\nimport { Observable } from './Observable';\nimport { empty } from './observable/empty';\nimport { of } from './observable/of';\nimport { throwError } from './observable/throwError';\n\n/**\n * Represents a push-based event or value that an {@link Observable} can emit.\n * This class is particularly useful for operators that manage notifications,\n * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and\n * others. Besides wrapping the actual delivered value, it also annotates it\n * with metadata of, for instance, what type of push message it is (`next`,\n * `error`, or `complete`).\n *\n * @see {@link materialize}\n * @see {@link dematerialize}\n * @see {@link observeOn}\n *\n * @class Notification<T>\n */\nexport class Notification<T> {\n  hasValue: boolean;\n\n  constructor(public kind: string, public value?: T, public error?: any) {\n    this.hasValue = kind === 'N';\n  }\n\n  /**\n   * Delivers to the given `observer` the value wrapped by this Notification.\n   * @param {Observer} observer\n   * @return\n   */\n  observe(observer: PartialObserver<T>): any {\n    switch (this.kind) {\n      case 'N':\n        return observer.next && observer.next(this.value);\n      case 'E':\n        return observer.error && observer.error(this.error);\n      case 'C':\n        return observer.complete && observer.complete();\n    }\n  }\n\n  /**\n   * Given some {@link Observer} callbacks, deliver the value represented by the\n   * current Notification to the correctly corresponding callback.\n   * @param {function(value: T): void} next An Observer `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  do(next: (value: T) => void, error?: (err: any) => void, complete?: () => void): any {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return next && next(this.value);\n      case 'E':\n        return error && error(this.error);\n      case 'C':\n        return complete && complete();\n    }\n  }\n\n  /**\n   * Takes an Observer or its individual callback functions, and calls `observe`\n   * or `do` methods accordingly.\n   * @param {Observer|function(value: T): void} nextOrObserver An Observer or\n   * the `next` callback.\n   * @param {function(err: any): void} [error] An Observer `error` callback.\n   * @param {function(): void} [complete] An Observer `complete` callback.\n   * @return {any}\n   */\n  accept(nextOrObserver: PartialObserver<T> | ((value: T) => void), error?: (err: any) => void, complete?: () => void) {\n    if (nextOrObserver && typeof (<PartialObserver<T>>nextOrObserver).next === 'function') {\n      return this.observe(<PartialObserver<T>>nextOrObserver);\n    } else {\n      return this.do(<(value: T) => void>nextOrObserver, error, complete);\n    }\n  }\n\n  /**\n   * Returns a simple Observable that just delivers the notification represented\n   * by this Notification instance.\n   * @return {any}\n   */\n  toObservable(): Observable<T> {\n    const kind = this.kind;\n    switch (kind) {\n      case 'N':\n        return of(this.value);\n      case 'E':\n        return throwError(this.error);\n      case 'C':\n        return empty();\n    }\n    throw new Error('unexpected notification kind value');\n  }\n\n  private static completeNotification: Notification<any> = new Notification('C');\n  private static undefinedValueNotification: Notification<any> = new Notification('N', undefined);\n\n  /**\n   * A shortcut to create a Notification instance of the type `next` from a\n   * given value.\n   * @param {T} value The `next` value.\n   * @return {Notification<T>} The \"next\" Notification representing the\n   * argument.\n   * @nocollapse\n   */\n  static createNext<T>(value: T): Notification<T> {\n    if (typeof value !== 'undefined') {\n      return new Notification('N', value);\n    }\n    return Notification.undefinedValueNotification;\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `error` from a\n   * given error.\n   * @param {any} [err] The `error` error.\n   * @return {Notification<T>} The \"error\" Notification representing the\n   * argument.\n   * @nocollapse\n   */\n  static createError<T>(err?: any): Notification<T> {\n    return new Notification('E', undefined, err);\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `complete`.\n   * @return {Notification<any>} The valueless \"complete\" Notification.\n   * @nocollapse\n   */\n  static createComplete(): Notification<any> {\n    return Notification.completeNotification;\n  }\n}\n","import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\nimport { Subscriber } from '../Subscriber';\n\n/**\n * Creates an Observable that emits no items to the Observer and immediately\n * emits an error notification.\n *\n * <span class=\"informal\">Just emits 'error', and nothing else.\n * </span>\n *\n * ![](throw.png)\n *\n * This static operator is useful for creating a simple Observable that only\n * emits the error notification. It can be used for composing with other\n * Observables, such as in a {@link mergeMap}.\n *\n * ## Examples\n * ### Emit the number 7, then emit an error\n * ```javascript\n * import { throwError, concat, of } from 'rxjs';\n *\n * const result = concat(of(7), throwError(new Error('oops!')));\n * result.subscribe(x => console.log(x), e => console.error(e));\n *\n * // Logs:\n * // 7\n * // Error: oops!\n * ```\n *\n * ---\n *\n * ### Map and flatten numbers to the sequence 'a', 'b', 'c', but throw an error for 13\n * ```javascript\n * import { throwError, interval, of } from 'rxjs';\n * import { mergeMap } from 'rxjs/operators';\n *\n * interval(1000).pipe(\n *   mergeMap(x => x === 2\n *     ? throwError('Twos are bad')\n *     : of('a', 'b', 'c')\n *   ),\n * ).subscribe(x => console.log(x), e => console.error(e));\n *\n * // Logs:\n * // a\n * // b\n * // c\n * // a\n * // b\n * // c\n * // Twos are bad\n * ```\n *\n * @see {@link Observable}\n * @see {@link empty}\n * @see {@link never}\n * @see {@link of}\n *\n * @param {any} error The particular Error to pass to the error notification.\n * @param {SchedulerLike} [scheduler] A {@link SchedulerLike} to use for scheduling\n * the emission of the error notification.\n * @return {Observable} An error Observable: emits only the error notification\n * using the given error argument.\n * @static true\n * @name throwError\n * @owner Observable\n */\nexport function throwError(error: any, scheduler?: SchedulerLike): Observable<never> {\n  if (!scheduler) {\n    return new Observable(subscriber => subscriber.error(error));\n  } else {\n    return new Observable(subscriber => scheduler.schedule(dispatch, 0, { error, subscriber }));\n  }\n}\n\ninterface DispatchArg {\n  error: any;\n  subscriber: Subscriber<any>;\n}\n\nfunction dispatch({ error, subscriber }: DispatchArg) {\n  subscriber.error(error);\n}\n","import { SchedulerLike } from '../types';\nimport { isScheduler } from '../util/isScheduler';\nimport { fromArray } from './fromArray';\nimport { empty } from './empty';\nimport { scalar } from './scalar';\nimport { Observable } from '../Observable';\n\n/* tslint:disable:max-line-length */\nexport function of<T>(a: T, scheduler?: SchedulerLike): Observable<T>;\nexport function of<T, T2>(a: T, b: T2, scheduler?: SchedulerLike): Observable<T | T2>;\nexport function of<T, T2, T3>(a: T, b: T2, c: T3, scheduler?: SchedulerLike): Observable<T | T2 | T3>;\nexport function of<T, T2, T3, T4>(a: T, b: T2, c: T3, d: T4, scheduler?: SchedulerLike): Observable<T | T2 | T3 | T4>;\nexport function of<T, T2, T3, T4, T5>(a: T, b: T2, c: T3, d: T4, e: T5, scheduler?: SchedulerLike): Observable<T | T2 | T3 | T4 | T5>;\nexport function of<T, T2, T3, T4, T5, T6>(a: T, b: T2, c: T3, d: T4, e: T5, f: T6, scheduler?: SchedulerLike): Observable<T | T2 | T3 | T4 | T5 | T6>;\nexport function of<T, T2, T3, T4, T5, T6, T7>(a: T, b: T2, c: T3, d: T4, e: T5, f: T6, g: T7, scheduler?: SchedulerLike):\n  Observable<T | T2 | T3 | T4 | T5 | T6 | T7>;\nexport function of<T, T2, T3, T4, T5, T6, T7, T8>(a: T, b: T2, c: T3, d: T4, e: T5, f: T6, g: T7, h: T8, scheduler?: SchedulerLike):\n  Observable<T | T2 | T3 | T4 | T5 | T6 | T7 | T8>;\nexport function of<T, T2, T3, T4, T5, T6, T7, T8, T9>(a: T, b: T2, c: T3, d: T4, e: T5, f: T6, g: T7, h: T8, i: T9, scheduler?: SchedulerLike):\n  Observable<T | T2 | T3 | T4 | T5 | T6 | T7 | T8 | T9>;\nexport function of<T>(...args: Array<T | SchedulerLike>): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Converts the arguments to an observable sequence.\n *\n * <span class=\"informal\">Each argument becomes a `next` notification.</span>\n *\n * ![](of.png)\n *\n * Unlike {@link from}, it does not do any flattening and emits each argument in whole\n * as a separate `next` notification.\n *\n * ## Examples\n *\n * Emit the values `10, 20, 30`\n *\n * ```javascript\n * of(10, 20, 30)\n * .subscribe(\n *   next => console.log('next:', next),\n *   err => console.log('error:', err),\n *   () => console.log('the end'),\n * );\n * // result:\n * // 'next: 10'\n * // 'next: 20'\n * // 'next: 30'\n *\n * ```\n *\n * Emit the array `[1,2,3]`\n *\n * ```javascript\n * of([1,2,3])\n * .subscribe(\n *   next => console.log('next:', next),\n *   err => console.log('error:', err),\n *   () => console.log('the end'),\n * );\n * // result:\n * // 'next: [1,2,3]'\n * ```\n *\n * @see {@link from}\n * @see {@link range}\n *\n * @param {...T} values A comma separated list of arguments you want to be emitted\n * @return {Observable} An Observable that emits the arguments\n * described above and then completes.\n * @method of\n * @owner Observable\n */\n\nexport function of<T>(...args: Array<T | SchedulerLike>): Observable<T> {\n  let scheduler = args[args.length - 1] as SchedulerLike;\n  if (isScheduler(scheduler)) {\n    args.pop();\n  } else {\n    scheduler = undefined;\n  }\n  switch (args.length) {\n    case 0:\n      return empty(scheduler);\n    case 1:\n      return scheduler ? fromArray(args as T[], scheduler) : scalar(args[0] as T);\n    default:\n      return fromArray(args as T[], scheduler);\n  }\n}\n","import { Observable } from '../Observable';\n\nexport function scalar<T>(value: T) {\n  const result = new Observable<T>(subscriber => {\n    subscriber.next(value);\n    subscriber.complete();\n  });\n  result._isScalar = true;\n  (result as any).value = value;\n  return result;\n}\n","import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\nimport { Subscription } from '../Subscription';\nimport { subscribeToArray } from '../util/subscribeToArray';\n\nexport function fromArray<T>(input: ArrayLike<T>, scheduler?: SchedulerLike) {\n  if (!scheduler) {\n    return new Observable<T>(subscribeToArray(input));\n  } else {\n    return new Observable<T>(subscriber => {\n      const sub = new Subscription();\n      let i = 0;\n      sub.add(scheduler.schedule(function () {\n        if (i === input.length) {\n          subscriber.complete();\n          return;\n        }\n        subscriber.next(input[i++]);\n        if (!subscriber.closed) {\n          sub.add(this.schedule());\n        }\n      }));\n      return sub;\n    });\n  }\n}\n","import { Subscriber } from '../Subscriber';\n\n/**\n * Subscribes to an ArrayLike with a subscriber\n * @param array The array or array-like to subscribe to\n */\nexport const subscribeToArray = <T>(array: ArrayLike<T>) => (subscriber: Subscriber<T>) => {\n  for (let i = 0, len = array.length; i < len && !subscriber.closed; i++) {\n    subscriber.next(array[i]);\n  }\n  if (!subscriber.closed) {\n    subscriber.complete();\n  }\n};\n","import { SchedulerLike } from '../types';\n\nexport function isScheduler(value: any): value is SchedulerLike {\n  return value && typeof (<any>value).schedule === 'function';\n}\n","import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\n\n/**\n * The same Observable instance returned by any call to {@link empty} without a\n * `scheduler`. It is preferrable to use this over `empty()`.\n */\nexport const EMPTY = new Observable<never>(subscriber => subscriber.complete());\n\n/**\n * Creates an Observable that emits no items to the Observer and immediately\n * emits a complete notification.\n *\n * <span class=\"informal\">Just emits 'complete', and nothing else.\n * </span>\n *\n * ![](empty.png)\n *\n * This static operator is useful for creating a simple Observable that only\n * emits the complete notification. It can be used for composing with other\n * Observables, such as in a {@link mergeMap}.\n *\n * ## Examples\n * ### Emit the number 7, then complete\n * ```javascript\n * const result = empty().pipe(startWith(7));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * ### Map and flatten only odd numbers to the sequence 'a', 'b', 'c'\n * ```javascript\n * const interval$ = interval(1000);\n * result = interval$.pipe(\n *   mergeMap(x => x % 2 === 1 ? of('a', 'b', 'c') : empty()),\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following to the console:\n * // x is equal to the count on the interval eg(0,1,2,3,...)\n * // x will occur every 1000ms\n * // if x % 2 is equal to 1 print abc\n * // if x % 2 is not equal to 1 nothing will be output\n * ```\n *\n * @see {@link Observable}\n * @see {@link never}\n * @see {@link of}\n * @see {@link throwError}\n *\n * @param {SchedulerLike} [scheduler] A {@link SchedulerLike} to use for scheduling\n * the emission of the complete notification.\n * @return {Observable} An \"empty\" Observable: emits only the complete\n * notification.\n * @static true\n * @name empty\n * @owner Observable\n * @deprecated Deprecated in favor of using {@link index/EMPTY} constant.\n */\nexport function empty(scheduler?: SchedulerLike) {\n  return scheduler ? emptyScheduled(scheduler) : EMPTY;\n}\n\nexport function emptyScheduled(scheduler: SchedulerLike) {\n  return new Observable<never>(subscriber => scheduler.schedule(() => subscriber.complete()));\n}\n","import { QueueAction } from './QueueAction';\nimport { QueueScheduler } from './QueueScheduler';\n\n/**\n *\n * Queue Scheduler\n *\n * <span class=\"informal\">Put every next task on a queue, instead of executing it immediately</span>\n *\n * `queue` scheduler, when used with delay, behaves the same as {@link asyncScheduler} scheduler.\n *\n * When used without delay, it schedules given task synchronously - executes it right when\n * it is scheduled. However when called recursively, that is when inside the scheduled task,\n * another task is scheduled with queue scheduler, instead of executing immediately as well,\n * that task will be put on a queue and wait for current one to finish.\n *\n * This means that when you execute task with `queue` scheduler, you are sure it will end\n * before any other task scheduled with that scheduler will start.\n *\n * ## Examples\n * Schedule recursively first, then do something\n * ```javascript\n * Rx.Scheduler.queue.schedule(() => {\n *   Rx.Scheduler.queue.schedule(() => console.log('second')); // will not happen now, but will be put on a queue\n *\n *   console.log('first');\n * });\n *\n * // Logs:\n * // \"first\"\n * // \"second\"\n * ```\n *\n * Reschedule itself recursively\n * ```javascript\n * Rx.Scheduler.queue.schedule(function(state) {\n *   if (state !== 0) {\n *     console.log('before', state);\n *     this.schedule(state - 1); // `this` references currently executing Action,\n *                               // which we reschedule with new state\n *     console.log('after', state);\n *   }\n * }, 0, 3);\n *\n * // In scheduler that runs recursively, you would expect:\n * // \"before\", 3\n * // \"before\", 2\n * // \"before\", 1\n * // \"after\", 1\n * // \"after\", 2\n * // \"after\", 3\n *\n * // But with queue it logs:\n * // \"before\", 3\n * // \"after\", 3\n * // \"before\", 2\n * // \"after\", 2\n * // \"before\", 1\n * // \"after\", 1\n * ```\n *\n * @static true\n * @name queue\n * @owner Scheduler\n */\n\nexport const queue = new QueueScheduler(QueueAction);\n","import { AsyncScheduler } from './AsyncScheduler';\n\nexport class QueueScheduler extends AsyncScheduler {\n}\n","import { Scheduler } from '../Scheduler';\nimport { Action } from './Action';\nimport { AsyncAction } from './AsyncAction';\nimport { SchedulerAction } from '../types';\nimport { Subscription } from '../Subscription';\n\nexport class AsyncScheduler extends Scheduler {\n  public static delegate?: Scheduler;\n  public actions: Array<AsyncAction<any>> = [];\n  /**\n   * A flag to indicate whether the Scheduler is currently executing a batch of\n   * queued actions.\n   * @type {boolean}\n   * @deprecated internal use only\n   */\n  public active: boolean = false;\n  /**\n   * An internal ID used to track the latest asynchronous task such as those\n   * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and\n   * others.\n   * @type {any}\n   * @deprecated internal use only\n   */\n  public scheduled: any = undefined;\n\n  constructor(SchedulerAction: typeof Action,\n              now: () => number = Scheduler.now) {\n    super(SchedulerAction, () => {\n      if (AsyncScheduler.delegate && AsyncScheduler.delegate !== this) {\n        return AsyncScheduler.delegate.now();\n      } else {\n        return now();\n      }\n    });\n  }\n\n  public schedule<T>(work: (this: SchedulerAction<T>, state?: T) => void, delay: number = 0, state?: T): Subscription {\n    if (AsyncScheduler.delegate && AsyncScheduler.delegate !== this) {\n      return AsyncScheduler.delegate.schedule(work, delay, state);\n    } else {\n      return super.schedule(work, delay, state);\n    }\n  }\n\n  public flush(action: AsyncAction<any>): void {\n\n    const {actions} = this;\n\n    if (this.active) {\n      actions.push(action);\n      return;\n    }\n\n    let error: any;\n    this.active = true;\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (action = actions.shift()); // exhaust the scheduler queue\n\n    this.active = false;\n\n    if (error) {\n      while (action = actions.shift()) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { Action } from './scheduler/Action';\nimport { Subscription } from './Subscription';\nimport { SchedulerLike, SchedulerAction } from './types';\n\n/**\n * An execution context and a data structure to order tasks and schedule their\n * execution. Provides a notion of (potentially virtual) time, through the\n * `now()` getter method.\n *\n * Each unit of work in a Scheduler is called an `Action`.\n *\n * ```ts\n * class Scheduler {\n *   now(): number;\n *   schedule(work, delay?, state?): Subscription;\n * }\n * ```\n *\n * @class Scheduler\n * @deprecated Scheduler is an internal implementation detail of RxJS, and\n * should not be used directly. Rather, create your own class and implement\n * {@link SchedulerLike}\n */\nexport class Scheduler implements SchedulerLike {\n\n  /**\n   * Note: the extra arrow function wrapper is to make testing by overriding\n   * Date.now easier.\n   * @nocollapse\n   */\n  public static now: () => number = () => Date.now();\n\n  constructor(private SchedulerAction: typeof Action,\n              now: () => number = Scheduler.now) {\n    this.now = now;\n  }\n\n  /**\n   * A getter method that returns a number representing the current time\n   * (at the time this function was called) according to the scheduler's own\n   * internal clock.\n   * @return {number} A number that represents the current time. May or may not\n   * have a relation to wall-clock time. May or may not refer to a time unit\n   * (e.g. milliseconds).\n   */\n  public now: () => number;\n\n  /**\n   * Schedules a function, `work`, for execution. May happen at some point in\n   * the future, according to the `delay` parameter, if specified. May be passed\n   * some context object, `state`, which will be passed to the `work` function.\n   *\n   * The given arguments will be processed an stored as an Action object in a\n   * queue of actions.\n   *\n   * @param {function(state: ?T): ?Subscription} work A function representing a\n   * task, or some unit of work to be executed by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler itself.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @return {Subscription} A subscription in order to be able to unsubscribe\n   * the scheduled work.\n   */\n  public schedule<T>(work: (this: SchedulerAction<T>, state?: T) => void, delay: number = 0, state?: T): Subscription {\n    return new this.SchedulerAction<T>(this, work).schedule(state, delay);\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { Subscription } from '../Subscription';\nimport { QueueScheduler } from './QueueScheduler';\nimport { SchedulerAction } from '../types';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class QueueAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: QueueScheduler,\n              protected work: (this: SchedulerAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n    if (delay > 0) {\n      return super.schedule(state, delay);\n    }\n    this.delay = delay;\n    this.state = state;\n    this.scheduler.flush(this);\n    return this;\n  }\n\n  public execute(state: T, delay: number): any {\n    return (delay > 0 || this.closed) ?\n      super.execute(state, delay) :\n      this._execute(state, delay) ;\n  }\n\n  protected requestAsyncId(scheduler: QueueScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Otherwise flush the scheduler starting with this action.\n    return scheduler.flush(this);\n  }\n}\n","import { Action } from './Action';\nimport { SchedulerAction } from '../types';\nimport { Subscription } from '../Subscription';\nimport { AsyncScheduler } from './AsyncScheduler';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class AsyncAction<T> extends Action<T> {\n\n  public id: any;\n  public state: T;\n  public delay: number;\n  protected pending: boolean = false;\n\n  constructor(protected scheduler: AsyncScheduler,\n              protected work: (this: SchedulerAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n\n    if (this.closed) {\n      return this;\n    }\n\n    // Always replace the current state with the new state.\n    this.state = state;\n\n    const id = this.id;\n    const scheduler = this.scheduler;\n\n    //\n    // Important implementation note:\n    //\n    // Actions only execute once by default, unless rescheduled from within the\n    // scheduled callback. This allows us to implement single and repeat\n    // actions via the same code path, without adding API surface area, as well\n    // as mimic traditional recursion but across asynchronous boundaries.\n    //\n    // However, JS runtimes and timers distinguish between intervals achieved by\n    // serial `setTimeout` calls vs. a single `setInterval` call. An interval of\n    // serial `setTimeout` calls can be individually delayed, which delays\n    // scheduling the next `setTimeout`, and so on. `setInterval` attempts to\n    // guarantee the interval callback will be invoked more precisely to the\n    // interval period, regardless of load.\n    //\n    // Therefore, we use `setInterval` to schedule single and repeat actions.\n    // If the action reschedules itself with the same delay, the interval is not\n    // canceled. If the action doesn't reschedule, or reschedules with a\n    // different delay, the interval will be canceled after scheduled callback\n    // execution.\n    //\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, delay);\n    }\n\n    // Set the pending flag indicating that this action has been scheduled, or\n    // has recursively rescheduled itself.\n    this.pending = true;\n\n    this.delay = delay;\n    // If this action has already an async Id, don't request a new one.\n    this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);\n\n    return this;\n  }\n\n  protected requestAsyncId(scheduler: AsyncScheduler, id?: any, delay: number = 0): any {\n    return setInterval(scheduler.flush.bind(scheduler, this), delay);\n  }\n\n  protected recycleAsyncId(scheduler: AsyncScheduler, id: any, delay: number = 0): any {\n    // If this action is rescheduled with the same delay time, don't clear the interval id.\n    if (delay !== null && this.delay === delay && this.pending === false) {\n      return id;\n    }\n    // Otherwise, if the action's delay time is different from the current delay,\n    // or the action has been rescheduled before it's executed, clear the interval id\n    clearInterval(id);\n  }\n\n  /**\n   * Immediately executes this action and the `work` it contains.\n   * @return {any}\n   */\n  public execute(state: T, delay: number): any {\n\n    if (this.closed) {\n      return new Error('executing a cancelled action');\n    }\n\n    this.pending = false;\n    const error = this._execute(state, delay);\n    if (error) {\n      return error;\n    } else if (this.pending === false && this.id != null) {\n      // Dequeue if the action didn't reschedule itself. Don't call\n      // unsubscribe(), because the action could reschedule later.\n      // For example:\n      // ```\n      // scheduler.schedule(function doWork(counter) {\n      //   /* ... I'm a busy worker bee ... */\n      //   var originalAction = this;\n      //   /* wait 100ms before rescheduling the action */\n      //   setTimeout(function () {\n      //     originalAction.schedule(counter + 1);\n      //   }, 100);\n      // }, 1000);\n      // ```\n      this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n    }\n  }\n\n  protected _execute(state: T, delay: number): any {\n    let errored: boolean = false;\n    let errorValue: any = undefined;\n    try {\n      this.work(state);\n    } catch (e) {\n      errored = true;\n      errorValue = !!e && e || new Error(e);\n    }\n    if (errored) {\n      this.unsubscribe();\n      return errorValue;\n    }\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _unsubscribe() {\n\n    const id = this.id;\n    const scheduler = this.scheduler;\n    const actions = scheduler.actions;\n    const index = actions.indexOf(this);\n\n    this.work  = null;\n    this.state = null;\n    this.pending = false;\n    this.scheduler = null;\n\n    if (index !== -1) {\n      actions.splice(index, 1);\n    }\n\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, null);\n    }\n\n    this.delay = null;\n  }\n}\n","import { Scheduler } from '../Scheduler';\nimport { Subscription } from '../Subscription';\nimport { SchedulerAction } from '../types';\n\n/**\n * A unit of work to be executed in a `scheduler`. An action is typically\n * created from within a {@link SchedulerLike} and an RxJS user does not need to concern\n * themselves about creating and manipulating an Action.\n *\n * ```ts\n * class Action<T> extends Subscription {\n *   new (scheduler: Scheduler, work: (state?: T) => void);\n *   schedule(state?: T, delay: number = 0): Subscription;\n * }\n * ```\n *\n * @class Action<T>\n */\nexport class Action<T> extends Subscription {\n  constructor(scheduler: Scheduler, work: (this: SchedulerAction<T>, state?: T) => void) {\n    super();\n  }\n  /**\n   * Schedules this action on its parent {@link SchedulerLike} for execution. May be passed\n   * some context object, `state`. May happen at some point in the future,\n   * according to the `delay` parameter, if specified.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler.\n   * @return {void}\n   */\n  public schedule(state?: T, delay: number = 0): Subscription {\n    return this;\n  }\n}\n","import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { SubscriptionLike } from './types';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\n\n/**\n * A variant of Subject that requires an initial value and emits its current\n * value whenever it is subscribed to.\n *\n * @class BehaviorSubject<T>\n */\nexport class BehaviorSubject<T> extends Subject<T> {\n\n  constructor(private _value: T) {\n    super();\n  }\n\n  get value(): T {\n    return this.getValue();\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<T>): Subscription {\n    const subscription = super._subscribe(subscriber);\n    if (subscription && !(<SubscriptionLike>subscription).closed) {\n      subscriber.next(this._value);\n    }\n    return subscription;\n  }\n\n  getValue(): T {\n    if (this.hasError) {\n      throw this.thrownError;\n    } else if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return this._value;\n    }\n  }\n\n  next(value: T): void {\n    super.next(this._value = value);\n  }\n}\n","import { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { Operator } from '../Operator';\nimport { Subject } from '../Subject';\nimport { OperatorFunction } from '../types';\n\n/* tslint:disable:max-line-length */\nexport function groupBy<T, K>(keySelector: (value: T) => K): OperatorFunction<T, GroupedObservable<K, T>>;\nexport function groupBy<T, K>(keySelector: (value: T) => K, elementSelector: void, durationSelector: (grouped: GroupedObservable<K, T>) => Observable<any>): OperatorFunction<T, GroupedObservable<K, T>>;\nexport function groupBy<T, K, R>(keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>): OperatorFunction<T, GroupedObservable<K, R>>;\nexport function groupBy<T, K, R>(keySelector: (value: T) => K, elementSelector?: (value: T) => R, durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>, subjectSelector?: () => Subject<R>): OperatorFunction<T, GroupedObservable<K, R>>;\n/* tslint:enable:max-line-length */\n\n/**\n * Groups the items emitted by an Observable according to a specified criterion,\n * and emits these grouped items as `GroupedObservables`, one\n * {@link GroupedObservable} per group.\n *\n * ![](groupBy.png)\n *\n * When the Observable emits an item, a key is computed for this item with the keySelector function.\n *\n * If a {@link GroupedObservable} for this key exists, this {@link GroupedObservable} emits. Elsewhere, a new\n * {@link GroupedObservable} for this key is created and emits.\n *\n * A {@link GroupedObservable} represents values belonging to the same group represented by a common key. The common\n * key is available as the key field of a {@link GroupedObservable} instance.\n *\n * The elements emitted by {@link GroupedObservable}s are by default the items emitted by the Observable, or elements\n * returned by the elementSelector function.\n *\n * ## Examples\n * ### Group objects by id and return as array\n * ```javascript\n * import { mergeMap, groupBy } from 'rxjs/operators';\n * import { of } from 'rxjs/observable/of';\n *\n * interface Obj {\n *    id: number,\n *    name: string,\n * }\n *\n * of<Obj>(\n *   {id: 1, name: 'javascript'},\n *   {id: 2, name: 'parcel'},\n *   {id: 2, name: 'webpack'},\n *   {id: 1, name: 'typescript'},\n *   {id: 3, name: 'tslint'}\n * ).pipe(\n *   groupBy(p => p.id),\n *   mergeMap((group$) => group$.pipe(reduce((acc, cur) => [...acc, cur], []))),\n * )\n * .subscribe(p => console.log(p));\n *\n * // displays:\n * // [ { id: 1, name: 'javascript'},\n * //   { id: 1, name: 'typescript'} ]\n * //\n * // [ { id: 2, name: 'parcel'},\n * //   { id: 2, name: 'webpack'} ]\n * //\n * // [ { id: 3, name: 'tslint'} ]\n * ```\n *\n * ### Pivot data on the id field\n * ```javascript\n * import { mergeMap, groupBy, map } from 'rxjs/operators';\n * import { of } from 'rxjs/observable/of';\n *\n * of<Obj>(\n *   {id: 1, name: 'javascript'},\n *   {id: 2, name: 'parcel'},\n *   {id: 2, name: 'webpack'},\n *   {id: 1, name: 'typescript'}\n *   {id: 3, name: 'tslint'}\n * ).pipe(\n *   groupBy(p => p.id, p => p.name),\n *   mergeMap( (group$) => group$.pipe(reduce((acc, cur) => [...acc, cur], [\"\" + group$.key]))),\n *   map(arr => ({'id': parseInt(arr[0]), 'values': arr.slice(1)})),\n * )\n * .subscribe(p => console.log(p));\n *\n * // displays:\n * // { id: 1, values: [ 'javascript', 'typescript' ] }\n * // { id: 2, values: [ 'parcel', 'webpack' ] }\n * // { id: 3, values: [ 'tslint' ] }\n * ```\n *\n * @param {function(value: T): K} keySelector A function that extracts the key\n * for each item.\n * @param {function(value: T): R} [elementSelector] A function that extracts the\n * return element for each item.\n * @param {function(grouped: GroupedObservable<K,R>): Observable<any>} [durationSelector]\n * A function that returns an Observable to determine how long each group should\n * exist.\n * @return {Observable<GroupedObservable<K,R>>} An Observable that emits\n * GroupedObservables, each of which corresponds to a unique key value and each\n * of which emits those items from the source Observable that share that key\n * value.\n * @method groupBy\n * @owner Observable\n */\nexport function groupBy<T, K, R>(keySelector: (value: T) => K,\n                                 elementSelector?: ((value: T) => R) | void,\n                                 durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n                                 subjectSelector?: () => Subject<R>): OperatorFunction<T, GroupedObservable<K, R>> {\n  return (source: Observable<T>) =>\n    source.lift(new GroupByOperator(keySelector, elementSelector, durationSelector, subjectSelector));\n}\n\nexport interface RefCountSubscription {\n  count: number;\n  unsubscribe: () => void;\n  closed: boolean;\n  attemptedToUnsubscribe: boolean;\n}\n\nclass GroupByOperator<T, K, R> implements Operator<T, GroupedObservable<K, R>> {\n  constructor(private keySelector: (value: T) => K,\n              private elementSelector?: ((value: T) => R) | void,\n              private durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n              private subjectSelector?: () => Subject<R>) {\n  }\n\n  call(subscriber: Subscriber<GroupedObservable<K, R>>, source: any): any {\n    return source.subscribe(new GroupBySubscriber(\n      subscriber, this.keySelector, this.elementSelector, this.durationSelector, this.subjectSelector\n    ));\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass GroupBySubscriber<T, K, R> extends Subscriber<T> implements RefCountSubscription {\n  private groups: Map<K, Subject<T | R>> = null;\n  public attemptedToUnsubscribe: boolean = false;\n  public count: number = 0;\n\n  constructor(destination: Subscriber<GroupedObservable<K, R>>,\n              private keySelector: (value: T) => K,\n              private elementSelector?: ((value: T) => R) | void,\n              private durationSelector?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n              private subjectSelector?: () => Subject<R>) {\n    super(destination);\n  }\n\n  protected _next(value: T): void {\n    let key: K;\n    try {\n      key = this.keySelector(value);\n    } catch (err) {\n      this.error(err);\n      return;\n    }\n\n    this._group(value, key);\n  }\n\n  private _group(value: T, key: K) {\n    let groups = this.groups;\n\n    if (!groups) {\n      groups = this.groups = new Map<K, Subject<T | R>>();\n    }\n\n    let group = groups.get(key);\n\n    let element: R;\n    if (this.elementSelector) {\n      try {\n        element = this.elementSelector(value);\n      } catch (err) {\n        this.error(err);\n      }\n    } else {\n      element = <any>value;\n    }\n\n    if (!group) {\n      group = (this.subjectSelector ? this.subjectSelector() : new Subject<R>()) as Subject<T | R>;\n      groups.set(key, group);\n      const groupedObservable = new GroupedObservable(key, group, this);\n      this.destination.next(groupedObservable);\n      if (this.durationSelector) {\n        let duration: any;\n        try {\n          duration = this.durationSelector(new GroupedObservable<K, R>(key, <Subject<R>>group));\n        } catch (err) {\n          this.error(err);\n          return;\n        }\n        this.add(duration.subscribe(new GroupDurationSubscriber(key, group, this)));\n      }\n    }\n\n    if (!group.closed) {\n      group.next(element);\n    }\n  }\n\n  protected _error(err: any): void {\n    const groups = this.groups;\n    if (groups) {\n      groups.forEach((group, key) => {\n        group.error(err);\n      });\n\n      groups.clear();\n    }\n    this.destination.error(err);\n  }\n\n  protected _complete(): void {\n    const groups = this.groups;\n    if (groups) {\n      groups.forEach((group, key) => {\n        group.complete();\n      });\n\n      groups.clear();\n    }\n    this.destination.complete();\n  }\n\n  removeGroup(key: K): void {\n    this.groups.delete(key);\n  }\n\n  unsubscribe() {\n    if (!this.closed) {\n      this.attemptedToUnsubscribe = true;\n      if (this.count === 0) {\n        super.unsubscribe();\n      }\n    }\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass GroupDurationSubscriber<K, T> extends Subscriber<T> {\n  constructor(private key: K,\n              private group: Subject<T>,\n              private parent: GroupBySubscriber<any, K, T | any>) {\n    super(group);\n  }\n\n  protected _next(value: T): void {\n    this.complete();\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _unsubscribe() {\n    const { parent, key } = this;\n    this.key = this.parent = null;\n    if (parent) {\n      parent.removeGroup(key);\n    }\n  }\n}\n\n/**\n * An Observable representing values belonging to the same group represented by\n * a common key. The values emitted by a GroupedObservable come from the source\n * Observable. The common key is available as the field `key` on a\n * GroupedObservable instance.\n *\n * @class GroupedObservable<K, T>\n */\nexport class GroupedObservable<K, T> extends Observable<T> {\n  /** @deprecated Do not construct this type. Internal use only */\n  constructor(public key: K,\n              private groupSubject: Subject<T>,\n              private refCountSubscription?: RefCountSubscription) {\n    super();\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<T>) {\n    const subscription = new Subscription();\n    const { refCountSubscription, groupSubject } = this;\n    if (refCountSubscription && !refCountSubscription.closed) {\n      subscription.add(new InnerRefCountSubscription(refCountSubscription));\n    }\n    subscription.add(groupSubject.subscribe(subscriber));\n    return subscription;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass InnerRefCountSubscription extends Subscription {\n  constructor(private parent: RefCountSubscription) {\n    super();\n    parent.count++;\n  }\n\n  unsubscribe() {\n    const parent = this.parent;\n    if (!parent.closed && !this.closed) {\n      super.unsubscribe();\n      parent.count -= 1;\n      if (parent.count === 0 && parent.attemptedToUnsubscribe) {\n        parent.unsubscribe();\n      }\n    }\n  }\n}\n","import { Subject, SubjectSubscriber } from '../Subject';\nimport { Operator } from '../Operator';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { TeardownLogic } from '../types';\nimport { refCount as higherOrderRefCount } from '../operators/refCount';\n\n/**\n * @class ConnectableObservable<T>\n */\nexport class ConnectableObservable<T> extends Observable<T> {\n\n  protected _subject: Subject<T>;\n  protected _refCount: number = 0;\n  protected _connection: Subscription;\n  /** @internal */\n  _isComplete = false;\n\n  constructor(public source: Observable<T>,\n              protected subjectFactory: () => Subject<T>) {\n    super();\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<T>) {\n    return this.getSubject().subscribe(subscriber);\n  }\n\n  protected getSubject(): Subject<T> {\n    const subject = this._subject;\n    if (!subject || subject.isStopped) {\n      this._subject = this.subjectFactory();\n    }\n    return this._subject;\n  }\n\n  connect(): Subscription {\n    let connection = this._connection;\n    if (!connection) {\n      this._isComplete = false;\n      connection = this._connection = new Subscription();\n      connection.add(this.source\n        .subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n      if (connection.closed) {\n        this._connection = null;\n        connection = Subscription.EMPTY;\n      } else {\n        this._connection = connection;\n      }\n    }\n    return connection;\n  }\n\n  refCount(): Observable<T> {\n    return higherOrderRefCount()(this) as Observable<T>;\n  }\n}\n\nconst connectableProto = <any>ConnectableObservable.prototype;\n\nexport const connectableObservableDescriptor: PropertyDescriptorMap = {\n  operator: { value: null },\n  _refCount: { value: 0, writable: true },\n  _subject: { value: null, writable: true },\n  _connection: { value: null, writable: true },\n  _subscribe: { value: connectableProto._subscribe },\n  _isComplete: { value: connectableProto._isComplete, writable: true },\n  getSubject: { value: connectableProto.getSubject },\n  connect: { value: connectableProto.connect },\n  refCount: { value: connectableProto.refCount }\n};\n\nclass ConnectableSubscriber<T> extends SubjectSubscriber<T> {\n  constructor(destination: Subject<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n  protected _error(err: any): void {\n    this._unsubscribe();\n    super._error(err);\n  }\n  protected _complete(): void {\n    this.connectable._isComplete = true;\n    this._unsubscribe();\n    super._complete();\n  }\n  protected _unsubscribe() {\n    const connectable = <any>this.connectable;\n    if (connectable) {\n      this.connectable = null;\n      const connection = connectable._connection;\n      connectable._refCount = 0;\n      connectable._subject = null;\n      connectable._connection = null;\n      if (connection) {\n        connection.unsubscribe();\n      }\n    }\n  }\n}\n\nclass RefCountOperator<T> implements Operator<T, T> {\n  constructor(private connectable: ConnectableObservable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n\n    const { connectable } = this;\n    (<any> connectable)._refCount++;\n\n    const refCounter = new RefCountSubscriber(subscriber, connectable);\n    const subscription = source.subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      (<any> refCounter).connection = connectable.connect();\n    }\n\n    return subscription;\n  }\n}\n\nclass RefCountSubscriber<T> extends Subscriber<T> {\n\n  private connection: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n\n  protected _unsubscribe() {\n\n    const { connectable } = this;\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n\n    this.connectable = null;\n    const refCount = (<any> connectable)._refCount;\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n\n    (<any> connectable)._refCount = refCount - 1;\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n\n    ///\n    // Compare the local RefCountSubscriber's connection Subscription to the\n    // connection Subscription on the shared ConnectableObservable. In cases\n    // where the ConnectableObservable source synchronously emits values, and\n    // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n    // execution continues to here before the RefCountOperator has a chance to\n    // supply the RefCountSubscriber with the shared connection Subscription.\n    // For example:\n    // ```\n    // range(0, 10).pipe(\n    //   publish(),\n    //   refCount(),\n    //   take(5),\n    // ).subscribe();\n    // ```\n    // In order to account for this case, RefCountSubscriber should only dispose\n    // the ConnectableObservable's shared connection Subscription if the\n    // connection Subscription exists, *and* either:\n    //   a. RefCountSubscriber doesn't have a reference to the shared connection\n    //      Subscription yet, or,\n    //   b. RefCountSubscriber's connection Subscription reference is identical\n    //      to the shared connection Subscription\n    ///\n    const { connection } = this;\n    const sharedConnection = (<any> connectable)._connection;\n    this.connection = null;\n\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  }\n}\n","import { Operator } from '../Operator';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { MonoTypeOperatorFunction, TeardownLogic } from '../types';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { Observable } from '../Observable';\n\nexport function refCount<T>(): MonoTypeOperatorFunction<T> {\n  return function refCountOperatorFunction(source: ConnectableObservable<T>): Observable<T> {\n    return source.lift(new RefCountOperator(source));\n  } as MonoTypeOperatorFunction<T>;\n}\n\nclass RefCountOperator<T> implements Operator<T, T> {\n  constructor(private connectable: ConnectableObservable<T>) {\n  }\n  call(subscriber: Subscriber<T>, source: any): TeardownLogic {\n\n    const { connectable } = this;\n    (<any> connectable)._refCount++;\n\n    const refCounter = new RefCountSubscriber(subscriber, connectable);\n    const subscription = source.subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      (<any> refCounter).connection = connectable.connect();\n    }\n\n    return subscription;\n  }\n}\n\nclass RefCountSubscriber<T> extends Subscriber<T> {\n\n  private connection: Subscription;\n\n  constructor(destination: Subscriber<T>,\n              private connectable: ConnectableObservable<T>) {\n    super(destination);\n  }\n\n  protected _unsubscribe() {\n\n    const { connectable } = this;\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n\n    this.connectable = null;\n    const refCount = (<any> connectable)._refCount;\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n\n    (<any> connectable)._refCount = refCount - 1;\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    }\n\n    ///\n    // Compare the local RefCountSubscriber's connection Subscription to the\n    // connection Subscription on the shared ConnectableObservable. In cases\n    // where the ConnectableObservable source synchronously emits values, and\n    // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n    // execution continues to here before the RefCountOperator has a chance to\n    // supply the RefCountSubscriber with the shared connection Subscription.\n    // For example:\n    // ```\n    // range(0, 10).pipe(\n    //   publish(),\n    //   refCount(),\n    //   take(5),\n    // )\n    // .subscribe();\n    // ```\n    // In order to account for this case, RefCountSubscriber should only dispose\n    // the ConnectableObservable's shared connection Subscription if the\n    // connection Subscription exists, *and* either:\n    //   a. RefCountSubscriber doesn't have a reference to the shared connection\n    //      Subscription yet, or,\n    //   b. RefCountSubscriber's connection Subscription reference is identical\n    //      to the shared connection Subscription\n    ///\n    const { connection } = this;\n    const sharedConnection = (<any> connectable)._connection;\n    this.connection = null;\n\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  }\n}\n","import { Operator } from './Operator';\nimport { Observable } from './Observable';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { Observer, SubscriptionLike, TeardownLogic } from './types';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\nimport { rxSubscriber as rxSubscriberSymbol } from '../internal/symbol/rxSubscriber';\n\n/**\n * @class SubjectSubscriber<T>\n */\nexport class SubjectSubscriber<T> extends Subscriber<T> {\n  constructor(protected destination: Subject<T>) {\n    super(destination);\n  }\n}\n\n/**\n * A Subject is a special type of Observable that allows values to be\n * multicasted to many Observables. Subjects are like EventEmitters.\n *\n * Every Subject is an Observable and an Observer. You can subscribe to a\n * Subject, and you can call next to feed values as well as error and complete.\n *\n * @class Subject<T>\n */\nexport class Subject<T> extends Observable<T> implements SubscriptionLike {\n\n  [rxSubscriberSymbol]() {\n    return new SubjectSubscriber(this);\n  }\n\n  observers: Observer<T>[] = [];\n\n  closed = false;\n\n  isStopped = false;\n\n  hasError = false;\n\n  thrownError: any = null;\n\n  constructor() {\n    super();\n  }\n\n  /**@nocollapse */\n  static create: Function = <T>(destination: Observer<T>, source: Observable<T>): AnonymousSubject<T> => {\n    return new AnonymousSubject<T>(destination, source);\n  }\n\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const subject = new AnonymousSubject(this, this);\n    subject.operator = <any>operator;\n    return <any>subject;\n  }\n\n  next(value?: T) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    if (!this.isStopped) {\n      const { observers } = this;\n      const len = observers.length;\n      const copy = observers.slice();\n      for (let i = 0; i < len; i++) {\n        copy[i].next(value);\n      }\n    }\n  }\n\n  error(err: any) {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.hasError = true;\n    this.thrownError = err;\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].error(err);\n    }\n    this.observers.length = 0;\n  }\n\n  complete() {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n    this.isStopped = true;\n    const { observers } = this;\n    const len = observers.length;\n    const copy = observers.slice();\n    for (let i = 0; i < len; i++) {\n      copy[i].complete();\n    }\n    this.observers.length = 0;\n  }\n\n  unsubscribe() {\n    this.isStopped = true;\n    this.closed = true;\n    this.observers = null;\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _trySubscribe(subscriber: Subscriber<T>): TeardownLogic {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else {\n      return super._trySubscribe(subscriber);\n    }\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<T>): Subscription {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    } else if (this.hasError) {\n      subscriber.error(this.thrownError);\n      return Subscription.EMPTY;\n    } else if (this.isStopped) {\n      subscriber.complete();\n      return Subscription.EMPTY;\n    } else {\n      this.observers.push(subscriber);\n      return new SubjectSubscription(this, subscriber);\n    }\n  }\n\n  /**\n   * Creates a new Observable with this Subject as the source. You can do this\n   * to create customize Observer-side logic of the Subject and conceal it from\n   * code that uses the Observable.\n   * @return {Observable} Observable that the Subject casts to\n   */\n  asObservable(): Observable<T> {\n    const observable = new Observable<T>();\n    (<any>observable).source = this;\n    return observable;\n  }\n}\n\n/**\n * @class AnonymousSubject<T>\n */\nexport class AnonymousSubject<T> extends Subject<T> {\n  constructor(protected destination?: Observer<T>, source?: Observable<T>) {\n    super();\n    this.source = source;\n  }\n\n  next(value: T) {\n    const { destination } = this;\n    if (destination && destination.next) {\n      destination.next(value);\n    }\n  }\n\n  error(err: any) {\n    const { destination } = this;\n    if (destination && destination.error) {\n      this.destination.error(err);\n    }\n  }\n\n  complete() {\n    const { destination } = this;\n    if (destination && destination.complete) {\n      this.destination.complete();\n    }\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<T>): Subscription {\n    const { source } = this;\n    if (source) {\n      return this.source.subscribe(subscriber);\n    } else {\n      return Subscription.EMPTY;\n    }\n  }\n}\n","import { Subject } from './Subject';\nimport { Observer } from './types';\nimport { Subscription } from './Subscription';\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SubjectSubscription<T> extends Subscription {\n  closed: boolean = false;\n\n  constructor(public subject: Subject<T>, public subscriber: Observer<T>) {\n    super();\n  }\n\n  unsubscribe() {\n    if (this.closed) {\n      return;\n    }\n\n    this.closed = true;\n\n    const subject = this.subject;\n    const observers = subject.observers;\n\n    this.subject = null;\n\n    if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {\n      return;\n    }\n\n    const subscriberIndex = observers.indexOf(this.subscriber);\n\n    if (subscriberIndex !== -1) {\n      observers.splice(subscriberIndex, 1);\n    }\n  }\n}\n","export interface ObjectUnsubscribedError extends Error {\n}\n\nexport interface ObjectUnsubscribedErrorCtor {\n  new(): ObjectUnsubscribedError;\n}\n\nfunction ObjectUnsubscribedErrorImpl(this: any) {\n  Error.call(this);\n  this.message = 'object unsubscribed';\n  this.name = 'ObjectUnsubscribedError';\n  return this;\n}\n\nObjectUnsubscribedErrorImpl.prototype = Object.create(Error.prototype);\n\n/**\n * An error thrown when an action is invalid because the object has been\n * unsubscribed.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n *\n * @class ObjectUnsubscribedError\n */\nexport const ObjectUnsubscribedError: ObjectUnsubscribedErrorCtor = ObjectUnsubscribedErrorImpl as any;","import { Operator } from './Operator';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { TeardownLogic, OperatorFunction, PartialObserver, Subscribable } from './types';\nimport { canReportError } from './util/canReportError';\nimport { toSubscriber } from './util/toSubscriber';\nimport { iif } from './observable/iif';\nimport { throwError } from './observable/throwError';\nimport { observable as Symbol_observable } from '../internal/symbol/observable';\nimport { pipeFromArray } from './util/pipe';\nimport { config } from './config';\n\n/**\n * A representation of any set of values over any amount of time. This is the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nexport class Observable<T> implements Subscribable<T> {\n\n  /** Internal implementation detail, do not use directly. */\n  public _isScalar: boolean = false;\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  source: Observable<any>;\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  operator: Operator<any, T>;\n\n  /**\n   * @constructor\n   * @param {Function} subscribe the function that is called when the Observable is\n   * initially subscribed to. This function is given a Subscriber, to which new values\n   * can be `next`ed, or an `error` method can be called to raise an error, or\n   * `complete` can be called to notify of a successful completion.\n   */\n  constructor(subscribe?: (this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic) {\n    if (subscribe) {\n      this._subscribe = subscribe;\n    }\n  }\n\n  // HACK: Since TypeScript inherits static properties too, we have to\n  // fight against TypeScript here so Subject can have a different static create signature\n  /**\n   * Creates a new cold Observable by calling the Observable constructor\n   * @static true\n   * @owner Observable\n   * @method create\n   * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n   * @return {Observable} a new cold observable\n   * @nocollapse\n   */\n  static create: Function = <T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\n    return new Observable<T>(subscribe);\n  }\n\n  /**\n   * Creates a new Observable, with this Observable as the source, and the passed\n   * operator defined as the new observable's operator.\n   * @method lift\n   * @param {Operator} operator the operator defining the operation to take on the observable\n   * @return {Observable} a new observable with the Operator applied\n   */\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const observable = new Observable<R>();\n    observable.source = this;\n    observable.operator = operator;\n    return observable;\n  }\n\n  subscribe(observer?: PartialObserver<T>): Subscription;\n  subscribe(next?: (value: T) => void, error?: (error: any) => void, complete?: () => void): Subscription;\n  /**\n   * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.\n   *\n   * <span class=\"informal\">Use it when you have all these Observables, but still nothing is happening.</span>\n   *\n   * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It\n   * might be for example a function that you passed to Observable's constructor, but most of the time it is\n   * a library implementation, which defines what will be emitted by an Observable, and when it be will emitted. This means\n   * that calling `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often\n   * the thought.\n   *\n   * Apart from starting the execution of an Observable, this method allows you to listen for values\n   * that an Observable emits, as well as for when it completes or errors. You can achieve this in two\n   * of the following ways.\n   *\n   * The first way is creating an object that implements {@link Observer} interface. It should have methods\n   * defined by that interface, but note that it should be just a regular JavaScript object, which you can create\n   * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular do\n   * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also\n   * that your object does not have to implement all methods. If you find yourself creating a method that doesn't\n   * do anything, you can simply omit it. Note however, if the `error` method is not provided, all errors will\n   * be left uncaught.\n   *\n   * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.\n   * This means you can provide three functions as arguments to `subscribe`, where the first function is equivalent\n   * of a `next` method, the second of an `error` method and the third of a `complete` method. Just as in case of Observer,\n   * if you do not need to listen for something, you can omit a function, preferably by passing `undefined` or `null`,\n   * since `subscribe` recognizes these functions by where they were placed in function call. When it comes\n   * to `error` function, just as before, if not provided, errors emitted by an Observable will be thrown.\n   *\n   * Whichever style of calling `subscribe` you use, in both cases it returns a Subscription object.\n   * This object allows you to call `unsubscribe` on it, which in turn will stop the work that an Observable does and will clean\n   * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback\n   * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.\n   *\n   * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.\n   * It is an Observable itself that decides when these functions will be called. For example {@link of}\n   * by default emits all its values synchronously. Always check documentation for how given Observable\n   * will behave when subscribed and if its default behavior can be modified with a `scheduler`.\n   *\n   * ## Example\n   * ### Subscribe with an Observer\n   * ```javascript\n   * const sumObserver = {\n   *   sum: 0,\n   *   next(value) {\n   *     console.log('Adding: ' + value);\n   *     this.sum = this.sum + value;\n   *   },\n   *   error() { // We actually could just remove this method,\n   *   },        // since we do not really care about errors right now.\n   *   complete() {\n   *     console.log('Sum equals: ' + this.sum);\n   *   }\n   * };\n   *\n   * Rx.Observable.of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.\n   * .subscribe(sumObserver);\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   * ```\n   *\n   * ### Subscribe with functions\n   * ```javascript\n   * let sum = 0;\n   *\n   * Rx.Observable.of(1, 2, 3)\n   * .subscribe(\n   *   function(value) {\n   *     console.log('Adding: ' + value);\n   *     sum = sum + value;\n   *   },\n   *   undefined,\n   *   function() {\n   *     console.log('Sum equals: ' + sum);\n   *   }\n   * );\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   * ```\n   *\n   * ### Cancel a subscription\n   * ```javascript\n   * const subscription = Rx.Observable.interval(1000).subscribe(\n   *   num => console.log(num),\n   *   undefined,\n   *   () => console.log('completed!') // Will not be called, even\n   * );                                // when cancelling subscription\n   *\n   *\n   * setTimeout(() => {\n   *   subscription.unsubscribe();\n   *   console.log('unsubscribed!');\n   * }, 2500);\n   *\n   * // Logs:\n   * // 0 after 1s\n   * // 1 after 2s\n   * // \"unsubscribed!\" after 2.5s\n   * ```\n   *\n   * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,\n   *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed\n   *  Observable.\n   * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,\n   *  the error will be thrown as unhandled.\n   * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.\n   * @return {ISubscription} a subscription reference to the registered handlers\n   * @method subscribe\n   */\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): Subscription {\n\n    const { operator } = this;\n    const sink = toSubscriber(observerOrNext, error, complete);\n\n    if (operator) {\n      operator.call(sink, this.source);\n    } else {\n      sink.add(\n        this.source || (config.useDeprecatedSynchronousErrorHandling && !sink.syncErrorThrowable) ?\n        this._subscribe(sink) :\n        this._trySubscribe(sink)\n      );\n    }\n\n    if (config.useDeprecatedSynchronousErrorHandling) {\n      if (sink.syncErrorThrowable) {\n        sink.syncErrorThrowable = false;\n        if (sink.syncErrorThrown) {\n          throw sink.syncErrorValue;\n        }\n      }\n    }\n\n    return sink;\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _trySubscribe(sink: Subscriber<T>): TeardownLogic {\n    try {\n      return this._subscribe(sink);\n    } catch (err) {\n      if (config.useDeprecatedSynchronousErrorHandling) {\n        sink.syncErrorThrown = true;\n        sink.syncErrorValue = err;\n      }\n      if (canReportError(sink)) {\n        sink.error(err);\n      } else {\n        console.warn(err);\n      }\n    }\n  }\n\n  /**\n   * @method forEach\n   * @param {Function} next a handler for each value emitted by the observable\n   * @param {PromiseConstructor} [promiseCtor] a constructor function used to instantiate the Promise\n   * @return {Promise} a promise that either resolves on observable completion or\n   *  rejects with the handled error\n   */\n  forEach(next: (value: T) => void, promiseCtor?: PromiseConstructorLike): Promise<void> {\n    promiseCtor = getPromiseCtor(promiseCtor);\n\n    return new promiseCtor<void>((resolve, reject) => {\n      // Must be declared in a separate statement to avoid a RefernceError when\n      // accessing subscription below in the closure due to Temporal Dead Zone.\n      let subscription: Subscription;\n      subscription = this.subscribe((value) => {\n        try {\n          next(value);\n        } catch (err) {\n          reject(err);\n          if (subscription) {\n            subscription.unsubscribe();\n          }\n        }\n      }, reject, resolve);\n    }) as Promise<void>;\n  }\n\n  /** @internal This is an internal implementation detail, do not use. */\n  _subscribe(subscriber: Subscriber<any>): TeardownLogic {\n    const { source } = this;\n    return source && source.subscribe(subscriber);\n  }\n\n  // `if` and `throw` are special snow flakes, the compiler sees them as reserved words. Deprecated in\n  // favor of iif and throwError functions.\n  /**\n   * @nocollapse\n   * @deprecated In favor of iif creation function: import { iif } from 'rxjs';\n   */\n  static if: typeof iif;\n  /**\n   * @nocollapse\n   * @deprecated In favor of throwError creation function: import { throwError } from 'rxjs';\n   */\n  static throw: typeof throwError;\n\n  /**\n   * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n   * @method Symbol.observable\n   * @return {Observable} this instance of the observable\n   */\n  [Symbol_observable]() {\n    return this;\n  }\n\n  /* tslint:disable:max-line-length */\n  pipe(): Observable<T>;\n  pipe<A>(op1: OperatorFunction<T, A>): Observable<A>;\n  pipe<A, B>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>): Observable<B>;\n  pipe<A, B, C>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>): Observable<C>;\n  pipe<A, B, C, D>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>): Observable<D>;\n  pipe<A, B, C, D, E>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>): Observable<E>;\n  pipe<A, B, C, D, E, F>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>): Observable<F>;\n  pipe<A, B, C, D, E, F, G>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>): Observable<G>;\n  pipe<A, B, C, D, E, F, G, H>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>): Observable<H>;\n  pipe<A, B, C, D, E, F, G, H, I>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>, op9: OperatorFunction<H, I>): Observable<I>;\n  pipe<A, B, C, D, E, F, G, H, I>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>, op9: OperatorFunction<H, I>, ...operations: OperatorFunction<any, any>[]): Observable<{}>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Used to stitch together functional operators into a chain.\n   * @method pipe\n   * @return {Observable} the Observable result of all of the operators having\n   * been called in the order they were passed in.\n   *\n   * ### Example\n   * ```javascript\n   * import { map, filter, scan } from 'rxjs/operators';\n   *\n   * Rx.Observable.interval(1000)\n   *   .pipe(\n   *     filter(x => x % 2 === 0),\n   *     map(x => x + x),\n   *     scan((acc, x) => acc + x)\n   *   )\n   *   .subscribe(x => console.log(x))\n   * ```\n   */\n  pipe(...operations: OperatorFunction<any, any>[]): Observable<any> {\n    if (operations.length === 0) {\n      return this as any;\n    }\n\n    return pipeFromArray(operations)(this);\n  }\n\n  /* tslint:disable:max-line-length */\n  toPromise<T>(this: Observable<T>): Promise<T>;\n  toPromise<T>(this: Observable<T>, PromiseCtor: typeof Promise): Promise<T>;\n  toPromise<T>(this: Observable<T>, PromiseCtor: PromiseConstructorLike): Promise<T>;\n  /* tslint:enable:max-line-length */\n\n  toPromise(promiseCtor?: PromiseConstructorLike): Promise<T> {\n    promiseCtor = getPromiseCtor(promiseCtor);\n\n    return new promiseCtor((resolve, reject) => {\n      let value: any;\n      this.subscribe((x: T) => value = x, (err: any) => reject(err), () => resolve(value));\n    }) as Promise<T>;\n  }\n}\n\n/**\n * Decides between a passed promise constructor from consuming code,\n * A default configured promise constructor, and the native promise\n * constructor and returns it. If nothing can be found, it will throw\n * an error.\n * @param promiseCtor The optional promise constructor to passed by consuming code\n */\nfunction getPromiseCtor(promiseCtor: PromiseConstructorLike | undefined) {\n  if (!promiseCtor) {\n    promiseCtor = config.Promise || Promise;\n  }\n\n  if (!promiseCtor) {\n    throw new Error('no Promise impl found');\n  }\n\n  return promiseCtor;\n}\n","import { noop } from './noop';\nimport { UnaryFunction } from '../types';\n\n/* tslint:disable:max-line-length */\nexport function pipe<T>(): UnaryFunction<T, T>;\nexport function pipe<T, A>(fn1: UnaryFunction<T, A>): UnaryFunction<T, A>;\nexport function pipe<T, A, B>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>): UnaryFunction<T, B>;\nexport function pipe<T, A, B, C>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>): UnaryFunction<T, C>;\nexport function pipe<T, A, B, C, D>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>, fn4: UnaryFunction<C, D>): UnaryFunction<T, D>;\nexport function pipe<T, A, B, C, D, E>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>, fn4: UnaryFunction<C, D>, fn5: UnaryFunction<D, E>): UnaryFunction<T, E>;\nexport function pipe<T, A, B, C, D, E, F>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>, fn4: UnaryFunction<C, D>, fn5: UnaryFunction<D, E>, fn6: UnaryFunction<E, F>): UnaryFunction<T, F>;\nexport function pipe<T, A, B, C, D, E, F, G>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>, fn4: UnaryFunction<C, D>, fn5: UnaryFunction<D, E>, fn6: UnaryFunction<E, F>, fn7: UnaryFunction<F, G>): UnaryFunction<T, G>;\nexport function pipe<T, A, B, C, D, E, F, G, H>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>, fn4: UnaryFunction<C, D>, fn5: UnaryFunction<D, E>, fn6: UnaryFunction<E, F>, fn7: UnaryFunction<F, G>, fn8: UnaryFunction<G, H>): UnaryFunction<T, H>;\nexport function pipe<T, A, B, C, D, E, F, G, H, I>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>, fn4: UnaryFunction<C, D>, fn5: UnaryFunction<D, E>, fn6: UnaryFunction<E, F>, fn7: UnaryFunction<F, G>, fn8: UnaryFunction<G, H>, fn9: UnaryFunction<H, I>): UnaryFunction<T, I>;\nexport function pipe<T, A, B, C, D, E, F, G, H, I>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>, fn4: UnaryFunction<C, D>, fn5: UnaryFunction<D, E>, fn6: UnaryFunction<E, F>, fn7: UnaryFunction<F, G>, fn8: UnaryFunction<G, H>, fn9: UnaryFunction<H, I>, ...fns: UnaryFunction<any, any>[]): UnaryFunction<T, {}>;\n/* tslint:enable:max-line-length */\n\nexport function pipe(...fns: Array<UnaryFunction<any, any>>): UnaryFunction<any, any> {\n  return pipeFromArray(fns);\n}\n\n/** @internal */\nexport function pipeFromArray<T, R>(fns: Array<UnaryFunction<T, R>>): UnaryFunction<T, R> {\n  if (!fns) {\n    return noop as UnaryFunction<any, any>;\n  }\n\n  if (fns.length === 1) {\n    return fns[0];\n  }\n\n  return function piped(input: T): R {\n    return fns.reduce((prev: any, fn: UnaryFunction<T, R>) => fn(prev), input as any);\n  };\n}\n","/* tslint:disable:no-empty */\nexport function noop() { }\n","import { root } from '../util/root';\n\n/** Symbol.observable addition */\n/* Note: This will add Symbol.observable globally for all TypeScript users,\n  however, we are no longer polyfilling Symbol.observable */\ndeclare global {\n  interface SymbolConstructor {\n    readonly observable: symbol;\n  }\n}\n\n/** Symbol.observable or a string \"@@observable\". Used for interop */\nexport const observable = typeof Symbol === 'function' && Symbol.observable || '@@observable';\n","import { Subscriber } from '../Subscriber';\nimport { rxSubscriber as rxSubscriberSymbol } from '../symbol/rxSubscriber';\nimport { empty as emptyObserver } from '../Observer';\nimport { PartialObserver } from '../types';\n\nexport function toSubscriber<T>(\n  nextOrObserver?: PartialObserver<T> | ((value: T) => void),\n  error?: (error: any) => void,\n  complete?: () => void): Subscriber<T> {\n\n  if (nextOrObserver) {\n    if (nextOrObserver instanceof Subscriber) {\n      return (<Subscriber<T>> nextOrObserver);\n    }\n\n    if (nextOrObserver[rxSubscriberSymbol]) {\n      return nextOrObserver[rxSubscriberSymbol]();\n    }\n  }\n\n  if (!nextOrObserver && !error && !complete) {\n    return new Subscriber(emptyObserver);\n  }\n\n  return new Subscriber(nextOrObserver, error, complete);\n}\n","import { Subscriber } from '../Subscriber';\nimport { Subject } from '../Subject';\n\n/**\n * Determines whether the ErrorObserver is closed or stopped or has a\n * destination that is closed or stopped - in which case errors will\n * need to be reported via a different mechanism.\n * @param observer the observer\n */\nexport function canReportError(observer: Subscriber<any> | Subject<any>): boolean {\n  while (observer) {\n    const { closed, destination, isStopped } = observer as any;\n    if (closed || isStopped) {\n      return false;\n    } else if (destination && destination instanceof Subscriber) {\n      observer = destination;\n    } else {\n      observer = null;\n    }\n  }\n  return true;\n}\n","import { isFunction } from './util/isFunction';\nimport { empty as emptyObserver } from './Observer';\nimport { Observer, PartialObserver, TeardownLogic } from './types';\nimport { Subscription } from './Subscription';\nimport { rxSubscriber as rxSubscriberSymbol } from '../internal/symbol/rxSubscriber';\nimport { config } from './config';\nimport { hostReportError } from './util/hostReportError';\n\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nexport class Subscriber<T> extends Subscription implements Observer<T> {\n\n  [rxSubscriberSymbol]() { return this; }\n\n  /**\n   * A static factory for a Subscriber, given a (potentially partial) definition\n   * of an Observer.\n   * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n   * Observer represented by the given arguments.\n   * @nocollapse\n   */\n  static create<T>(next?: (x?: T) => void,\n                   error?: (e?: any) => void,\n                   complete?: () => void): Subscriber<T> {\n    const subscriber = new Subscriber(next, error, complete);\n    subscriber.syncErrorThrowable = false;\n    return subscriber;\n  }\n\n  /** @internal */ syncErrorValue: any = null;\n  /** @internal */ syncErrorThrown: boolean = false;\n  /** @internal */ syncErrorThrowable: boolean = false;\n\n  protected isStopped: boolean = false;\n  protected destination: PartialObserver<any> | Subscriber<any>; // this `any` is the escape hatch to erase extra type param (e.g. R)\n\n  private _parentSubscription: Subscription | null = null;\n\n  /**\n   * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n   * defined Observer or a `next` callback function.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   */\n  constructor(destinationOrNext?: PartialObserver<any> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    switch (arguments.length) {\n      case 0:\n        this.destination = emptyObserver;\n        break;\n      case 1:\n        if (!destinationOrNext) {\n          this.destination = emptyObserver;\n          break;\n        }\n        if (typeof destinationOrNext === 'object') {\n          if (destinationOrNext instanceof Subscriber) {\n            this.syncErrorThrowable = destinationOrNext.syncErrorThrowable;\n            this.destination = destinationOrNext;\n            destinationOrNext.add(this);\n          } else {\n            this.syncErrorThrowable = true;\n            this.destination = new SafeSubscriber<T>(this, <PartialObserver<any>> destinationOrNext);\n          }\n          break;\n        }\n      default:\n        this.syncErrorThrowable = true;\n        this.destination = new SafeSubscriber<T>(this, <((value: T) => void)> destinationOrNext, error, complete);\n        break;\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `next` from\n   * the Observable, with a value. The Observable may call this method 0 or more\n   * times.\n   * @param {T} [value] The `next` value.\n   * @return {void}\n   */\n  next(value?: T): void {\n    if (!this.isStopped) {\n      this._next(value);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `error` from\n   * the Observable, with an attached `Error`. Notifies the Observer that\n   * the Observable has experienced an error condition.\n   * @param {any} [err] The `error` exception.\n   * @return {void}\n   */\n  error(err?: any): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._error(err);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive a valueless notification of type\n   * `complete` from the Observable. Notifies the Observer that the Observable\n   * has finished sending push-based notifications.\n   * @return {void}\n   */\n  complete(): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._complete();\n    }\n  }\n\n  unsubscribe(): void {\n    if (this.closed) {\n      return;\n    }\n    this.isStopped = true;\n    super.unsubscribe();\n  }\n\n  protected _next(value: T): void {\n    this.destination.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.destination.error(err);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.destination.complete();\n    this.unsubscribe();\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _unsubscribeAndRecycle(): Subscriber<T> {\n    const { _parent, _parents } = this;\n    this._parent = null;\n    this._parents = null;\n    this.unsubscribe();\n    this.closed = false;\n    this.isStopped = false;\n    this._parent = _parent;\n    this._parents = _parents;\n    this._parentSubscription = null;\n    return this;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SafeSubscriber<T> extends Subscriber<T> {\n\n  private _context: any;\n\n  constructor(private _parentSubscriber: Subscriber<T>,\n              observerOrNext?: PartialObserver<T> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    let next: ((value: T) => void);\n    let context: any = this;\n\n    if (isFunction(observerOrNext)) {\n      next = (<((value: T) => void)> observerOrNext);\n    } else if (observerOrNext) {\n      next = (<PartialObserver<T>> observerOrNext).next;\n      error = (<PartialObserver<T>> observerOrNext).error;\n      complete = (<PartialObserver<T>> observerOrNext).complete;\n      if (observerOrNext !== emptyObserver) {\n        context = Object.create(observerOrNext);\n        if (isFunction(context.unsubscribe)) {\n          this.add(<() => void> context.unsubscribe.bind(context));\n        }\n        context.unsubscribe = this.unsubscribe.bind(this);\n      }\n    }\n\n    this._context = context;\n    this._next = next;\n    this._error = error;\n    this._complete = complete;\n  }\n\n  next(value?: T): void {\n    if (!this.isStopped && this._next) {\n      const { _parentSubscriber } = this;\n      if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n        this.__tryOrUnsub(this._next, value);\n      } else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  error(err?: any): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      const { useDeprecatedSynchronousErrorHandling } = config;\n      if (this._error) {\n        if (!useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(this._error, err);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, this._error, err);\n          this.unsubscribe();\n        }\n      } else if (!_parentSubscriber.syncErrorThrowable) {\n        this.unsubscribe();\n        if (useDeprecatedSynchronousErrorHandling) {\n          throw err;\n        }\n        hostReportError(err);\n      } else {\n        if (useDeprecatedSynchronousErrorHandling) {\n          _parentSubscriber.syncErrorValue = err;\n          _parentSubscriber.syncErrorThrown = true;\n        } else {\n          hostReportError(err);\n        }\n        this.unsubscribe();\n      }\n    }\n  }\n\n  complete(): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      if (this._complete) {\n        const wrappedComplete = () => this._complete.call(this._context);\n\n        if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(wrappedComplete);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n          this.unsubscribe();\n        }\n      } else {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  private __tryOrUnsub(fn: Function, value?: any): void {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      this.unsubscribe();\n      if (config.useDeprecatedSynchronousErrorHandling) {\n        throw err;\n      } else {\n        hostReportError(err);\n      }\n    }\n  }\n\n  private __tryOrSetError(parent: Subscriber<T>, fn: Function, value?: any): boolean {\n    if (!config.useDeprecatedSynchronousErrorHandling) {\n      throw new Error('bad call');\n    }\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      if (config.useDeprecatedSynchronousErrorHandling) {\n        parent.syncErrorValue = err;\n        parent.syncErrorThrown = true;\n        return true;\n      } else {\n        hostReportError(err);\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /** @internal This is an internal implementation detail, do not use. */\n  _unsubscribe(): void {\n    const { _parentSubscriber } = this;\n    this._context = null;\n    this._parentSubscriber = null;\n    _parentSubscriber.unsubscribe();\n  }\n}\n","/** @deprecated do not use, this is no longer checked by RxJS internals */\nexport const rxSubscriber =\n  typeof Symbol === 'function'\n    ? Symbol('rxSubscriber')\n    : '@@rxSubscriber_' + Math.random();\n\n/**\n * @deprecated use rxSubscriber instead\n */\nexport const $$rxSubscriber = rxSubscriber;\n","import { isArray } from './util/isArray';\nimport { isObject } from './util/isObject';\nimport { isFunction } from './util/isFunction';\nimport { tryCatch } from './util/tryCatch';\nimport { errorObject } from './util/errorObject';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\nimport { SubscriptionLike, TeardownLogic } from './types';\n\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nexport class Subscription implements SubscriptionLike {\n  /** @nocollapse */\n  public static EMPTY: Subscription = (function(empty: any) {\n    empty.closed = true;\n    return empty;\n  }(new Subscription()));\n\n  /**\n   * A flag to indicate whether this Subscription has already been unsubscribed.\n   * @type {boolean}\n   */\n  public closed: boolean = false;\n\n  /** @internal */\n  protected _parent: Subscription = null;\n  /** @internal */\n  protected _parents: Subscription[] = null;\n  /** @internal */\n  private _subscriptions: SubscriptionLike[] = null;\n\n  /**\n   * @param {function(): void} [unsubscribe] A function describing how to\n   * perform the disposal of resources when the `unsubscribe` method is called.\n   */\n  constructor(unsubscribe?: () => void) {\n    if (unsubscribe) {\n      (<any> this)._unsubscribe = unsubscribe;\n    }\n  }\n\n  /**\n   * Disposes the resources held by the subscription. May, for instance, cancel\n   * an ongoing Observable execution or cancel any other type of work that\n   * started when the Subscription was created.\n   * @return {void}\n   */\n  unsubscribe(): void {\n    let hasErrors = false;\n    let errors: any[];\n\n    if (this.closed) {\n      return;\n    }\n\n    let { _parent, _parents, _unsubscribe, _subscriptions } = (<any> this);\n\n    this.closed = true;\n    this._parent = null;\n    this._parents = null;\n    // null out _subscriptions first so any child subscriptions that attempt\n    // to remove themselves from this subscription will noop\n    this._subscriptions = null;\n\n    let index = -1;\n    let len = _parents ? _parents.length : 0;\n\n    // if this._parent is null, then so is this._parents, and we\n    // don't have to remove ourselves from any parent subscriptions.\n    while (_parent) {\n      _parent.remove(this);\n      // if this._parents is null or index >= len,\n      // then _parent is set to null, and the loop exits\n      _parent = ++index < len && _parents[index] || null;\n    }\n\n    if (isFunction(_unsubscribe)) {\n      let trial = tryCatch(_unsubscribe).call(this);\n      if (trial === errorObject) {\n        hasErrors = true;\n        errors = errors || (\n          errorObject.e instanceof UnsubscriptionError ?\n            flattenUnsubscriptionErrors(errorObject.e.errors) : [errorObject.e]\n        );\n      }\n    }\n\n    if (isArray(_subscriptions)) {\n\n      index = -1;\n      len = _subscriptions.length;\n\n      while (++index < len) {\n        const sub = _subscriptions[index];\n        if (isObject(sub)) {\n          let trial = tryCatch(sub.unsubscribe).call(sub);\n          if (trial === errorObject) {\n            hasErrors = true;\n            errors = errors || [];\n            let err = errorObject.e;\n            if (err instanceof UnsubscriptionError) {\n              errors = errors.concat(flattenUnsubscriptionErrors(err.errors));\n            } else {\n              errors.push(err);\n            }\n          }\n        }\n      }\n    }\n\n    if (hasErrors) {\n      throw new UnsubscriptionError(errors);\n    }\n  }\n\n  /**\n   * Adds a tear down to be called during the unsubscribe() of this\n   * Subscription.\n   *\n   * If the tear down being added is a subscription that is already\n   * unsubscribed, is the same reference `add` is being called on, or is\n   * `Subscription.EMPTY`, it will not be added.\n   *\n   * If this subscription is already in an `closed` state, the passed\n   * tear down logic will be executed immediately.\n   *\n   * @param {TeardownLogic} teardown The additional logic to execute on\n   * teardown.\n   * @return {Subscription} Returns the Subscription used or created to be\n   * added to the inner subscriptions list. This Subscription can be used with\n   * `remove()` to remove the passed teardown logic from the inner subscriptions\n   * list.\n   */\n  add(teardown: TeardownLogic): Subscription {\n    if (!teardown || (teardown === Subscription.EMPTY)) {\n      return Subscription.EMPTY;\n    }\n\n    if (teardown === this) {\n      return this;\n    }\n\n    let subscription = (<Subscription> teardown);\n\n    switch (typeof teardown) {\n      case 'function':\n        subscription = new Subscription(<(() => void) > teardown);\n      case 'object':\n        if (subscription.closed || typeof subscription.unsubscribe !== 'function') {\n          return subscription;\n        } else if (this.closed) {\n          subscription.unsubscribe();\n          return subscription;\n        } else if (typeof subscription._addParent !== 'function' /* quack quack */) {\n          const tmp = subscription;\n          subscription = new Subscription();\n          subscription._subscriptions = [tmp];\n        }\n        break;\n      default:\n        throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n    }\n\n    const subscriptions = this._subscriptions || (this._subscriptions = []);\n\n    subscriptions.push(subscription);\n    subscription._addParent(this);\n\n    return subscription;\n  }\n\n  /**\n   * Removes a Subscription from the internal list of subscriptions that will\n   * unsubscribe during the unsubscribe process of this Subscription.\n   * @param {Subscription} subscription The subscription to remove.\n   * @return {void}\n   */\n  remove(subscription: Subscription): void {\n    const subscriptions = this._subscriptions;\n    if (subscriptions) {\n      const subscriptionIndex = subscriptions.indexOf(subscription);\n      if (subscriptionIndex !== -1) {\n        subscriptions.splice(subscriptionIndex, 1);\n      }\n    }\n  }\n\n  /** @internal */\n  private _addParent(parent: Subscription) {\n    let { _parent, _parents } = this;\n    if (!_parent || _parent === parent) {\n      // If we don't have a parent, or the new parent is the same as the\n      // current parent, then set this._parent to the new parent.\n      this._parent = parent;\n    } else if (!_parents) {\n      // If there's already one parent, but not multiple, allocate an Array to\n      // store the rest of the parent Subscriptions.\n      this._parents = [parent];\n    } else if (_parents.indexOf(parent) === -1) {\n      // Only add the new parent to the _parents list if it's not already there.\n      _parents.push(parent);\n    }\n  }\n}\n\nfunction flattenUnsubscriptionErrors(errors: any[]) {\n return errors.reduce((errs, err) => errs.concat((err instanceof UnsubscriptionError) ? err.errors : err), []);\n}\n","export interface UnsubscriptionError extends Error {\n  readonly errors: any[];\n}\n\nexport interface UnsubscriptionErrorCtor {\n  new(errors: any[]): UnsubscriptionError;\n}\n\nfunction UnsubscriptionErrorImpl(this: any, errors: any[]) {\n  Error.call(this);\n  this.message = errors ?\n  `${errors.length} errors occurred during unsubscription:\n${errors.map((err, i) => `${i + 1}) ${err.toString()}`).join('\\n  ')}` : '';\n  this.name = 'UnsubscriptionError';\n  this.errors = errors;\n  return this;\n}\n\nUnsubscriptionErrorImpl.prototype = Object.create(Error.prototype);\n\n/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nexport const UnsubscriptionError: UnsubscriptionErrorCtor = UnsubscriptionErrorImpl as any;","import { errorObject } from './errorObject';\n\nlet tryCatchTarget: Function;\n\nfunction tryCatcher(this: any): any {\n  try {\n    return tryCatchTarget.apply(this, arguments);\n  } catch (e) {\n    errorObject.e = e;\n    return errorObject;\n  }\n}\n\nexport function tryCatch<T extends Function>(fn: T): T {\n  tryCatchTarget = fn;\n  return <any>tryCatcher;\n}\n","// typeof any so that it we don't have to cast when comparing a result to the error object\nexport const errorObject: any = { e: {} };","export function isObject(x: any): x is Object {\n  return x != null && typeof x === 'object';\n}\n","export const isArray = Array.isArray || (<T>(x: any): x is T[] => x && typeof x.length === 'number');\n","import { Observer } from './types';\nimport { config } from './config';\nimport { hostReportError } from './util/hostReportError';\n\nexport const empty: Observer<any> = {\n  closed: true,\n  next(value: any): void { /* noop */},\n  error(err: any): void {\n    if (config.useDeprecatedSynchronousErrorHandling) {\n      throw err;\n    } else {\n      hostReportError(err);\n    }\n  },\n  complete(): void { /*noop*/ }\n};\n","/**\n * Throws an error on another job so that it's picked up by the runtime's\n * uncaught error handling mechanism.\n * @param err the error to throw\n */\nexport function hostReportError(err: any) {\n  setTimeout(() => { throw err; });\n}","let _enable_super_gross_mode_that_will_cause_bad_things = false;\n\n/**\n * The global configuration object for RxJS, used to configure things\n * like what Promise contructor should used to create Promises\n */\nexport const config = {\n  /**\n   * The promise constructor used by default for methods such as\n   * {@link toPromise} and {@link forEach}\n   */\n  Promise: undefined as PromiseConstructorLike,\n\n  /**\n   * If true, turns on synchronous error rethrowing, which is a deprecated behavior\n   * in v6 and higher. This behavior enables bad patterns like wrapping a subscribe\n   * call in a try/catch block. It also enables producer interference, a nasty bug\n   * where a multicast can be broken for all observers by a downstream consumer with\n   * an unhandled error. DO NOT USE THIS FLAG UNLESS IT'S NEEDED TO BY TIME\n   * FOR MIGRATION REASONS.\n   */\n  set useDeprecatedSynchronousErrorHandling(value: boolean) {\n    if (value) {\n      const error = new Error();\n      console.warn('DEPRECATED! RxJS was set to use deprecated synchronous error handling behavior by code at: \\n' + error.stack);\n    } else if (_enable_super_gross_mode_that_will_cause_bad_things) {\n      console.log('RxJS: Back to a better error behavior. Thank you. <3');\n    }\n    _enable_super_gross_mode_that_will_cause_bad_things = value;\n  },\n\n  get useDeprecatedSynchronousErrorHandling() {\n    return _enable_super_gross_mode_that_will_cause_bad_things;\n  },\n};\n","export function isFunction(x: any): x is Function {\n  return typeof x === 'function';\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n"],"names":["CommonModule","NgModule","Pipe","Output","Input","Component","EventEmitter","Injectable","Version","DOCUMENT","APP_ID","tslib_1.__param","Inject","inject","Optional","SkipSelf","ApplicationModule","NgZone","Testability","RendererFactory2","Console","PLATFORM_ID","ErrorHandler","APP_ROOT","createPlatformFactory","platformCore","Sanitizer","PlatformLocation","PLATFORM_INITIALIZER","PLATFORM_BROWSER_ID","tslib_1.__extends","SecurityContext","_sanitizeUrl","_sanitizeStyle","_sanitizeHtml","InjectionToken","isPlatformServer","ViewEncapsulation","RendererStyleFlags2","core.NgProbeToken","core.Optional","core.APP_INITIALIZER","core.getDebugNode","core.NgZone","core.ApplicationRef","global","setTestabilityGetter","Injector","APP_INITIALIZER","ApplicationInitStatus","commonDOCUMENT","parseCookieValue","Symbol_iterator","iterator","dispatch","Symbol_observable","empty","refCount","higherOrderRefCount","RefCountSubscriber","RefCountOperator","rxSubscriberSymbol","observable","emptyObserver"],"mappings":"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"}